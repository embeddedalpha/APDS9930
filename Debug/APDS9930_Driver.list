
APDS9930_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b90  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a8  08005d40  08005d40  00006d40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060e8  080060e8  000081cc  2**0
                  CONTENTS
  4 .ARM          00000008  080060e8  080060e8  000070e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080060f0  080060f0  000081cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080060f0  080060f0  000070f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080060f4  080060f4  000070f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001cc  20000000  080060f8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000081cc  2**0
                  CONTENTS
 10 .bss          00000228  200001cc  200001cc  000081cc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200003f4  200003f4  000081cc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000081cc  2**0
                  CONTENTS, READONLY
 13 .debug_info   000087df  00000000  00000000  000081fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001098  00000000  00000000  000109db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000368  00000000  00000000  00011a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000270  00000000  00000000  00011de0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b4fe  00000000  00000000  00012050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00005e45  00000000  00000000  0002d54e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00090f94  00000000  00000000  00033393  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000c4327  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001e74  00000000  00000000  000c436c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004f  00000000  00000000  000c61e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001cc 	.word	0x200001cc
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005d28 	.word	0x08005d28

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001d0 	.word	0x200001d0
 80001ec:	08005d28 	.word	0x08005d28

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_d2lz>:
 8000c68:	b538      	push	{r3, r4, r5, lr}
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	4604      	mov	r4, r0
 8000c70:	460d      	mov	r5, r1
 8000c72:	f7ff ff43 	bl	8000afc <__aeabi_dcmplt>
 8000c76:	b928      	cbnz	r0, 8000c84 <__aeabi_d2lz+0x1c>
 8000c78:	4620      	mov	r0, r4
 8000c7a:	4629      	mov	r1, r5
 8000c7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c80:	f000 b80a 	b.w	8000c98 <__aeabi_d2ulz>
 8000c84:	4620      	mov	r0, r4
 8000c86:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000c8a:	f000 f805 	bl	8000c98 <__aeabi_d2ulz>
 8000c8e:	4240      	negs	r0, r0
 8000c90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c94:	bd38      	pop	{r3, r4, r5, pc}
 8000c96:	bf00      	nop

08000c98 <__aeabi_d2ulz>:
 8000c98:	b5d0      	push	{r4, r6, r7, lr}
 8000c9a:	4b0c      	ldr	r3, [pc, #48]	@ (8000ccc <__aeabi_d2ulz+0x34>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	4606      	mov	r6, r0
 8000ca0:	460f      	mov	r7, r1
 8000ca2:	f7ff fcb9 	bl	8000618 <__aeabi_dmul>
 8000ca6:	f000 f815 	bl	8000cd4 <__aeabi_d2uiz>
 8000caa:	4604      	mov	r4, r0
 8000cac:	f7ff fc3a 	bl	8000524 <__aeabi_ui2d>
 8000cb0:	4b07      	ldr	r3, [pc, #28]	@ (8000cd0 <__aeabi_d2ulz+0x38>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f7ff fcb0 	bl	8000618 <__aeabi_dmul>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	460b      	mov	r3, r1
 8000cbc:	4630      	mov	r0, r6
 8000cbe:	4639      	mov	r1, r7
 8000cc0:	f7ff faf2 	bl	80002a8 <__aeabi_dsub>
 8000cc4:	f000 f806 	bl	8000cd4 <__aeabi_d2uiz>
 8000cc8:	4621      	mov	r1, r4
 8000cca:	bdd0      	pop	{r4, r6, r7, pc}
 8000ccc:	3df00000 	.word	0x3df00000
 8000cd0:	41f00000 	.word	0x41f00000

08000cd4 <__aeabi_d2uiz>:
 8000cd4:	004a      	lsls	r2, r1, #1
 8000cd6:	d211      	bcs.n	8000cfc <__aeabi_d2uiz+0x28>
 8000cd8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000cdc:	d211      	bcs.n	8000d02 <__aeabi_d2uiz+0x2e>
 8000cde:	d50d      	bpl.n	8000cfc <__aeabi_d2uiz+0x28>
 8000ce0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ce4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ce8:	d40e      	bmi.n	8000d08 <__aeabi_d2uiz+0x34>
 8000cea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cee:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000cf2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000cf6:	fa23 f002 	lsr.w	r0, r3, r2
 8000cfa:	4770      	bx	lr
 8000cfc:	f04f 0000 	mov.w	r0, #0
 8000d00:	4770      	bx	lr
 8000d02:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000d06:	d102      	bne.n	8000d0e <__aeabi_d2uiz+0x3a>
 8000d08:	f04f 30ff 	mov.w	r0, #4294967295
 8000d0c:	4770      	bx	lr
 8000d0e:	f04f 0000 	mov.w	r0, #0
 8000d12:	4770      	bx	lr

08000d14 <Delay_ms>:
	while((SysTick->CTRL & 0x00010000) == 0);
	return (0UL);                                                     /* Function successful */
}

__STATIC_INLINE uint32_t Delay_ms(float ms)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b085      	sub	sp, #20
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	ed87 0a01 	vstr	s0, [r7, #4]
	unsigned long x =0x29040 * (ms);
 8000d1e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d22:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8000d68 <Delay_ms+0x54>
 8000d26:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d2e:	ee17 3a90 	vmov	r3, s15
 8000d32:	60fb      	str	r3, [r7, #12]
	SysTick->LOAD =  x ;
 8000d34:	4a0d      	ldr	r2, [pc, #52]	@ (8000d6c <Delay_ms+0x58>)
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	6053      	str	r3, [r2, #4]
	SysTick->VAL = 0;
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <Delay_ms+0x58>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	609a      	str	r2, [r3, #8]
	SysTick->CTRL |= 1;
 8000d40:	4b0a      	ldr	r3, [pc, #40]	@ (8000d6c <Delay_ms+0x58>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a09      	ldr	r2, [pc, #36]	@ (8000d6c <Delay_ms+0x58>)
 8000d46:	f043 0301 	orr.w	r3, r3, #1
 8000d4a:	6013      	str	r3, [r2, #0]
	while((SysTick->CTRL & 0x00010000) == 0);
 8000d4c:	bf00      	nop
 8000d4e:	4b07      	ldr	r3, [pc, #28]	@ (8000d6c <Delay_ms+0x58>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d0f9      	beq.n	8000d4e <Delay_ms+0x3a>
	return (0UL);                                                     /* Function successful */
 8000d5a:	2300      	movs	r3, #0
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	3714      	adds	r7, #20
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr
 8000d68:	48241000 	.word	0x48241000
 8000d6c:	e000e010 	.word	0xe000e010

08000d70 <Write_Reg>:
#define ALS_Interrupt_Clear_Command 0x06
#define Prox_and_ALS_Interrupt_Clear_Command 0x07


void Write_Reg(uint8_t reg, uint8_t data)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	460a      	mov	r2, r1
 8000d7a:	71fb      	strb	r3, [r7, #7]
 8000d7c:	4613      	mov	r3, r2
 8000d7e:	71bb      	strb	r3, [r7, #6]
	I2C_Master_Write_Register(&APDS9930_I2C, 0x39, 0x80 | reg, data);
 8000d80:	79fb      	ldrb	r3, [r7, #7]
 8000d82:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000d86:	b2da      	uxtb	r2, r3
 8000d88:	79bb      	ldrb	r3, [r7, #6]
 8000d8a:	2139      	movs	r1, #57	@ 0x39
 8000d8c:	4803      	ldr	r0, [pc, #12]	@ (8000d9c <Write_Reg+0x2c>)
 8000d8e:	f000 ff0e 	bl	8001bae <I2C_Master_Write_Register>
}
 8000d92:	bf00      	nop
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	200001e8 	.word	0x200001e8

08000da0 <Read_Reg>:

uint8_t Read_Reg(uint8_t reg)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	4603      	mov	r3, r0
 8000da8:	71fb      	strb	r3, [r7, #7]

	return I2C_Master_Read_Register(&APDS9930_I2C, 0x39, 0xA0 | reg);
 8000daa:	79fb      	ldrb	r3, [r7, #7]
 8000dac:	f063 035f 	orn	r3, r3, #95	@ 0x5f
 8000db0:	b2db      	uxtb	r3, r3
 8000db2:	461a      	mov	r2, r3
 8000db4:	2139      	movs	r1, #57	@ 0x39
 8000db6:	4804      	ldr	r0, [pc, #16]	@ (8000dc8 <Read_Reg+0x28>)
 8000db8:	f000 ff20 	bl	8001bfc <I2C_Master_Read_Register>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	b2db      	uxtb	r3, r3
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	3708      	adds	r7, #8
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	200001e8 	.word	0x200001e8

08000dcc <Read_Word>:

uint16_t Read_Word(uint8_t reg)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	71fb      	strb	r3, [r7, #7]
	uint16_t x;
	uint16_t y;

	x = Read_Reg(reg);
 8000dd6:	79fb      	ldrb	r3, [r7, #7]
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f7ff ffe1 	bl	8000da0 <Read_Reg>
 8000dde:	4603      	mov	r3, r0
 8000de0:	81fb      	strh	r3, [r7, #14]
	y = Read_Reg(reg+1)<<8;
 8000de2:	79fb      	ldrb	r3, [r7, #7]
 8000de4:	3301      	adds	r3, #1
 8000de6:	b2db      	uxtb	r3, r3
 8000de8:	4618      	mov	r0, r3
 8000dea:	f7ff ffd9 	bl	8000da0 <Read_Reg>
 8000dee:	4603      	mov	r3, r0
 8000df0:	021b      	lsls	r3, r3, #8
 8000df2:	81bb      	strh	r3, [r7, #12]

	return (x|y);
 8000df4:	89fa      	ldrh	r2, [r7, #14]
 8000df6:	89bb      	ldrh	r3, [r7, #12]
 8000df8:	4313      	orrs	r3, r2
 8000dfa:	b29b      	uxth	r3, r3
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	3710      	adds	r7, #16
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <APDS9930_Proximity_Interrupt_Clear>:

void APDS9930_Proximity_Interrupt_Clear(APDS9930 *config)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
	I2C_Master_Start(&APDS9930_I2C);
 8000e0c:	4809      	ldr	r0, [pc, #36]	@ (8000e34 <APDS9930_Proximity_Interrupt_Clear+0x30>)
 8000e0e:	f000 fe39 	bl	8001a84 <I2C_Master_Start>
	I2C_Master_Address(&APDS9930_I2C, 0x39,0);
 8000e12:	2200      	movs	r2, #0
 8000e14:	2139      	movs	r1, #57	@ 0x39
 8000e16:	4807      	ldr	r0, [pc, #28]	@ (8000e34 <APDS9930_Proximity_Interrupt_Clear+0x30>)
 8000e18:	f000 fe60 	bl	8001adc <I2C_Master_Address>
	I2C_Master_Send_Byte(&APDS9930_I2C, 0xE0 | Proximity_Interrupt_Clear_Command);
 8000e1c:	21e5      	movs	r1, #229	@ 0xe5
 8000e1e:	4805      	ldr	r0, [pc, #20]	@ (8000e34 <APDS9930_Proximity_Interrupt_Clear+0x30>)
 8000e20:	f000 fe92 	bl	8001b48 <I2C_Master_Send_Byte>
	I2C_Master_Stop(&APDS9930_I2C);
 8000e24:	4803      	ldr	r0, [pc, #12]	@ (8000e34 <APDS9930_Proximity_Interrupt_Clear+0x30>)
 8000e26:	f000 feb0 	bl	8001b8a <I2C_Master_Stop>

}
 8000e2a:	bf00      	nop
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	200001e8 	.word	0x200001e8

08000e38 <APDS9930_DeInit>:
	I2C_Master_Send_Byte(&APDS9930_I2C, 0xE0 | Prox_and_ALS_Interrupt_Clear_Command);
	I2C_Master_Stop(&APDS9930_I2C);
}

void APDS9930_DeInit(APDS9930 *config)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
	config->Port = NULL;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2200      	movs	r2, #0
 8000e44:	601a      	str	r2, [r3, #0]
	config->Interrupt_Port = NULL;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	2200      	movs	r2, #0
 8000e4a:	609a      	str	r2, [r3, #8]
	config->SDA_Pin = 0;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	2200      	movs	r2, #0
 8000e50:	711a      	strb	r2, [r3, #4]
	config->SCL_Pin = 0;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	2200      	movs	r2, #0
 8000e56:	715a      	strb	r2, [r3, #5]
	config->Proximity_Interrupt_Enable = false;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	735a      	strb	r2, [r3, #13]
	config->ALS_Interrupt_Enable = false;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2200      	movs	r2, #0
 8000e62:	749a      	strb	r2, [r3, #18]
	config->Proximity_Data = -1;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e6a:	831a      	strh	r2, [r3, #24]
	config->Lux_Data = -1;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	4a04      	ldr	r2, [pc, #16]	@ (8000e80 <APDS9930_DeInit+0x48>)
 8000e70:	61da      	str	r2, [r3, #28]
}
 8000e72:	bf00      	nop
 8000e74:	370c      	adds	r7, #12
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	bf800000 	.word	0xbf800000

08000e84 <APDS9930_Init>:


bool APDS9930_Init(APDS9930 *config)
{
 8000e84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e86:	b089      	sub	sp, #36	@ 0x24
 8000e88:	af04      	add	r7, sp, #16
 8000e8a:	6078      	str	r0, [r7, #4]
	bool retval;

	I2C_Reset(&APDS9930_I2C);
 8000e8c:	486c      	ldr	r0, [pc, #432]	@ (8001040 <APDS9930_Init+0x1bc>)
 8000e8e:	f000 fcc5 	bl	800181c <I2C_Reset>
	APDS9930_I2C.Port = config->Port;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4a6a      	ldr	r2, [pc, #424]	@ (8001040 <APDS9930_Init+0x1bc>)
 8000e98:	6013      	str	r3, [r2, #0]
	APDS9930_I2C.SCL_Pin = config->SCL_Pin;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	795a      	ldrb	r2, [r3, #5]
 8000e9e:	4b68      	ldr	r3, [pc, #416]	@ (8001040 <APDS9930_Init+0x1bc>)
 8000ea0:	721a      	strb	r2, [r3, #8]
	APDS9930_I2C.SDA_Pin = config->SDA_Pin;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	791a      	ldrb	r2, [r3, #4]
 8000ea6:	4b66      	ldr	r3, [pc, #408]	@ (8001040 <APDS9930_Init+0x1bc>)
 8000ea8:	725a      	strb	r2, [r3, #9]
	APDS9930_I2C.mode = I2C_Mode.Master;
 8000eaa:	2200      	movs	r2, #0
 8000eac:	4b64      	ldr	r3, [pc, #400]	@ (8001040 <APDS9930_Init+0x1bc>)
 8000eae:	729a      	strb	r2, [r3, #10]
	APDS9930_I2C.speed = 400000;
 8000eb0:	4b63      	ldr	r3, [pc, #396]	@ (8001040 <APDS9930_Init+0x1bc>)
 8000eb2:	4a64      	ldr	r2, [pc, #400]	@ (8001044 <APDS9930_Init+0x1c0>)
 8000eb4:	605a      	str	r2, [r3, #4]
	I2C_Init(&APDS9930_I2C);
 8000eb6:	4862      	ldr	r0, [pc, #392]	@ (8001040 <APDS9930_Init+0x1bc>)
 8000eb8:	f000 fcf0 	bl	800189c <I2C_Init>



	//Read ID to verify connection with IC

	config->ID = Read_Reg(APDS9930_Regs.ID);
 8000ebc:	2312      	movs	r3, #18
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f7ff ff6e 	bl	8000da0 <Read_Reg>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	461a      	mov	r2, r3
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	f883 2020 	strb.w	r2, [r3, #32]
	if(config -> ID == 0x39)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ed4:	2b39      	cmp	r3, #57	@ 0x39
 8000ed6:	f040 80a8 	bne.w	800102a <APDS9930_Init+0x1a6>
	{
		// Go forward with initialization
		Write_Reg(APDS9930_Regs.ENABLE, 0x00);
 8000eda:	2300      	movs	r3, #0
 8000edc:	2100      	movs	r1, #0
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f7ff ff46 	bl	8000d70 <Write_Reg>

		if((config->ALS_Interrupt_Enable || config->Proximity_Interrupt_Enable) && config->Interrupt_Port != NULL)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	7c9b      	ldrb	r3, [r3, #18]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d103      	bne.n	8000ef4 <APDS9930_Init+0x70>
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	7b5b      	ldrb	r3, [r3, #13]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d06b      	beq.n	8000fcc <APDS9930_Init+0x148>
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	689b      	ldr	r3, [r3, #8]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d067      	beq.n	8000fcc <APDS9930_Init+0x148>
		{
				//enable interrupt
			GPIO_Pin_Init(config->Interrupt_Port, config->Interrupt_Pin, MODE.Input, Output_Type.Open_Drain, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.None);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	6898      	ldr	r0, [r3, #8]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	7b19      	ldrb	r1, [r3, #12]
 8000f04:	2500      	movs	r5, #0
 8000f06:	2601      	movs	r6, #1
 8000f08:	2303      	movs	r3, #3
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	2400      	movs	r4, #0
 8000f0e:	9402      	str	r4, [sp, #8]
 8000f10:	9201      	str	r2, [sp, #4]
 8000f12:	9300      	str	r3, [sp, #0]
 8000f14:	4633      	mov	r3, r6
 8000f16:	462a      	mov	r2, r5
 8000f18:	f000 fb36 	bl	8001588 <GPIO_Pin_Init>
			GPIO_Interrupt_Setup(config->Interrupt_Pin,Interrupt_Edge.FALLING_EDGE , 0);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	7b1b      	ldrb	r3, [r3, #12]
 8000f20:	2201      	movs	r2, #1
 8000f22:	4611      	mov	r1, r2
 8000f24:	2200      	movs	r2, #0
 8000f26:	4618      	mov	r0, r3
 8000f28:	f000 fa30 	bl	800138c <GPIO_Interrupt_Setup>


			if(config->ALS_Interrupt_Enable)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	7c9b      	ldrb	r3, [r3, #18]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d023      	beq.n	8000f7c <APDS9930_Init+0xf8>
			{
				Write_Reg(APDS9930_Regs.AIHTL,  0x00FF & config->ALS_High_Threshold);
 8000f34:	2206      	movs	r2, #6
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	8adb      	ldrh	r3, [r3, #22]
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	4610      	mov	r0, r2
 8000f40:	f7ff ff16 	bl	8000d70 <Write_Reg>
				Write_Reg(APDS9930_Regs.AIHTH, (0xFF00 & config->ALS_High_Threshold)>>8);
 8000f44:	2207      	movs	r2, #7
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	8adb      	ldrh	r3, [r3, #22]
 8000f4a:	0a1b      	lsrs	r3, r3, #8
 8000f4c:	b29b      	uxth	r3, r3
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	4619      	mov	r1, r3
 8000f52:	4610      	mov	r0, r2
 8000f54:	f7ff ff0c 	bl	8000d70 <Write_Reg>
				Write_Reg(APDS9930_Regs.AILTL,  0x00FF & config->ALS_Low_Threshold);
 8000f58:	2204      	movs	r2, #4
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	8a9b      	ldrh	r3, [r3, #20]
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	4619      	mov	r1, r3
 8000f62:	4610      	mov	r0, r2
 8000f64:	f7ff ff04 	bl	8000d70 <Write_Reg>
				Write_Reg(APDS9930_Regs.AILTH, (0xFF00 & config->ALS_Low_Threshold)>>8);
 8000f68:	2205      	movs	r2, #5
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	8a9b      	ldrh	r3, [r3, #20]
 8000f6e:	0a1b      	lsrs	r3, r3, #8
 8000f70:	b29b      	uxth	r3, r3
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	4619      	mov	r1, r3
 8000f76:	4610      	mov	r0, r2
 8000f78:	f7ff fefa 	bl	8000d70 <Write_Reg>
			}

			if(config->Proximity_High_Threshold)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	8a1b      	ldrh	r3, [r3, #16]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d023      	beq.n	8000fcc <APDS9930_Init+0x148>
			{
				Write_Reg(APDS9930_Regs.PIHTL,  0x00FF & config->Proximity_High_Threshold);
 8000f84:	220a      	movs	r2, #10
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	8a1b      	ldrh	r3, [r3, #16]
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4610      	mov	r0, r2
 8000f90:	f7ff feee 	bl	8000d70 <Write_Reg>
				Write_Reg(APDS9930_Regs.PIHTH, (0xFF00 & config->Proximity_High_Threshold)>>8);
 8000f94:	220b      	movs	r2, #11
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	8a1b      	ldrh	r3, [r3, #16]
 8000f9a:	0a1b      	lsrs	r3, r3, #8
 8000f9c:	b29b      	uxth	r3, r3
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	4610      	mov	r0, r2
 8000fa4:	f7ff fee4 	bl	8000d70 <Write_Reg>
				Write_Reg(APDS9930_Regs.PILTL,  0x00FF & config->Proximity_Low_Threshold);
 8000fa8:	2208      	movs	r2, #8
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	89db      	ldrh	r3, [r3, #14]
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	4610      	mov	r0, r2
 8000fb4:	f7ff fedc 	bl	8000d70 <Write_Reg>
				Write_Reg(APDS9930_Regs.PILTH, (0xFF00 & config->Proximity_Low_Threshold)>>8);
 8000fb8:	2209      	movs	r2, #9
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	89db      	ldrh	r3, [r3, #14]
 8000fbe:	0a1b      	lsrs	r3, r3, #8
 8000fc0:	b29b      	uxth	r3, r3
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4610      	mov	r0, r2
 8000fc8:	f7ff fed2 	bl	8000d70 <Write_Reg>

		}



		Write_Reg(APDS9930_Regs.ATIME, 0xED);
 8000fcc:	2301      	movs	r3, #1
 8000fce:	21ed      	movs	r1, #237	@ 0xed
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff fecd 	bl	8000d70 <Write_Reg>
		Write_Reg(APDS9930_Regs.PTIME, 0xFF);
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	21ff      	movs	r1, #255	@ 0xff
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f7ff fec8 	bl	8000d70 <Write_Reg>
		Write_Reg(APDS9930_Regs.WTIME, 0xff);
 8000fe0:	2303      	movs	r3, #3
 8000fe2:	21ff      	movs	r1, #255	@ 0xff
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f7ff fec3 	bl	8000d70 <Write_Reg>
		Write_Reg(APDS9930_Regs.PPULSE, 0x04); //0x01
 8000fea:	230e      	movs	r3, #14
 8000fec:	2104      	movs	r1, #4
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f7ff febe 	bl	8000d70 <Write_Reg>
		Write_Reg(APDS9930_Regs.CONTROL, 0x20);
 8000ff4:	230f      	movs	r3, #15
 8000ff6:	2120      	movs	r1, #32
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff feb9 	bl	8000d70 <Write_Reg>
		Write_Reg(APDS9930_Regs.CONFIG, 0x00);
 8000ffe:	230d      	movs	r3, #13
 8001000:	2100      	movs	r1, #0
 8001002:	4618      	mov	r0, r3
 8001004:	f7ff feb4 	bl	8000d70 <Write_Reg>
		Write_Reg(APDS9930_Regs.POFFSET, 0x00);
 8001008:	231e      	movs	r3, #30
 800100a:	2100      	movs	r1, #0
 800100c:	4618      	mov	r0, r3
 800100e:	f7ff feaf 	bl	8000d70 <Write_Reg>
		Write_Reg(APDS9930_Regs.ENABLE, 0x2F);
 8001012:	2300      	movs	r3, #0
 8001014:	212f      	movs	r1, #47	@ 0x2f
 8001016:	4618      	mov	r0, r3
 8001018:	f7ff feaa 	bl	8000d70 <Write_Reg>
		Delay_ms(12);
 800101c:	eeb2 0a08 	vmov.f32	s0, #40	@ 0x41400000  12.0
 8001020:	f7ff fe78 	bl	8000d14 <Delay_ms>

		retval = true;
 8001024:	2301      	movs	r3, #1
 8001026:	73fb      	strb	r3, [r7, #15]
 8001028:	e005      	b.n	8001036 <APDS9930_Init+0x1b2>
//		APDS9930_Prox_and_ALS_Interrupt_Clear(config);

	}
	else
	{
		config->ID = 0;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2200      	movs	r2, #0
 800102e:	f883 2020 	strb.w	r2, [r3, #32]
		retval = false;
 8001032:	2300      	movs	r3, #0
 8001034:	73fb      	strb	r3, [r7, #15]
	}

	return retval;
 8001036:	7bfb      	ldrb	r3, [r7, #15]
}
 8001038:	4618      	mov	r0, r3
 800103a:	3714      	adds	r7, #20
 800103c:	46bd      	mov	sp, r7
 800103e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001040:	200001e8 	.word	0x200001e8
 8001044:	00061a80 	.word	0x00061a80

08001048 <APDS9930_Get_Lux>:



void APDS9930_Get_Lux(APDS9930 *config)
{
 8001048:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800104c:	b08a      	sub	sp, #40	@ 0x28
 800104e:	af00      	add	r7, sp, #0
 8001050:	6078      	str	r0, [r7, #4]
	float DF = 52.0;
 8001052:	4b63      	ldr	r3, [pc, #396]	@ (80011e0 <APDS9930_Get_Lux+0x198>)
 8001054:	623b      	str	r3, [r7, #32]
	float GA = 0.49;
 8001056:	4b63      	ldr	r3, [pc, #396]	@ (80011e4 <APDS9930_Get_Lux+0x19c>)
 8001058:	61fb      	str	r3, [r7, #28]
	float ALSIT = 2.73 * (256 - 0xED);
 800105a:	4b63      	ldr	r3, [pc, #396]	@ (80011e8 <APDS9930_Get_Lux+0x1a0>)
 800105c:	61bb      	str	r3, [r7, #24]
	float Ch0 = 0.0;
 800105e:	f04f 0300 	mov.w	r3, #0
 8001062:	617b      	str	r3, [r7, #20]
	float Ch1 = 0.0;
 8001064:	f04f 0300 	mov.w	r3, #0
 8001068:	613b      	str	r3, [r7, #16]
	Ch0 = Read_Word(APDS9930_Regs.Ch0DATAL);
 800106a:	2314      	movs	r3, #20
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff fead 	bl	8000dcc <Read_Word>
 8001072:	4603      	mov	r3, r0
 8001074:	ee07 3a90 	vmov	s15, r3
 8001078:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800107c:	edc7 7a05 	vstr	s15, [r7, #20]
	Ch1 = Read_Word(APDS9930_Regs.Ch1DATAL);
 8001080:	2316      	movs	r3, #22
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff fea2 	bl	8000dcc <Read_Word>
 8001088:	4603      	mov	r3, r0
 800108a:	ee07 3a90 	vmov	s15, r3
 800108e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001092:	edc7 7a04 	vstr	s15, [r7, #16]
	float iac = MAX(Ch0 - 1.862 * Ch1,0.746 * Ch0 - 1.291 * Ch1);
 8001096:	6978      	ldr	r0, [r7, #20]
 8001098:	f7ff fa66 	bl	8000568 <__aeabi_f2d>
 800109c:	4604      	mov	r4, r0
 800109e:	460d      	mov	r5, r1
 80010a0:	6938      	ldr	r0, [r7, #16]
 80010a2:	f7ff fa61 	bl	8000568 <__aeabi_f2d>
 80010a6:	a348      	add	r3, pc, #288	@ (adr r3, 80011c8 <APDS9930_Get_Lux+0x180>)
 80010a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ac:	f7ff fab4 	bl	8000618 <__aeabi_dmul>
 80010b0:	4602      	mov	r2, r0
 80010b2:	460b      	mov	r3, r1
 80010b4:	4620      	mov	r0, r4
 80010b6:	4629      	mov	r1, r5
 80010b8:	f7ff f8f6 	bl	80002a8 <__aeabi_dsub>
 80010bc:	4602      	mov	r2, r0
 80010be:	460b      	mov	r3, r1
 80010c0:	4614      	mov	r4, r2
 80010c2:	461d      	mov	r5, r3
 80010c4:	6978      	ldr	r0, [r7, #20]
 80010c6:	f7ff fa4f 	bl	8000568 <__aeabi_f2d>
 80010ca:	a341      	add	r3, pc, #260	@ (adr r3, 80011d0 <APDS9930_Get_Lux+0x188>)
 80010cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010d0:	f7ff faa2 	bl	8000618 <__aeabi_dmul>
 80010d4:	4602      	mov	r2, r0
 80010d6:	460b      	mov	r3, r1
 80010d8:	4690      	mov	r8, r2
 80010da:	4699      	mov	r9, r3
 80010dc:	6938      	ldr	r0, [r7, #16]
 80010de:	f7ff fa43 	bl	8000568 <__aeabi_f2d>
 80010e2:	a33d      	add	r3, pc, #244	@ (adr r3, 80011d8 <APDS9930_Get_Lux+0x190>)
 80010e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e8:	f7ff fa96 	bl	8000618 <__aeabi_dmul>
 80010ec:	4602      	mov	r2, r0
 80010ee:	460b      	mov	r3, r1
 80010f0:	4640      	mov	r0, r8
 80010f2:	4649      	mov	r1, r9
 80010f4:	f7ff f8d8 	bl	80002a8 <__aeabi_dsub>
 80010f8:	4602      	mov	r2, r0
 80010fa:	460b      	mov	r3, r1
 80010fc:	4620      	mov	r0, r4
 80010fe:	4629      	mov	r1, r5
 8001100:	f7ff fd1a 	bl	8000b38 <__aeabi_dcmpgt>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d015      	beq.n	8001136 <APDS9930_Get_Lux+0xee>
 800110a:	6978      	ldr	r0, [r7, #20]
 800110c:	f7ff fa2c 	bl	8000568 <__aeabi_f2d>
 8001110:	4604      	mov	r4, r0
 8001112:	460d      	mov	r5, r1
 8001114:	6938      	ldr	r0, [r7, #16]
 8001116:	f7ff fa27 	bl	8000568 <__aeabi_f2d>
 800111a:	a32b      	add	r3, pc, #172	@ (adr r3, 80011c8 <APDS9930_Get_Lux+0x180>)
 800111c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001120:	f7ff fa7a 	bl	8000618 <__aeabi_dmul>
 8001124:	4602      	mov	r2, r0
 8001126:	460b      	mov	r3, r1
 8001128:	4620      	mov	r0, r4
 800112a:	4629      	mov	r1, r5
 800112c:	f7ff f8bc 	bl	80002a8 <__aeabi_dsub>
 8001130:	4602      	mov	r2, r0
 8001132:	460b      	mov	r3, r1
 8001134:	e01b      	b.n	800116e <APDS9930_Get_Lux+0x126>
 8001136:	6978      	ldr	r0, [r7, #20]
 8001138:	f7ff fa16 	bl	8000568 <__aeabi_f2d>
 800113c:	a324      	add	r3, pc, #144	@ (adr r3, 80011d0 <APDS9930_Get_Lux+0x188>)
 800113e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001142:	f7ff fa69 	bl	8000618 <__aeabi_dmul>
 8001146:	4602      	mov	r2, r0
 8001148:	460b      	mov	r3, r1
 800114a:	4614      	mov	r4, r2
 800114c:	461d      	mov	r5, r3
 800114e:	6938      	ldr	r0, [r7, #16]
 8001150:	f7ff fa0a 	bl	8000568 <__aeabi_f2d>
 8001154:	a320      	add	r3, pc, #128	@ (adr r3, 80011d8 <APDS9930_Get_Lux+0x190>)
 8001156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800115a:	f7ff fa5d 	bl	8000618 <__aeabi_dmul>
 800115e:	4602      	mov	r2, r0
 8001160:	460b      	mov	r3, r1
 8001162:	4620      	mov	r0, r4
 8001164:	4629      	mov	r1, r5
 8001166:	f7ff f89f 	bl	80002a8 <__aeabi_dsub>
 800116a:	4602      	mov	r2, r0
 800116c:	460b      	mov	r3, r1
 800116e:	4610      	mov	r0, r2
 8001170:	4619      	mov	r1, r3
 8001172:	f7ff fd29 	bl	8000bc8 <__aeabi_d2f>
 8001176:	4603      	mov	r3, r0
 8001178:	627b      	str	r3, [r7, #36]	@ 0x24
	if (iac < 0) iac = 0;
 800117a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800117e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001186:	d502      	bpl.n	800118e <APDS9930_Get_Lux+0x146>
 8001188:	f04f 0300 	mov.w	r3, #0
 800118c:	627b      	str	r3, [r7, #36]	@ 0x24
	float lpc  = GA * DF / (ALSIT * 1);
 800118e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001192:	edd7 7a08 	vldr	s15, [r7, #32]
 8001196:	ee67 6a27 	vmul.f32	s13, s14, s15
 800119a:	ed97 7a06 	vldr	s14, [r7, #24]
 800119e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011a2:	edc7 7a03 	vstr	s15, [r7, #12]
	config->Lux_Data = iac * lpc;
 80011a6:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80011aa:	edd7 7a03 	vldr	s15, [r7, #12]
 80011ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	edc3 7a07 	vstr	s15, [r3, #28]
}
 80011b8:	bf00      	nop
 80011ba:	3728      	adds	r7, #40	@ 0x28
 80011bc:	46bd      	mov	sp, r7
 80011be:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80011c2:	bf00      	nop
 80011c4:	f3af 8000 	nop.w
 80011c8:	83126e98 	.word	0x83126e98
 80011cc:	3ffdcac0 	.word	0x3ffdcac0
 80011d0:	645a1cac 	.word	0x645a1cac
 80011d4:	3fe7df3b 	.word	0x3fe7df3b
 80011d8:	9db22d0e 	.word	0x9db22d0e
 80011dc:	3ff4a7ef 	.word	0x3ff4a7ef
 80011e0:	42500000 	.word	0x42500000
 80011e4:	3efae148 	.word	0x3efae148
 80011e8:	424f7ae1 	.word	0x424f7ae1

080011ec <Console_Init>:

USART_Config serial;


 void Console_Init(USART_TypeDef *port,int32_t baudrate)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	6039      	str	r1, [r7, #0]
	 USART_Config_Reset(&serial);
 80011f6:	480e      	ldr	r0, [pc, #56]	@ (8001230 <Console_Init+0x44>)
 80011f8:	f001 f903 	bl	8002402 <USART_Config_Reset>
	 serial.Port = USART1;
 80011fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001230 <Console_Init+0x44>)
 80011fe:	4a0d      	ldr	r2, [pc, #52]	@ (8001234 <Console_Init+0x48>)
 8001200:	601a      	str	r2, [r3, #0]
	 serial.baudrate = baudrate;
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	4a0a      	ldr	r2, [pc, #40]	@ (8001230 <Console_Init+0x44>)
 8001206:	6093      	str	r3, [r2, #8]
	 serial.mode = USART_Mode.Asynchronous;
 8001208:	2201      	movs	r2, #1
 800120a:	4b09      	ldr	r3, [pc, #36]	@ (8001230 <Console_Init+0x44>)
 800120c:	731a      	strb	r2, [r3, #12]
	 serial.stop_bits = Stop_Bits.Bit_1;
 800120e:	2300      	movs	r3, #0
 8001210:	b2da      	uxtb	r2, r3
 8001212:	4b07      	ldr	r3, [pc, #28]	@ (8001230 <Console_Init+0x44>)
 8001214:	751a      	strb	r2, [r3, #20]
	 serial.TX_Pin = USART1_TX_Pin.PB6;
 8001216:	2206      	movs	r2, #6
 8001218:	4b05      	ldr	r3, [pc, #20]	@ (8001230 <Console_Init+0x44>)
 800121a:	735a      	strb	r2, [r3, #13]
	 serial.RX_Pin = USART1_RX_Pin.PB7;
 800121c:	2207      	movs	r2, #7
 800121e:	4b04      	ldr	r3, [pc, #16]	@ (8001230 <Console_Init+0x44>)
 8001220:	739a      	strb	r2, [r3, #14]
	 USART_Init(&serial);
 8001222:	4803      	ldr	r0, [pc, #12]	@ (8001230 <Console_Init+0x44>)
 8001224:	f001 fe0c 	bl	8002e40 <USART_Init>


}
 8001228:	bf00      	nop
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	200001f8 	.word	0x200001f8
 8001234:	40011000 	.word	0x40011000

08001238 <printConsole>:

 void printConsole(char *msg, ...)
{
 8001238:	b40f      	push	{r0, r1, r2, r3}
 800123a:	b580      	push	{r7, lr}
 800123c:	f5ad 5d1c 	sub.w	sp, sp, #9984	@ 0x2700
 8001240:	b086      	sub	sp, #24
 8001242:	af00      	add	r7, sp, #0

char buff[10000];
//	#ifdef DEBUG_UART

	va_list args;
	va_start(args, msg);
 8001244:	f507 521c 	add.w	r2, r7, #9984	@ 0x2700
 8001248:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 800124c:	f507 63e3 	add.w	r3, r7, #1816	@ 0x718
 8001250:	f5a3 63e3 	sub.w	r3, r3, #1816	@ 0x718
 8001254:	601a      	str	r2, [r3, #0]
	vsprintf(buff, msg, args);
 8001256:	f507 63e3 	add.w	r3, r7, #1816	@ 0x718
 800125a:	f5a3 62e3 	sub.w	r2, r3, #1816	@ 0x718
 800125e:	f107 0318 	add.w	r3, r7, #24
 8001262:	3b14      	subs	r3, #20
 8001264:	6812      	ldr	r2, [r2, #0]
 8001266:	f507 511c 	add.w	r1, r7, #9984	@ 0x2700
 800126a:	f101 0120 	add.w	r1, r1, #32
 800126e:	6809      	ldr	r1, [r1, #0]
 8001270:	4618      	mov	r0, r3
 8001272:	f002 fc09 	bl	8003a88 <vsiprintf>

	for(int i = 0; i<= strlen(buff)-1; i++)
 8001276:	2300      	movs	r3, #0
 8001278:	f507 521c 	add.w	r2, r7, #9984	@ 0x2700
 800127c:	f102 0214 	add.w	r2, r2, #20
 8001280:	6013      	str	r3, [r2, #0]
 8001282:	e020      	b.n	80012c6 <printConsole+0x8e>
	{
		serial.Port -> DR = buff[i];
 8001284:	f507 63e3 	add.w	r3, r7, #1816	@ 0x718
 8001288:	f2a3 7214 	subw	r2, r3, #1812	@ 0x714
 800128c:	f507 531c 	add.w	r3, r7, #9984	@ 0x2700
 8001290:	f103 0314 	add.w	r3, r3, #20
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4413      	add	r3, r2
 8001298:	781a      	ldrb	r2, [r3, #0]
 800129a:	4b17      	ldr	r3, [pc, #92]	@ (80012f8 <printConsole+0xc0>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	605a      	str	r2, [r3, #4]
		while (!(serial.Port -> SR & USART_SR_TXE));
 80012a0:	bf00      	nop
 80012a2:	4b15      	ldr	r3, [pc, #84]	@ (80012f8 <printConsole+0xc0>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d0f8      	beq.n	80012a2 <printConsole+0x6a>
	for(int i = 0; i<= strlen(buff)-1; i++)
 80012b0:	f507 531c 	add.w	r3, r7, #9984	@ 0x2700
 80012b4:	f103 0314 	add.w	r3, r3, #20
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	3301      	adds	r3, #1
 80012bc:	f507 521c 	add.w	r2, r7, #9984	@ 0x2700
 80012c0:	f102 0214 	add.w	r2, r2, #20
 80012c4:	6013      	str	r3, [r2, #0]
 80012c6:	f107 0318 	add.w	r3, r7, #24
 80012ca:	3b14      	subs	r3, #20
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7fe ffdf 	bl	8000290 <strlen>
 80012d2:	4603      	mov	r3, r0
 80012d4:	1e5a      	subs	r2, r3, #1
 80012d6:	f507 531c 	add.w	r3, r7, #9984	@ 0x2700
 80012da:	f103 0314 	add.w	r3, r3, #20
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	429a      	cmp	r2, r3
 80012e2:	d2cf      	bcs.n	8001284 <printConsole+0x4c>
	}
}
 80012e4:	bf00      	nop
 80012e6:	bf00      	nop
 80012e8:	f507 571c 	add.w	r7, r7, #9984	@ 0x2700
 80012ec:	3718      	adds	r7, #24
 80012ee:	46bd      	mov	sp, r7
 80012f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80012f4:	b004      	add	sp, #16
 80012f6:	4770      	bx	lr
 80012f8:	200001f8 	.word	0x200001f8

080012fc <__NVIC_EnableIRQ>:
//    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
//  }
//}

__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130a:	2b00      	cmp	r3, #0
 800130c:	db0b      	blt.n	8001326 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800130e:	79fb      	ldrb	r3, [r7, #7]
 8001310:	f003 021f 	and.w	r2, r3, #31
 8001314:	4907      	ldr	r1, [pc, #28]	@ (8001334 <__NVIC_EnableIRQ+0x38>)
 8001316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131a:	095b      	lsrs	r3, r3, #5
 800131c:	2001      	movs	r0, #1
 800131e:	fa00 f202 	lsl.w	r2, r0, r2
 8001322:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001326:	bf00      	nop
 8001328:	370c      	adds	r7, #12
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	e000e100 	.word	0xe000e100

08001338 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	4603      	mov	r3, r0
 8001340:	6039      	str	r1, [r7, #0]
 8001342:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001344:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001348:	2b00      	cmp	r3, #0
 800134a:	db0a      	blt.n	8001362 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	b2da      	uxtb	r2, r3
 8001350:	490c      	ldr	r1, [pc, #48]	@ (8001384 <__NVIC_SetPriority+0x4c>)
 8001352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001356:	0112      	lsls	r2, r2, #4
 8001358:	b2d2      	uxtb	r2, r2
 800135a:	440b      	add	r3, r1
 800135c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001360:	e00a      	b.n	8001378 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	b2da      	uxtb	r2, r3
 8001366:	4908      	ldr	r1, [pc, #32]	@ (8001388 <__NVIC_SetPriority+0x50>)
 8001368:	79fb      	ldrb	r3, [r7, #7]
 800136a:	f003 030f 	and.w	r3, r3, #15
 800136e:	3b04      	subs	r3, #4
 8001370:	0112      	lsls	r2, r2, #4
 8001372:	b2d2      	uxtb	r2, r2
 8001374:	440b      	add	r3, r1
 8001376:	761a      	strb	r2, [r3, #24]
}
 8001378:	bf00      	nop
 800137a:	370c      	adds	r7, #12
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr
 8001384:	e000e100 	.word	0xe000e100
 8001388:	e000ed00 	.word	0xe000ed00

0800138c <GPIO_Interrupt_Setup>:
#include "GPIO.h"



void GPIO_Interrupt_Setup(int pin, int edge_select, uint32_t priority)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0
 8001392:	60f8      	str	r0, [r7, #12]
 8001394:	60b9      	str	r1, [r7, #8]
 8001396:	607a      	str	r2, [r7, #4]
	EXTI ->IMR |= 1 << pin;
 8001398:	4b4b      	ldr	r3, [pc, #300]	@ (80014c8 <GPIO_Interrupt_Setup+0x13c>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	2101      	movs	r1, #1
 800139e:	68fa      	ldr	r2, [r7, #12]
 80013a0:	fa01 f202 	lsl.w	r2, r1, r2
 80013a4:	4611      	mov	r1, r2
 80013a6:	4a48      	ldr	r2, [pc, #288]	@ (80014c8 <GPIO_Interrupt_Setup+0x13c>)
 80013a8:	430b      	orrs	r3, r1
 80013aa:	6013      	str	r3, [r2, #0]
	switch (edge_select) {
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	2b02      	cmp	r3, #2
 80013b0:	d01f      	beq.n	80013f2 <GPIO_Interrupt_Setup+0x66>
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	2b02      	cmp	r3, #2
 80013b6:	dc31      	bgt.n	800141c <GPIO_Interrupt_Setup+0x90>
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d003      	beq.n	80013c6 <GPIO_Interrupt_Setup+0x3a>
 80013be:	68bb      	ldr	r3, [r7, #8]
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d00b      	beq.n	80013dc <GPIO_Interrupt_Setup+0x50>
 80013c4:	e02a      	b.n	800141c <GPIO_Interrupt_Setup+0x90>
		case 0:
			EXTI ->RTSR |= 1 << pin;
 80013c6:	4b40      	ldr	r3, [pc, #256]	@ (80014c8 <GPIO_Interrupt_Setup+0x13c>)
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	2101      	movs	r1, #1
 80013cc:	68fa      	ldr	r2, [r7, #12]
 80013ce:	fa01 f202 	lsl.w	r2, r1, r2
 80013d2:	4611      	mov	r1, r2
 80013d4:	4a3c      	ldr	r2, [pc, #240]	@ (80014c8 <GPIO_Interrupt_Setup+0x13c>)
 80013d6:	430b      	orrs	r3, r1
 80013d8:	6093      	str	r3, [r2, #8]
			break;
 80013da:	e01f      	b.n	800141c <GPIO_Interrupt_Setup+0x90>
		case 1:
			EXTI ->FTSR |= 1 << pin;
 80013dc:	4b3a      	ldr	r3, [pc, #232]	@ (80014c8 <GPIO_Interrupt_Setup+0x13c>)
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	2101      	movs	r1, #1
 80013e2:	68fa      	ldr	r2, [r7, #12]
 80013e4:	fa01 f202 	lsl.w	r2, r1, r2
 80013e8:	4611      	mov	r1, r2
 80013ea:	4a37      	ldr	r2, [pc, #220]	@ (80014c8 <GPIO_Interrupt_Setup+0x13c>)
 80013ec:	430b      	orrs	r3, r1
 80013ee:	60d3      	str	r3, [r2, #12]
			break;
 80013f0:	e014      	b.n	800141c <GPIO_Interrupt_Setup+0x90>
		case 2:
			EXTI ->RTSR |= 1 << pin;
 80013f2:	4b35      	ldr	r3, [pc, #212]	@ (80014c8 <GPIO_Interrupt_Setup+0x13c>)
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	2101      	movs	r1, #1
 80013f8:	68fa      	ldr	r2, [r7, #12]
 80013fa:	fa01 f202 	lsl.w	r2, r1, r2
 80013fe:	4611      	mov	r1, r2
 8001400:	4a31      	ldr	r2, [pc, #196]	@ (80014c8 <GPIO_Interrupt_Setup+0x13c>)
 8001402:	430b      	orrs	r3, r1
 8001404:	6093      	str	r3, [r2, #8]
			EXTI ->FTSR |= 1 << pin;
 8001406:	4b30      	ldr	r3, [pc, #192]	@ (80014c8 <GPIO_Interrupt_Setup+0x13c>)
 8001408:	68db      	ldr	r3, [r3, #12]
 800140a:	2101      	movs	r1, #1
 800140c:	68fa      	ldr	r2, [r7, #12]
 800140e:	fa01 f202 	lsl.w	r2, r1, r2
 8001412:	4611      	mov	r1, r2
 8001414:	4a2c      	ldr	r2, [pc, #176]	@ (80014c8 <GPIO_Interrupt_Setup+0x13c>)
 8001416:	430b      	orrs	r3, r1
 8001418:	60d3      	str	r3, [r2, #12]
			break;
 800141a:	bf00      	nop
	}

	if(pin == 0)
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d107      	bne.n	8001432 <GPIO_Interrupt_Setup+0xa6>
	{
		NVIC_SetPriority(EXTI0_IRQn,priority);
 8001422:	6879      	ldr	r1, [r7, #4]
 8001424:	2006      	movs	r0, #6
 8001426:	f7ff ff87 	bl	8001338 <__NVIC_SetPriority>
		NVIC_EnableIRQ(EXTI0_IRQn);
 800142a:	2006      	movs	r0, #6
 800142c:	f7ff ff66 	bl	80012fc <__NVIC_EnableIRQ>
		NVIC_EnableIRQ(EXTI15_10_IRQn);
	}



}
 8001430:	e046      	b.n	80014c0 <GPIO_Interrupt_Setup+0x134>
	else if(pin == 1)
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	2b01      	cmp	r3, #1
 8001436:	d107      	bne.n	8001448 <GPIO_Interrupt_Setup+0xbc>
		NVIC_SetPriority(EXTI1_IRQn,priority);
 8001438:	6879      	ldr	r1, [r7, #4]
 800143a:	2007      	movs	r0, #7
 800143c:	f7ff ff7c 	bl	8001338 <__NVIC_SetPriority>
		NVIC_EnableIRQ(EXTI1_IRQn);
 8001440:	2007      	movs	r0, #7
 8001442:	f7ff ff5b 	bl	80012fc <__NVIC_EnableIRQ>
}
 8001446:	e03b      	b.n	80014c0 <GPIO_Interrupt_Setup+0x134>
	else if(pin == 2)
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	2b02      	cmp	r3, #2
 800144c:	d107      	bne.n	800145e <GPIO_Interrupt_Setup+0xd2>
		NVIC_SetPriority(EXTI2_IRQn,priority);
 800144e:	6879      	ldr	r1, [r7, #4]
 8001450:	2008      	movs	r0, #8
 8001452:	f7ff ff71 	bl	8001338 <__NVIC_SetPriority>
		NVIC_EnableIRQ(EXTI2_IRQn);
 8001456:	2008      	movs	r0, #8
 8001458:	f7ff ff50 	bl	80012fc <__NVIC_EnableIRQ>
}
 800145c:	e030      	b.n	80014c0 <GPIO_Interrupt_Setup+0x134>
	else if(pin == 3)
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	2b03      	cmp	r3, #3
 8001462:	d107      	bne.n	8001474 <GPIO_Interrupt_Setup+0xe8>
		NVIC_SetPriority(EXTI3_IRQn,priority);
 8001464:	6879      	ldr	r1, [r7, #4]
 8001466:	2009      	movs	r0, #9
 8001468:	f7ff ff66 	bl	8001338 <__NVIC_SetPriority>
		NVIC_EnableIRQ(EXTI3_IRQn);
 800146c:	2009      	movs	r0, #9
 800146e:	f7ff ff45 	bl	80012fc <__NVIC_EnableIRQ>
}
 8001472:	e025      	b.n	80014c0 <GPIO_Interrupt_Setup+0x134>
	else if(pin == 4)
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	2b04      	cmp	r3, #4
 8001478:	d107      	bne.n	800148a <GPIO_Interrupt_Setup+0xfe>
		NVIC_SetPriority(EXTI4_IRQn,priority);
 800147a:	6879      	ldr	r1, [r7, #4]
 800147c:	200a      	movs	r0, #10
 800147e:	f7ff ff5b 	bl	8001338 <__NVIC_SetPriority>
		NVIC_EnableIRQ(EXTI4_IRQn);
 8001482:	200a      	movs	r0, #10
 8001484:	f7ff ff3a 	bl	80012fc <__NVIC_EnableIRQ>
}
 8001488:	e01a      	b.n	80014c0 <GPIO_Interrupt_Setup+0x134>
	else if(pin >= 5 || pin <= 9)
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	2b04      	cmp	r3, #4
 800148e:	dc02      	bgt.n	8001496 <GPIO_Interrupt_Setup+0x10a>
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	2b09      	cmp	r3, #9
 8001494:	dc07      	bgt.n	80014a6 <GPIO_Interrupt_Setup+0x11a>
		NVIC_SetPriority(EXTI9_5_IRQn,priority);
 8001496:	6879      	ldr	r1, [r7, #4]
 8001498:	2017      	movs	r0, #23
 800149a:	f7ff ff4d 	bl	8001338 <__NVIC_SetPriority>
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 800149e:	2017      	movs	r0, #23
 80014a0:	f7ff ff2c 	bl	80012fc <__NVIC_EnableIRQ>
}
 80014a4:	e00c      	b.n	80014c0 <GPIO_Interrupt_Setup+0x134>
	else if(pin >= 10 || pin <= 15)
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	2b09      	cmp	r3, #9
 80014aa:	dc02      	bgt.n	80014b2 <GPIO_Interrupt_Setup+0x126>
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	2b0f      	cmp	r3, #15
 80014b0:	dc06      	bgt.n	80014c0 <GPIO_Interrupt_Setup+0x134>
		NVIC_SetPriority(EXTI15_10_IRQn,priority);
 80014b2:	6879      	ldr	r1, [r7, #4]
 80014b4:	2028      	movs	r0, #40	@ 0x28
 80014b6:	f7ff ff3f 	bl	8001338 <__NVIC_SetPriority>
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 80014ba:	2028      	movs	r0, #40	@ 0x28
 80014bc:	f7ff ff1e 	bl	80012fc <__NVIC_EnableIRQ>
}
 80014c0:	bf00      	nop
 80014c2:	3710      	adds	r7, #16
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	40013c00 	.word	0x40013c00

080014cc <GPIO_Clock_Enable>:

	return 1;
}

int GPIO_Clock_Enable(GPIO_TypeDef *PORT)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
	if(PORT == GPIOA)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	4a25      	ldr	r2, [pc, #148]	@ (800156c <GPIO_Clock_Enable+0xa0>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d106      	bne.n	80014ea <GPIO_Clock_Enable+0x1e>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOAEN;
 80014dc:	4b24      	ldr	r3, [pc, #144]	@ (8001570 <GPIO_Clock_Enable+0xa4>)
 80014de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e0:	4a23      	ldr	r2, [pc, #140]	@ (8001570 <GPIO_Clock_Enable+0xa4>)
 80014e2:	f043 0301 	orr.w	r3, r3, #1
 80014e6:	6313      	str	r3, [r2, #48]	@ 0x30
 80014e8:	e039      	b.n	800155e <GPIO_Clock_Enable+0x92>
	} else 	if(PORT == GPIOB)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4a21      	ldr	r2, [pc, #132]	@ (8001574 <GPIO_Clock_Enable+0xa8>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d106      	bne.n	8001500 <GPIO_Clock_Enable+0x34>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOBEN;
 80014f2:	4b1f      	ldr	r3, [pc, #124]	@ (8001570 <GPIO_Clock_Enable+0xa4>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f6:	4a1e      	ldr	r2, [pc, #120]	@ (8001570 <GPIO_Clock_Enable+0xa4>)
 80014f8:	f043 0302 	orr.w	r3, r3, #2
 80014fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80014fe:	e02e      	b.n	800155e <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOC)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	4a1d      	ldr	r2, [pc, #116]	@ (8001578 <GPIO_Clock_Enable+0xac>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d106      	bne.n	8001516 <GPIO_Clock_Enable+0x4a>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOCEN;
 8001508:	4b19      	ldr	r3, [pc, #100]	@ (8001570 <GPIO_Clock_Enable+0xa4>)
 800150a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800150c:	4a18      	ldr	r2, [pc, #96]	@ (8001570 <GPIO_Clock_Enable+0xa4>)
 800150e:	f043 0304 	orr.w	r3, r3, #4
 8001512:	6313      	str	r3, [r2, #48]	@ 0x30
 8001514:	e023      	b.n	800155e <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOD)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4a18      	ldr	r2, [pc, #96]	@ (800157c <GPIO_Clock_Enable+0xb0>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d106      	bne.n	800152c <GPIO_Clock_Enable+0x60>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIODEN;
 800151e:	4b14      	ldr	r3, [pc, #80]	@ (8001570 <GPIO_Clock_Enable+0xa4>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001522:	4a13      	ldr	r2, [pc, #76]	@ (8001570 <GPIO_Clock_Enable+0xa4>)
 8001524:	f043 0308 	orr.w	r3, r3, #8
 8001528:	6313      	str	r3, [r2, #48]	@ 0x30
 800152a:	e018      	b.n	800155e <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOE)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	4a14      	ldr	r2, [pc, #80]	@ (8001580 <GPIO_Clock_Enable+0xb4>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d106      	bne.n	8001542 <GPIO_Clock_Enable+0x76>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOEEN;
 8001534:	4b0e      	ldr	r3, [pc, #56]	@ (8001570 <GPIO_Clock_Enable+0xa4>)
 8001536:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001538:	4a0d      	ldr	r2, [pc, #52]	@ (8001570 <GPIO_Clock_Enable+0xa4>)
 800153a:	f043 0310 	orr.w	r3, r3, #16
 800153e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001540:	e00d      	b.n	800155e <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOH)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4a0f      	ldr	r2, [pc, #60]	@ (8001584 <GPIO_Clock_Enable+0xb8>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d106      	bne.n	8001558 <GPIO_Clock_Enable+0x8c>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOHEN;
 800154a:	4b09      	ldr	r3, [pc, #36]	@ (8001570 <GPIO_Clock_Enable+0xa4>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800154e:	4a08      	ldr	r2, [pc, #32]	@ (8001570 <GPIO_Clock_Enable+0xa4>)
 8001550:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001554:	6313      	str	r3, [r2, #48]	@ 0x30
 8001556:	e002      	b.n	800155e <GPIO_Clock_Enable+0x92>
	}else
	{
		return -1;
 8001558:	f04f 33ff 	mov.w	r3, #4294967295
 800155c:	e000      	b.n	8001560 <GPIO_Clock_Enable+0x94>
	}

	return 1;
 800155e:	2301      	movs	r3, #1
}
 8001560:	4618      	mov	r0, r3
 8001562:	370c      	adds	r7, #12
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr
 800156c:	40020000 	.word	0x40020000
 8001570:	40023800 	.word	0x40023800
 8001574:	40020400 	.word	0x40020400
 8001578:	40020800 	.word	0x40020800
 800157c:	40020c00 	.word	0x40020c00
 8001580:	40021000 	.word	0x40021000
 8001584:	40021c00 	.word	0x40021c00

08001588 <GPIO_Pin_Init>:


void GPIO_Pin_Init(GPIO_TypeDef *Port, uint8_t pin, uint8_t mode, uint8_t output_type, uint8_t speed, uint8_t pull, uint8_t alternate_function)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	4608      	mov	r0, r1
 8001592:	4611      	mov	r1, r2
 8001594:	461a      	mov	r2, r3
 8001596:	4603      	mov	r3, r0
 8001598:	70fb      	strb	r3, [r7, #3]
 800159a:	460b      	mov	r3, r1
 800159c:	70bb      	strb	r3, [r7, #2]
 800159e:	4613      	mov	r3, r2
 80015a0:	707b      	strb	r3, [r7, #1]
	GPIO_Clock_Enable(Port);
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f7ff ff92 	bl	80014cc <GPIO_Clock_Enable>
	Port -> MODER |= mode << (pin*2);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	78b9      	ldrb	r1, [r7, #2]
 80015ae:	78fa      	ldrb	r2, [r7, #3]
 80015b0:	0052      	lsls	r2, r2, #1
 80015b2:	fa01 f202 	lsl.w	r2, r1, r2
 80015b6:	431a      	orrs	r2, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	601a      	str	r2, [r3, #0]
	Port -> OTYPER |= output_type << pin;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	7879      	ldrb	r1, [r7, #1]
 80015c2:	78fa      	ldrb	r2, [r7, #3]
 80015c4:	fa01 f202 	lsl.w	r2, r1, r2
 80015c8:	431a      	orrs	r2, r3
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	605a      	str	r2, [r3, #4]
	Port -> OSPEEDR |= speed << (pin*2);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	7c39      	ldrb	r1, [r7, #16]
 80015d4:	78fa      	ldrb	r2, [r7, #3]
 80015d6:	0052      	lsls	r2, r2, #1
 80015d8:	fa01 f202 	lsl.w	r2, r1, r2
 80015dc:	431a      	orrs	r2, r3
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	609a      	str	r2, [r3, #8]
	Port -> PUPDR |= pull << (pin*2);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	68db      	ldr	r3, [r3, #12]
 80015e6:	7d39      	ldrb	r1, [r7, #20]
 80015e8:	78fa      	ldrb	r2, [r7, #3]
 80015ea:	0052      	lsls	r2, r2, #1
 80015ec:	fa01 f202 	lsl.w	r2, r1, r2
 80015f0:	431a      	orrs	r2, r3
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	60da      	str	r2, [r3, #12]
	if(pin < 8) Port -> AFR[0] |= alternate_function << (pin*4);
 80015f6:	78fb      	ldrb	r3, [r7, #3]
 80015f8:	2b07      	cmp	r3, #7
 80015fa:	d80a      	bhi.n	8001612 <GPIO_Pin_Init+0x8a>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6a1b      	ldr	r3, [r3, #32]
 8001600:	7e39      	ldrb	r1, [r7, #24]
 8001602:	78fa      	ldrb	r2, [r7, #3]
 8001604:	0092      	lsls	r2, r2, #2
 8001606:	fa01 f202 	lsl.w	r2, r1, r2
 800160a:	431a      	orrs	r2, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	621a      	str	r2, [r3, #32]
	else Port -> AFR[1] |= alternate_function << ((pin-8)*4);
}
 8001610:	e00a      	b.n	8001628 <GPIO_Pin_Init+0xa0>
	else Port -> AFR[1] |= alternate_function << ((pin-8)*4);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001616:	7e39      	ldrb	r1, [r7, #24]
 8001618:	78fa      	ldrb	r2, [r7, #3]
 800161a:	3a08      	subs	r2, #8
 800161c:	0092      	lsls	r2, r2, #2
 800161e:	fa01 f202 	lsl.w	r2, r1, r2
 8001622:	431a      	orrs	r2, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001628:	bf00      	nop
 800162a:	3708      	adds	r7, #8
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}

08001630 <pin_setup>:

DMA_Config xI2C_TX;
DMA_Config xI2C_RX;

static void pin_setup(I2C_Config *config)
{
 8001630:	b590      	push	{r4, r7, lr}
 8001632:	b087      	sub	sp, #28
 8001634:	af04      	add	r7, sp, #16
 8001636:	6078      	str	r0, [r7, #4]
	if(config->Port == I2C1)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a56      	ldr	r2, [pc, #344]	@ (8001798 <pin_setup+0x168>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d14e      	bne.n	80016e0 <pin_setup+0xb0>
	{
		if(config->SCL_Pin == I2C1_SCL_Pin.PB6) GPIO_Pin_Init(GPIOB, 6, MODE.Alternate_Function, Output_Type.Open_Drain, Speed.Very_High_Speed, Pull.Pull_Up, Alternate_Functions.I2C_1);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	7a1b      	ldrb	r3, [r3, #8]
 8001646:	221a      	movs	r2, #26
 8001648:	4293      	cmp	r3, r2
 800164a:	d10e      	bne.n	800166a <pin_setup+0x3a>
 800164c:	2002      	movs	r0, #2
 800164e:	2401      	movs	r4, #1
 8001650:	2303      	movs	r3, #3
 8001652:	2201      	movs	r2, #1
 8001654:	2104      	movs	r1, #4
 8001656:	9102      	str	r1, [sp, #8]
 8001658:	9201      	str	r2, [sp, #4]
 800165a:	9300      	str	r3, [sp, #0]
 800165c:	4623      	mov	r3, r4
 800165e:	4602      	mov	r2, r0
 8001660:	2106      	movs	r1, #6
 8001662:	484e      	ldr	r0, [pc, #312]	@ (800179c <pin_setup+0x16c>)
 8001664:	f7ff ff90 	bl	8001588 <GPIO_Pin_Init>
 8001668:	e012      	b.n	8001690 <pin_setup+0x60>
		else if(config->SCL_Pin == I2C1_SCL_Pin.PB8) GPIO_Pin_Init(GPIOB, 8, MODE.Alternate_Function, Output_Type.Open_Drain, Speed.Very_High_Speed, Pull.Pull_Up, Alternate_Functions.I2C_1);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	7a1b      	ldrb	r3, [r3, #8]
 800166e:	221c      	movs	r2, #28
 8001670:	4293      	cmp	r3, r2
 8001672:	d10d      	bne.n	8001690 <pin_setup+0x60>
 8001674:	2002      	movs	r0, #2
 8001676:	2401      	movs	r4, #1
 8001678:	2303      	movs	r3, #3
 800167a:	2201      	movs	r2, #1
 800167c:	2104      	movs	r1, #4
 800167e:	9102      	str	r1, [sp, #8]
 8001680:	9201      	str	r2, [sp, #4]
 8001682:	9300      	str	r3, [sp, #0]
 8001684:	4623      	mov	r3, r4
 8001686:	4602      	mov	r2, r0
 8001688:	2108      	movs	r1, #8
 800168a:	4844      	ldr	r0, [pc, #272]	@ (800179c <pin_setup+0x16c>)
 800168c:	f7ff ff7c 	bl	8001588 <GPIO_Pin_Init>

		if(config->SDA_Pin == I2C1_SDA_Pin.PB7) GPIO_Pin_Init(GPIOB, 7, MODE.Alternate_Function, Output_Type.Open_Drain, Speed.Very_High_Speed, Pull.Pull_Up, Alternate_Functions.I2C_1);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	7a5b      	ldrb	r3, [r3, #9]
 8001694:	221b      	movs	r2, #27
 8001696:	4293      	cmp	r3, r2
 8001698:	d10e      	bne.n	80016b8 <pin_setup+0x88>
 800169a:	2002      	movs	r0, #2
 800169c:	2401      	movs	r4, #1
 800169e:	2303      	movs	r3, #3
 80016a0:	2201      	movs	r2, #1
 80016a2:	2104      	movs	r1, #4
 80016a4:	9102      	str	r1, [sp, #8]
 80016a6:	9201      	str	r2, [sp, #4]
 80016a8:	9300      	str	r3, [sp, #0]
 80016aa:	4623      	mov	r3, r4
 80016ac:	4602      	mov	r2, r0
 80016ae:	2107      	movs	r1, #7
 80016b0:	483a      	ldr	r0, [pc, #232]	@ (800179c <pin_setup+0x16c>)
 80016b2:	f7ff ff69 	bl	8001588 <GPIO_Pin_Init>
	else if(config->Port == I2C3)
	{
		if(config->SCL_Pin == I2C3_SCL_Pin.PA8) GPIO_Pin_Init(GPIOA, 8, MODE.Alternate_Function, Output_Type.Open_Drain, Speed.Very_High_Speed, Pull.Pull_Up, Alternate_Functions.I2C_3);
		if(config->SDA_Pin == I2C3_SDA_Pin.PC9) GPIO_Pin_Init(GPIOC, 9, MODE.Alternate_Function, Output_Type.Open_Drain, Speed.Very_High_Speed, Pull.Pull_Up, Alternate_Functions.I2C_3);
	}
}
 80016b6:	e06a      	b.n	800178e <pin_setup+0x15e>
		else if(config->SDA_Pin == I2C1_SDA_Pin.PB9) GPIO_Pin_Init(GPIOB, 9, MODE.Alternate_Function, Output_Type.Open_Drain, Speed.Very_High_Speed, Pull.Pull_Up, Alternate_Functions.I2C_1);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	7a5b      	ldrb	r3, [r3, #9]
 80016bc:	221d      	movs	r2, #29
 80016be:	4293      	cmp	r3, r2
 80016c0:	d165      	bne.n	800178e <pin_setup+0x15e>
 80016c2:	2002      	movs	r0, #2
 80016c4:	2401      	movs	r4, #1
 80016c6:	2303      	movs	r3, #3
 80016c8:	2201      	movs	r2, #1
 80016ca:	2104      	movs	r1, #4
 80016cc:	9102      	str	r1, [sp, #8]
 80016ce:	9201      	str	r2, [sp, #4]
 80016d0:	9300      	str	r3, [sp, #0]
 80016d2:	4623      	mov	r3, r4
 80016d4:	4602      	mov	r2, r0
 80016d6:	2109      	movs	r1, #9
 80016d8:	4830      	ldr	r0, [pc, #192]	@ (800179c <pin_setup+0x16c>)
 80016da:	f7ff ff55 	bl	8001588 <GPIO_Pin_Init>
}
 80016de:	e056      	b.n	800178e <pin_setup+0x15e>
	else if(config->Port == I2C2)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a2e      	ldr	r2, [pc, #184]	@ (80017a0 <pin_setup+0x170>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d126      	bne.n	8001738 <pin_setup+0x108>
		if(config->SCL_Pin == I2C2_SCL_Pin.PB10) GPIO_Pin_Init(GPIOB, 10, MODE.Alternate_Function, Output_Type.Open_Drain, Speed.Very_High_Speed, Pull.Pull_Up, Alternate_Functions.I2C_2);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	7a1b      	ldrb	r3, [r3, #8]
 80016ee:	22d2      	movs	r2, #210	@ 0xd2
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d10d      	bne.n	8001710 <pin_setup+0xe0>
 80016f4:	2002      	movs	r0, #2
 80016f6:	2401      	movs	r4, #1
 80016f8:	2303      	movs	r3, #3
 80016fa:	2201      	movs	r2, #1
 80016fc:	2104      	movs	r1, #4
 80016fe:	9102      	str	r1, [sp, #8]
 8001700:	9201      	str	r2, [sp, #4]
 8001702:	9300      	str	r3, [sp, #0]
 8001704:	4623      	mov	r3, r4
 8001706:	4602      	mov	r2, r0
 8001708:	210a      	movs	r1, #10
 800170a:	4824      	ldr	r0, [pc, #144]	@ (800179c <pin_setup+0x16c>)
 800170c:	f7ff ff3c 	bl	8001588 <GPIO_Pin_Init>
		if(config->SDA_Pin == I2C2_SDA_Pin.PB11) GPIO_Pin_Init(GPIOB, 11, MODE.Alternate_Function, Output_Type.Open_Drain, Speed.Very_High_Speed, Pull.Pull_Up, Alternate_Functions.I2C_2);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	7a5b      	ldrb	r3, [r3, #9]
 8001714:	22d3      	movs	r2, #211	@ 0xd3
 8001716:	4293      	cmp	r3, r2
 8001718:	d139      	bne.n	800178e <pin_setup+0x15e>
 800171a:	2002      	movs	r0, #2
 800171c:	2401      	movs	r4, #1
 800171e:	2303      	movs	r3, #3
 8001720:	2201      	movs	r2, #1
 8001722:	2104      	movs	r1, #4
 8001724:	9102      	str	r1, [sp, #8]
 8001726:	9201      	str	r2, [sp, #4]
 8001728:	9300      	str	r3, [sp, #0]
 800172a:	4623      	mov	r3, r4
 800172c:	4602      	mov	r2, r0
 800172e:	210b      	movs	r1, #11
 8001730:	481a      	ldr	r0, [pc, #104]	@ (800179c <pin_setup+0x16c>)
 8001732:	f7ff ff29 	bl	8001588 <GPIO_Pin_Init>
}
 8001736:	e02a      	b.n	800178e <pin_setup+0x15e>
	else if(config->Port == I2C3)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a19      	ldr	r2, [pc, #100]	@ (80017a4 <pin_setup+0x174>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d125      	bne.n	800178e <pin_setup+0x15e>
		if(config->SCL_Pin == I2C3_SCL_Pin.PA8) GPIO_Pin_Init(GPIOA, 8, MODE.Alternate_Function, Output_Type.Open_Drain, Speed.Very_High_Speed, Pull.Pull_Up, Alternate_Functions.I2C_3);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	7a1b      	ldrb	r3, [r3, #8]
 8001746:	2212      	movs	r2, #18
 8001748:	4293      	cmp	r3, r2
 800174a:	d10d      	bne.n	8001768 <pin_setup+0x138>
 800174c:	2002      	movs	r0, #2
 800174e:	2401      	movs	r4, #1
 8001750:	2303      	movs	r3, #3
 8001752:	2201      	movs	r2, #1
 8001754:	2105      	movs	r1, #5
 8001756:	9102      	str	r1, [sp, #8]
 8001758:	9201      	str	r2, [sp, #4]
 800175a:	9300      	str	r3, [sp, #0]
 800175c:	4623      	mov	r3, r4
 800175e:	4602      	mov	r2, r0
 8001760:	2108      	movs	r1, #8
 8001762:	4811      	ldr	r0, [pc, #68]	@ (80017a8 <pin_setup+0x178>)
 8001764:	f7ff ff10 	bl	8001588 <GPIO_Pin_Init>
		if(config->SDA_Pin == I2C3_SDA_Pin.PC9) GPIO_Pin_Init(GPIOC, 9, MODE.Alternate_Function, Output_Type.Open_Drain, Speed.Very_High_Speed, Pull.Pull_Up, Alternate_Functions.I2C_3);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	7a5b      	ldrb	r3, [r3, #9]
 800176c:	2227      	movs	r2, #39	@ 0x27
 800176e:	4293      	cmp	r3, r2
 8001770:	d10d      	bne.n	800178e <pin_setup+0x15e>
 8001772:	2002      	movs	r0, #2
 8001774:	2401      	movs	r4, #1
 8001776:	2303      	movs	r3, #3
 8001778:	2201      	movs	r2, #1
 800177a:	2105      	movs	r1, #5
 800177c:	9102      	str	r1, [sp, #8]
 800177e:	9201      	str	r2, [sp, #4]
 8001780:	9300      	str	r3, [sp, #0]
 8001782:	4623      	mov	r3, r4
 8001784:	4602      	mov	r2, r0
 8001786:	2109      	movs	r1, #9
 8001788:	4808      	ldr	r0, [pc, #32]	@ (80017ac <pin_setup+0x17c>)
 800178a:	f7ff fefd 	bl	8001588 <GPIO_Pin_Init>
}
 800178e:	bf00      	nop
 8001790:	370c      	adds	r7, #12
 8001792:	46bd      	mov	sp, r7
 8001794:	bd90      	pop	{r4, r7, pc}
 8001796:	bf00      	nop
 8001798:	40005400 	.word	0x40005400
 800179c:	40020400 	.word	0x40020400
 80017a0:	40005800 	.word	0x40005800
 80017a4:	40005c00 	.word	0x40005c00
 80017a8:	40020000 	.word	0x40020000
 80017ac:	40020800 	.word	0x40020800

080017b0 <I2C_Clock_Enable>:

void I2C_Clock_Enable(I2C_Config *config)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
	if(config->Port == I2C1)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a13      	ldr	r2, [pc, #76]	@ (800180c <I2C_Clock_Enable+0x5c>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d106      	bne.n	80017d0 <I2C_Clock_Enable+0x20>
	{
		RCC -> APB1ENR |= RCC_APB1ENR_I2C1EN;
 80017c2:	4b13      	ldr	r3, [pc, #76]	@ (8001810 <I2C_Clock_Enable+0x60>)
 80017c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017c6:	4a12      	ldr	r2, [pc, #72]	@ (8001810 <I2C_Clock_Enable+0x60>)
 80017c8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80017cc:	6413      	str	r3, [r2, #64]	@ 0x40
	}
	else if(config->Port == I2C3)
	{
		RCC -> APB1ENR |= RCC_APB1ENR_I2C3EN;
	}
}
 80017ce:	e016      	b.n	80017fe <I2C_Clock_Enable+0x4e>
	else if(config->Port == I2C2)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a0f      	ldr	r2, [pc, #60]	@ (8001814 <I2C_Clock_Enable+0x64>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d106      	bne.n	80017e8 <I2C_Clock_Enable+0x38>
		RCC -> APB1ENR |= RCC_APB1ENR_I2C2EN;
 80017da:	4b0d      	ldr	r3, [pc, #52]	@ (8001810 <I2C_Clock_Enable+0x60>)
 80017dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017de:	4a0c      	ldr	r2, [pc, #48]	@ (8001810 <I2C_Clock_Enable+0x60>)
 80017e0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80017e4:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80017e6:	e00a      	b.n	80017fe <I2C_Clock_Enable+0x4e>
	else if(config->Port == I2C3)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a0a      	ldr	r2, [pc, #40]	@ (8001818 <I2C_Clock_Enable+0x68>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d105      	bne.n	80017fe <I2C_Clock_Enable+0x4e>
		RCC -> APB1ENR |= RCC_APB1ENR_I2C3EN;
 80017f2:	4b07      	ldr	r3, [pc, #28]	@ (8001810 <I2C_Clock_Enable+0x60>)
 80017f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017f6:	4a06      	ldr	r2, [pc, #24]	@ (8001810 <I2C_Clock_Enable+0x60>)
 80017f8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80017fc:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80017fe:	bf00      	nop
 8001800:	370c      	adds	r7, #12
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	40005400 	.word	0x40005400
 8001810:	40023800 	.word	0x40023800
 8001814:	40005800 	.word	0x40005800
 8001818:	40005c00 	.word	0x40005c00

0800181c <I2C_Reset>:
		RCC -> APB1ENR &= ~RCC_APB1ENR_I2C3EN;
	}
}

void I2C_Reset(I2C_Config *config)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
	config->speed = 100000;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	4a18      	ldr	r2, [pc, #96]	@ (8001888 <I2C_Reset+0x6c>)
 8001828:	605a      	str	r2, [r3, #4]
	config->interrupts = I2C_Interrupts.Disable;
 800182a:	2200      	movs	r2, #0
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	819a      	strh	r2, [r3, #12]
	config->mode = I2C_Mode.Master;
 8001830:	2200      	movs	r2, #0
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	729a      	strb	r2, [r3, #10]
	if(config->Port == I2C1)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a14      	ldr	r2, [pc, #80]	@ (800188c <I2C_Reset+0x70>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d106      	bne.n	800184e <I2C_Reset+0x32>
	{
		RCC -> APB1RSTR |= RCC_APB1RSTR_I2C1RST;
 8001840:	4b13      	ldr	r3, [pc, #76]	@ (8001890 <I2C_Reset+0x74>)
 8001842:	6a1b      	ldr	r3, [r3, #32]
 8001844:	4a12      	ldr	r2, [pc, #72]	@ (8001890 <I2C_Reset+0x74>)
 8001846:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800184a:	6213      	str	r3, [r2, #32]
	}
	else if(config->Port == I2C3)
	{
		RCC -> APB1RSTR |= RCC_APB1RSTR_I2C3RST;
	}
}
 800184c:	e016      	b.n	800187c <I2C_Reset+0x60>
	else if(config->Port == I2C2)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a10      	ldr	r2, [pc, #64]	@ (8001894 <I2C_Reset+0x78>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d106      	bne.n	8001866 <I2C_Reset+0x4a>
		RCC -> APB1RSTR |= RCC_APB1RSTR_I2C2RST;
 8001858:	4b0d      	ldr	r3, [pc, #52]	@ (8001890 <I2C_Reset+0x74>)
 800185a:	6a1b      	ldr	r3, [r3, #32]
 800185c:	4a0c      	ldr	r2, [pc, #48]	@ (8001890 <I2C_Reset+0x74>)
 800185e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001862:	6213      	str	r3, [r2, #32]
}
 8001864:	e00a      	b.n	800187c <I2C_Reset+0x60>
	else if(config->Port == I2C3)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a0b      	ldr	r2, [pc, #44]	@ (8001898 <I2C_Reset+0x7c>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d105      	bne.n	800187c <I2C_Reset+0x60>
		RCC -> APB1RSTR |= RCC_APB1RSTR_I2C3RST;
 8001870:	4b07      	ldr	r3, [pc, #28]	@ (8001890 <I2C_Reset+0x74>)
 8001872:	6a1b      	ldr	r3, [r3, #32]
 8001874:	4a06      	ldr	r2, [pc, #24]	@ (8001890 <I2C_Reset+0x74>)
 8001876:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800187a:	6213      	str	r3, [r2, #32]
}
 800187c:	bf00      	nop
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr
 8001888:	000186a0 	.word	0x000186a0
 800188c:	40005400 	.word	0x40005400
 8001890:	40023800 	.word	0x40023800
 8001894:	40005800 	.word	0x40005800
 8001898:	40005c00 	.word	0x40005c00

0800189c <I2C_Init>:


void I2C_Init(I2C_Config *config)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
	pin_setup(config);
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	f7ff fec3 	bl	8001630 <pin_setup>
	I2C_Clock_Enable(config);
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	f7ff ff80 	bl	80017b0 <I2C_Clock_Enable>

	config->Port -> CR1 &= ~I2C_CR1_PE;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f022 0201 	bic.w	r2, r2, #1
 80018be:	601a      	str	r2, [r3, #0]
	config->Port -> CR1 |= I2C_CR1_SWRST | I2C_CR1_NOSTRETCH;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	6812      	ldr	r2, [r2, #0]
 80018ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80018ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80018d2:	6013      	str	r3, [r2, #0]
	config->Port -> CR1 &= ~I2C_CR1_SWRST;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80018e2:	601a      	str	r2, [r3, #0]
	config->Port -> CR2 |= config->dma << I2C_CR2_DMAEN_Pos;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	6859      	ldr	r1, [r3, #4]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	89db      	ldrh	r3, [r3, #14]
 80018ee:	02da      	lsls	r2, r3, #11
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	430a      	orrs	r2, r1
 80018f6:	605a      	str	r2, [r3, #4]
	config->Port -> CR2 |= config->interrupts << I2C_CR2_ITERREN_Pos;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	6859      	ldr	r1, [r3, #4]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	899b      	ldrh	r3, [r3, #12]
 8001902:	021a      	lsls	r2, r3, #8
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	430a      	orrs	r2, r1
 800190a:	605a      	str	r2, [r3, #4]


	//CCR ==> [Tr + Tw]/(1/48000000)
	//TRISE ==> [Tr/(1/48000000)]

	if(config->speed == 400000)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	4a50      	ldr	r2, [pc, #320]	@ (8001a54 <I2C_Init+0x1b8>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d111      	bne.n	800193a <I2C_Init+0x9e>
	{
		config->Port -> CR2 |= 30; //42MHz
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	685a      	ldr	r2, [r3, #4]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f042 021e 	orr.w	r2, r2, #30
 8001924:	605a      	str	r2, [r3, #4]
		config->Port -> CCR = (1<<15) | (1<<14) | 5;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f24c 0205 	movw	r2, #49157	@ 0xc005
 800192e:	61da      	str	r2, [r3, #28]
		config->Port -> TRISE = 30;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	221e      	movs	r2, #30
 8001936:	621a      	str	r2, [r3, #32]
 8001938:	e00b      	b.n	8001952 <I2C_Init+0xb6>
	}
	else
	{
		config-> Port  -> CR2 = 25;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	2219      	movs	r2, #25
 8001940:	605a      	str	r2, [r3, #4]
		config->Port  -> CCR = 0x28;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	2228      	movs	r2, #40	@ 0x28
 8001948:	61da      	str	r2, [r3, #28]
		config->Port  -> TRISE = 0x8;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	2208      	movs	r2, #8
 8001950:	621a      	str	r2, [r3, #32]
	}



	if(config->dma == I2C_DMA.Enable)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	89db      	ldrh	r3, [r3, #14]
 8001956:	2201      	movs	r2, #1
 8001958:	4293      	cmp	r3, r2
 800195a:	d166      	bne.n	8001a2a <I2C_Init+0x18e>
	{
		if(config->Port == I2C1)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a3d      	ldr	r2, [pc, #244]	@ (8001a58 <I2C_Init+0x1bc>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d10c      	bne.n	8001980 <I2C_Init+0xe4>
		{
			xI2C_TX.channel = I2C_DMA_Stream.I2C1_DMA_Channel;
 8001966:	2201      	movs	r2, #1
 8001968:	4b3c      	ldr	r3, [pc, #240]	@ (8001a5c <I2C_Init+0x1c0>)
 800196a:	609a      	str	r2, [r3, #8]
			xI2C_RX.channel = I2C_DMA_Stream.I2C1_DMA_Channel;
 800196c:	2201      	movs	r2, #1
 800196e:	4b3c      	ldr	r3, [pc, #240]	@ (8001a60 <I2C_Init+0x1c4>)
 8001970:	609a      	str	r2, [r3, #8]
			xI2C_TX.stream = I2C_DMA_Stream.I2C1_TX;
 8001972:	4a3c      	ldr	r2, [pc, #240]	@ (8001a64 <I2C_Init+0x1c8>)
 8001974:	4b39      	ldr	r3, [pc, #228]	@ (8001a5c <I2C_Init+0x1c0>)
 8001976:	605a      	str	r2, [r3, #4]
			xI2C_RX.stream = I2C_DMA_Stream.I2C1_RX;
 8001978:	4a3b      	ldr	r2, [pc, #236]	@ (8001a68 <I2C_Init+0x1cc>)
 800197a:	4b39      	ldr	r3, [pc, #228]	@ (8001a60 <I2C_Init+0x1c4>)
 800197c:	605a      	str	r2, [r3, #4]
 800197e:	e022      	b.n	80019c6 <I2C_Init+0x12a>
		}
		else if(config->Port == I2C2)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a39      	ldr	r2, [pc, #228]	@ (8001a6c <I2C_Init+0x1d0>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d10c      	bne.n	80019a4 <I2C_Init+0x108>
		{
			xI2C_RX.channel = I2C_DMA_Stream.I2C2_DMA_Channel;
 800198a:	2202      	movs	r2, #2
 800198c:	4b34      	ldr	r3, [pc, #208]	@ (8001a60 <I2C_Init+0x1c4>)
 800198e:	609a      	str	r2, [r3, #8]
			xI2C_TX.channel = I2C_DMA_Stream.I2C2_DMA_Channel;
 8001990:	2202      	movs	r2, #2
 8001992:	4b32      	ldr	r3, [pc, #200]	@ (8001a5c <I2C_Init+0x1c0>)
 8001994:	609a      	str	r2, [r3, #8]
			xI2C_TX.stream = I2C_DMA_Stream.I2C2_TX;
 8001996:	4a36      	ldr	r2, [pc, #216]	@ (8001a70 <I2C_Init+0x1d4>)
 8001998:	4b30      	ldr	r3, [pc, #192]	@ (8001a5c <I2C_Init+0x1c0>)
 800199a:	605a      	str	r2, [r3, #4]
			xI2C_RX.stream = I2C_DMA_Stream.I2C2_RX;
 800199c:	4a35      	ldr	r2, [pc, #212]	@ (8001a74 <I2C_Init+0x1d8>)
 800199e:	4b30      	ldr	r3, [pc, #192]	@ (8001a60 <I2C_Init+0x1c4>)
 80019a0:	605a      	str	r2, [r3, #4]
 80019a2:	e010      	b.n	80019c6 <I2C_Init+0x12a>
		}
		else if(config->Port == I2C3)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a33      	ldr	r2, [pc, #204]	@ (8001a78 <I2C_Init+0x1dc>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d10b      	bne.n	80019c6 <I2C_Init+0x12a>
		{
			xI2C_RX.channel = I2C_DMA_Stream.I2C3_DMA_Channel;
 80019ae:	2203      	movs	r2, #3
 80019b0:	4b2b      	ldr	r3, [pc, #172]	@ (8001a60 <I2C_Init+0x1c4>)
 80019b2:	609a      	str	r2, [r3, #8]
			xI2C_TX.channel = I2C_DMA_Stream.I2C3_DMA_Channel;
 80019b4:	2203      	movs	r2, #3
 80019b6:	4b29      	ldr	r3, [pc, #164]	@ (8001a5c <I2C_Init+0x1c0>)
 80019b8:	609a      	str	r2, [r3, #8]
			xI2C_TX.stream = I2C_DMA_Stream.I2C3_TX;
 80019ba:	4a30      	ldr	r2, [pc, #192]	@ (8001a7c <I2C_Init+0x1e0>)
 80019bc:	4b27      	ldr	r3, [pc, #156]	@ (8001a5c <I2C_Init+0x1c0>)
 80019be:	605a      	str	r2, [r3, #4]
			xI2C_RX.stream = I2C_DMA_Stream.I2C3_RX;
 80019c0:	4a2c      	ldr	r2, [pc, #176]	@ (8001a74 <I2C_Init+0x1d8>)
 80019c2:	4b27      	ldr	r3, [pc, #156]	@ (8001a60 <I2C_Init+0x1c4>)
 80019c4:	605a      	str	r2, [r3, #4]
		}

		xI2C_TX.controller = DMA1;
 80019c6:	4b25      	ldr	r3, [pc, #148]	@ (8001a5c <I2C_Init+0x1c0>)
 80019c8:	4a2d      	ldr	r2, [pc, #180]	@ (8001a80 <I2C_Init+0x1e4>)
 80019ca:	601a      	str	r2, [r3, #0]

		xI2C_TX.circular_mode = DMA_Circular_Mode.Disable;
 80019cc:	2200      	movs	r2, #0
 80019ce:	4b23      	ldr	r3, [pc, #140]	@ (8001a5c <I2C_Init+0x1c0>)
 80019d0:	621a      	str	r2, [r3, #32]
		xI2C_TX.flow_control = DMA_Flow_Control.DMA_Control;
 80019d2:	2200      	movs	r2, #0
 80019d4:	4b21      	ldr	r3, [pc, #132]	@ (8001a5c <I2C_Init+0x1c0>)
 80019d6:	60da      	str	r2, [r3, #12]
		xI2C_TX.interrupts = DMA_Interrupts.Disable;
 80019d8:	2200      	movs	r2, #0
 80019da:	4b20      	ldr	r3, [pc, #128]	@ (8001a5c <I2C_Init+0x1c0>)
 80019dc:	625a      	str	r2, [r3, #36]	@ 0x24
		xI2C_TX.memory_data_size = DMA_Memory_Data_Size.byte;
 80019de:	2200      	movs	r2, #0
 80019e0:	4b1e      	ldr	r3, [pc, #120]	@ (8001a5c <I2C_Init+0x1c0>)
 80019e2:	61da      	str	r2, [r3, #28]
		xI2C_TX.peripheral_data_size = DMA_Peripheral_Data_Size.byte;
 80019e4:	2200      	movs	r2, #0
 80019e6:	4b1d      	ldr	r3, [pc, #116]	@ (8001a5c <I2C_Init+0x1c0>)
 80019e8:	619a      	str	r2, [r3, #24]
		xI2C_TX.priority_level = DMA_Priority_Level.Very_high;
 80019ea:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80019ee:	4b1b      	ldr	r3, [pc, #108]	@ (8001a5c <I2C_Init+0x1c0>)
 80019f0:	615a      	str	r2, [r3, #20]
		xI2C_TX.transfer_direction = DMA_Transfer_Direction.Memory_to_peripheral;
 80019f2:	2240      	movs	r2, #64	@ 0x40
 80019f4:	4b19      	ldr	r3, [pc, #100]	@ (8001a5c <I2C_Init+0x1c0>)
 80019f6:	611a      	str	r2, [r3, #16]

		xI2C_RX.controller = DMA1;
 80019f8:	4b19      	ldr	r3, [pc, #100]	@ (8001a60 <I2C_Init+0x1c4>)
 80019fa:	4a21      	ldr	r2, [pc, #132]	@ (8001a80 <I2C_Init+0x1e4>)
 80019fc:	601a      	str	r2, [r3, #0]
		xI2C_RX.circular_mode = DMA_Circular_Mode.Disable;
 80019fe:	2200      	movs	r2, #0
 8001a00:	4b17      	ldr	r3, [pc, #92]	@ (8001a60 <I2C_Init+0x1c4>)
 8001a02:	621a      	str	r2, [r3, #32]
		xI2C_RX.flow_control = DMA_Flow_Control.DMA_Control;
 8001a04:	2200      	movs	r2, #0
 8001a06:	4b16      	ldr	r3, [pc, #88]	@ (8001a60 <I2C_Init+0x1c4>)
 8001a08:	60da      	str	r2, [r3, #12]
		xI2C_RX.interrupts = DMA_Interrupts.Disable;
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	4b14      	ldr	r3, [pc, #80]	@ (8001a60 <I2C_Init+0x1c4>)
 8001a0e:	625a      	str	r2, [r3, #36]	@ 0x24
		xI2C_RX.memory_data_size = DMA_Memory_Data_Size.byte;
 8001a10:	2200      	movs	r2, #0
 8001a12:	4b13      	ldr	r3, [pc, #76]	@ (8001a60 <I2C_Init+0x1c4>)
 8001a14:	61da      	str	r2, [r3, #28]
		xI2C_RX.peripheral_data_size = DMA_Peripheral_Data_Size.byte;
 8001a16:	2200      	movs	r2, #0
 8001a18:	4b11      	ldr	r3, [pc, #68]	@ (8001a60 <I2C_Init+0x1c4>)
 8001a1a:	619a      	str	r2, [r3, #24]
		xI2C_RX.priority_level = DMA_Priority_Level.Very_high;
 8001a1c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001a20:	4b0f      	ldr	r3, [pc, #60]	@ (8001a60 <I2C_Init+0x1c4>)
 8001a22:	615a      	str	r2, [r3, #20]
		xI2C_RX.transfer_direction = DMA_Transfer_Direction.Peripheral_to_memory;
 8001a24:	2200      	movs	r2, #0
 8001a26:	4b0e      	ldr	r3, [pc, #56]	@ (8001a60 <I2C_Init+0x1c4>)
 8001a28:	611a      	str	r2, [r3, #16]
	}

	config -> Port -> CR1 |= I2C_CR1_NOSTRETCH;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001a38:	601a      	str	r2, [r3, #0]
	config -> Port -> CR1 |= I2C_CR1_PE;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f042 0201 	orr.w	r2, r2, #1
 8001a48:	601a      	str	r2, [r3, #0]
}
 8001a4a:	bf00      	nop
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	00061a80 	.word	0x00061a80
 8001a58:	40005400 	.word	0x40005400
 8001a5c:	20000210 	.word	0x20000210
 8001a60:	20000244 	.word	0x20000244
 8001a64:	400260a0 	.word	0x400260a0
 8001a68:	40026088 	.word	0x40026088
 8001a6c:	40005800 	.word	0x40005800
 8001a70:	400260b8 	.word	0x400260b8
 8001a74:	40026040 	.word	0x40026040
 8001a78:	40005c00 	.word	0x40005c00
 8001a7c:	40026070 	.word	0x40026070
 8001a80:	40026000 	.word	0x40026000

08001a84 <I2C_Master_Start>:

void I2C_Master_Start(I2C_Config *config)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b085      	sub	sp, #20
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
	int time_out = 1000;
 8001a8c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a90:	60fb      	str	r3, [r7, #12]
	config -> Port -> CR1 |= I2C_CR1_START;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001aa0:	601a      	str	r2, [r3, #0]
	config -> Port -> CR1 |= I2C_CR1_START;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001ab0:	601a      	str	r2, [r3, #0]
	while( !(config -> Port -> SR1 & I2C_SR1_SB))
 8001ab2:	e005      	b.n	8001ac0 <I2C_Master_Start+0x3c>
	{
		if(time_out == 0)
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d00a      	beq.n	8001ad0 <I2C_Master_Start+0x4c>
		{
			return -1;
		}
		time_out--;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	3b01      	subs	r3, #1
 8001abe:	60fb      	str	r3, [r7, #12]
	while( !(config -> Port -> SR1 & I2C_SR1_SB))
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	695b      	ldr	r3, [r3, #20]
 8001ac6:	f003 0301 	and.w	r3, r3, #1
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d0f2      	beq.n	8001ab4 <I2C_Master_Start+0x30>
	}
	return 0;
 8001ace:	e000      	b.n	8001ad2 <I2C_Master_Start+0x4e>
			return -1;
 8001ad0:	bf00      	nop
}
 8001ad2:	3714      	adds	r7, #20
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <I2C_Master_Address>:

void I2C_Master_Address(I2C_Config *config, uint8_t address, uint8_t read_write)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b085      	sub	sp, #20
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	70fb      	strb	r3, [r7, #3]
 8001ae8:	4613      	mov	r3, r2
 8001aea:	70bb      	strb	r3, [r7, #2]
	volatile int temp;
	config -> Port -> DR = address << 1  | read_write;
 8001aec:	78fb      	ldrb	r3, [r7, #3]
 8001aee:	005a      	lsls	r2, r3, #1
 8001af0:	78bb      	ldrb	r3, [r7, #2]
 8001af2:	431a      	orrs	r2, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	611a      	str	r2, [r3, #16]
	while((config -> Port -> SR1 & 2) == 0){}
 8001afa:	bf00      	nop
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	695b      	ldr	r3, [r3, #20]
 8001b02:	f003 0302 	and.w	r3, r3, #2
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d0f8      	beq.n	8001afc <I2C_Master_Address+0x20>
	while((config -> Port -> SR1 & 2))
 8001b0a:	e00e      	b.n	8001b2a <I2C_Master_Address+0x4e>
	{
		temp = config -> Port -> SR1;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	695b      	ldr	r3, [r3, #20]
 8001b12:	60fb      	str	r3, [r7, #12]
		temp = config -> Port -> SR2;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	699b      	ldr	r3, [r3, #24]
 8001b1a:	60fb      	str	r3, [r7, #12]
		if((config -> Port -> SR1 & 2) == 0)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	695b      	ldr	r3, [r3, #20]
 8001b22:	f003 0302 	and.w	r3, r3, #2
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d007      	beq.n	8001b3a <I2C_Master_Address+0x5e>
	while((config -> Port -> SR1 & 2))
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	695b      	ldr	r3, [r3, #20]
 8001b30:	f003 0302 	and.w	r3, r3, #2
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d1e9      	bne.n	8001b0c <I2C_Master_Address+0x30>
		{
			break;
		}
	}
}
 8001b38:	e000      	b.n	8001b3c <I2C_Master_Address+0x60>
			break;
 8001b3a:	bf00      	nop
}
 8001b3c:	bf00      	nop
 8001b3e:	3714      	adds	r7, #20
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr

08001b48 <I2C_Master_Send_Byte>:

void I2C_Master_Send_Byte(I2C_Config *config, uint8_t data)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	460b      	mov	r3, r1
 8001b52:	70fb      	strb	r3, [r7, #3]
	while((config -> Port-> SR1 & 0x80) == 0){}
 8001b54:	bf00      	nop
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	695b      	ldr	r3, [r3, #20]
 8001b5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d0f8      	beq.n	8001b56 <I2C_Master_Send_Byte+0xe>
	config -> Port -> DR = data;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	78fa      	ldrb	r2, [r7, #3]
 8001b6a:	611a      	str	r2, [r3, #16]
	while((config -> Port -> SR1 & 0x80) == 0){}
 8001b6c:	bf00      	nop
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	695b      	ldr	r3, [r3, #20]
 8001b74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d0f8      	beq.n	8001b6e <I2C_Master_Send_Byte+0x26>
}
 8001b7c:	bf00      	nop
 8001b7e:	bf00      	nop
 8001b80:	370c      	adds	r7, #12
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr

08001b8a <I2C_Master_Stop>:
{
	config -> Port -> CR1 |= I2C_CR1_ACK;
}

void I2C_Master_Stop(I2C_Config *config)
{
 8001b8a:	b480      	push	{r7}
 8001b8c:	b083      	sub	sp, #12
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	6078      	str	r0, [r7, #4]
	config -> Port -> CR1 |= I2C_CR1_STOP;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ba0:	601a      	str	r2, [r3, #0]
}
 8001ba2:	bf00      	nop
 8001ba4:	370c      	adds	r7, #12
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr

08001bae <I2C_Master_Write_Register>:

void I2C_Master_Write_Register(I2C_Config *config, uint8_t device_address, uint8_t reg_address, uint8_t data)
{
 8001bae:	b580      	push	{r7, lr}
 8001bb0:	b082      	sub	sp, #8
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	6078      	str	r0, [r7, #4]
 8001bb6:	4608      	mov	r0, r1
 8001bb8:	4611      	mov	r1, r2
 8001bba:	461a      	mov	r2, r3
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	70fb      	strb	r3, [r7, #3]
 8001bc0:	460b      	mov	r3, r1
 8001bc2:	70bb      	strb	r3, [r7, #2]
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	707b      	strb	r3, [r7, #1]
	I2C_Master_Start(config);
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f7ff ff5b 	bl	8001a84 <I2C_Master_Start>
	I2C_Master_Address(config, device_address,0);
 8001bce:	78fb      	ldrb	r3, [r7, #3]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	f7ff ff81 	bl	8001adc <I2C_Master_Address>
	I2C_Master_Send_Byte(config, reg_address);
 8001bda:	78bb      	ldrb	r3, [r7, #2]
 8001bdc:	4619      	mov	r1, r3
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f7ff ffb2 	bl	8001b48 <I2C_Master_Send_Byte>
	I2C_Master_Send_Byte(config, data);
 8001be4:	787b      	ldrb	r3, [r7, #1]
 8001be6:	4619      	mov	r1, r3
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f7ff ffad 	bl	8001b48 <I2C_Master_Send_Byte>
	I2C_Master_Stop(config);
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f7ff ffcb 	bl	8001b8a <I2C_Master_Stop>
}
 8001bf4:	bf00      	nop
 8001bf6:	3708      	adds	r7, #8
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}

08001bfc <I2C_Master_Read_Register>:

int I2C_Master_Read_Register(I2C_Config *config, uint8_t device_address, uint8_t reg_address)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b084      	sub	sp, #16
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	460b      	mov	r3, r1
 8001c06:	70fb      	strb	r3, [r7, #3]
 8001c08:	4613      	mov	r3, r2
 8001c0a:	70bb      	strb	r3, [r7, #2]
	volatile int temp;
	I2C_Master_Start(config);
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f7ff ff39 	bl	8001a84 <I2C_Master_Start>
	I2C_Master_Address(config, device_address, 0);
 8001c12:	78fb      	ldrb	r3, [r7, #3]
 8001c14:	2200      	movs	r2, #0
 8001c16:	4619      	mov	r1, r3
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	f7ff ff5f 	bl	8001adc <I2C_Master_Address>
	I2C_Master_Send_Byte(config, reg_address);
 8001c1e:	78bb      	ldrb	r3, [r7, #2]
 8001c20:	4619      	mov	r1, r3
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f7ff ff90 	bl	8001b48 <I2C_Master_Send_Byte>
	I2C_Master_Stop(config);
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f7ff ffae 	bl	8001b8a <I2C_Master_Stop>
	I2C_Master_Start(config);
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f7ff ff28 	bl	8001a84 <I2C_Master_Start>
	I2C_Master_Address(config, device_address, 1);
 8001c34:	78fb      	ldrb	r3, [r7, #3]
 8001c36:	2201      	movs	r2, #1
 8001c38:	4619      	mov	r1, r3
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f7ff ff4e 	bl	8001adc <I2C_Master_Address>
	temp = I2C_Master_Receive_Byte(config);
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	f000 f80a 	bl	8001c5a <I2C_Master_Receive_Byte>
 8001c46:	4603      	mov	r3, r0
 8001c48:	60fb      	str	r3, [r7, #12]
	I2C_Master_Stop(config);
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f7ff ff9d 	bl	8001b8a <I2C_Master_Stop>
	return temp;
 8001c50:	68fb      	ldr	r3, [r7, #12]
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3710      	adds	r7, #16
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <I2C_Master_Receive_Byte>:

int I2C_Master_Receive_Byte(I2C_Config *config)
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	b085      	sub	sp, #20
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
	volatile int temp;
	config -> Port -> CR1 |= I2C_CR1_ACK;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001c70:	601a      	str	r2, [r3, #0]
	while((config -> Port -> SR1 & I2C_SR1_RXNE) == 0){}
 8001c72:	bf00      	nop
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	695b      	ldr	r3, [r3, #20]
 8001c7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d0f8      	beq.n	8001c74 <I2C_Master_Receive_Byte+0x1a>
	temp = config -> Port -> DR;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	691b      	ldr	r3, [r3, #16]
 8001c88:	60fb      	str	r3, [r7, #12]
	config -> Port -> CR1 &= ~I2C_CR1_ACK;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001c98:	601a      	str	r2, [r3, #0]
	return temp;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3714      	adds	r7, #20
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr

08001ca8 <__NVIC_SetPriority>:
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	4603      	mov	r3, r0
 8001cb0:	6039      	str	r1, [r7, #0]
 8001cb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	db0a      	blt.n	8001cd2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	b2da      	uxtb	r2, r3
 8001cc0:	490c      	ldr	r1, [pc, #48]	@ (8001cf4 <__NVIC_SetPriority+0x4c>)
 8001cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc6:	0112      	lsls	r2, r2, #4
 8001cc8:	b2d2      	uxtb	r2, r2
 8001cca:	440b      	add	r3, r1
 8001ccc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001cd0:	e00a      	b.n	8001ce8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	b2da      	uxtb	r2, r3
 8001cd6:	4908      	ldr	r1, [pc, #32]	@ (8001cf8 <__NVIC_SetPriority+0x50>)
 8001cd8:	79fb      	ldrb	r3, [r7, #7]
 8001cda:	f003 030f 	and.w	r3, r3, #15
 8001cde:	3b04      	subs	r3, #4
 8001ce0:	0112      	lsls	r2, r2, #4
 8001ce2:	b2d2      	uxtb	r2, r2
 8001ce4:	440b      	add	r3, r1
 8001ce6:	761a      	strb	r2, [r3, #24]
}
 8001ce8:	bf00      	nop
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr
 8001cf4:	e000e100 	.word	0xe000e100
 8001cf8:	e000ed00 	.word	0xe000ed00

08001cfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	3b01      	subs	r3, #1
 8001d08:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d0c:	d301      	bcc.n	8001d12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e00f      	b.n	8001d32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d12:	4a0a      	ldr	r2, [pc, #40]	@ (8001d3c <SysTick_Config+0x40>)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	3b01      	subs	r3, #1
 8001d18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d1a:	210f      	movs	r1, #15
 8001d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d20:	f7ff ffc2 	bl	8001ca8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d24:	4b05      	ldr	r3, [pc, #20]	@ (8001d3c <SysTick_Config+0x40>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d2a:	4b04      	ldr	r3, [pc, #16]	@ (8001d3c <SysTick_Config+0x40>)
 8001d2c:	2207      	movs	r2, #7
 8001d2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d30:	2300      	movs	r3, #0
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3708      	adds	r7, #8
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	e000e010 	.word	0xe000e010

08001d40 <MCU_Clock_Setup>:
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
	uint8_t pll_m = 4;
 8001d46:	2304      	movs	r3, #4
 8001d48:	71fb      	strb	r3, [r7, #7]
	uint8_t pll_n = 168; //192
 8001d4a:	23a8      	movs	r3, #168	@ 0xa8
 8001d4c:	71bb      	strb	r3, [r7, #6]
	uint8_t pll_p = 0;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	717b      	strb	r3, [r7, #5]
	uint8_t pll_q = 7;
 8001d52:	2307      	movs	r3, #7
 8001d54:	713b      	strb	r3, [r7, #4]
	RCC->PLLCFGR = 0x00000000;
 8001d56:	4b3d      	ldr	r3, [pc, #244]	@ (8001e4c <MCU_Clock_Setup+0x10c>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	605a      	str	r2, [r3, #4]
	RCC -> CR |= RCC_CR_HSEON;
 8001d5c:	4b3b      	ldr	r3, [pc, #236]	@ (8001e4c <MCU_Clock_Setup+0x10c>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a3a      	ldr	r2, [pc, #232]	@ (8001e4c <MCU_Clock_Setup+0x10c>)
 8001d62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d66:	6013      	str	r3, [r2, #0]
	while(!(RCC -> CR & RCC_CR_HSERDY)){}
 8001d68:	bf00      	nop
 8001d6a:	4b38      	ldr	r3, [pc, #224]	@ (8001e4c <MCU_Clock_Setup+0x10c>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d0f9      	beq.n	8001d6a <MCU_Clock_Setup+0x2a>
	RCC -> APB1ENR |= RCC_APB1ENR_PWREN;
 8001d76:	4b35      	ldr	r3, [pc, #212]	@ (8001e4c <MCU_Clock_Setup+0x10c>)
 8001d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d7a:	4a34      	ldr	r2, [pc, #208]	@ (8001e4c <MCU_Clock_Setup+0x10c>)
 8001d7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d80:	6413      	str	r3, [r2, #64]	@ 0x40
	PWR ->CR |= PWR_CR_VOS;
 8001d82:	4b33      	ldr	r3, [pc, #204]	@ (8001e50 <MCU_Clock_Setup+0x110>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a32      	ldr	r2, [pc, #200]	@ (8001e50 <MCU_Clock_Setup+0x110>)
 8001d88:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d8c:	6013      	str	r3, [r2, #0]
	FLASH -> ACR |= FLASH_ACR_ICEN | FLASH_ACR_PRFTEN | FLASH_ACR_DCEN | FLASH_ACR_LATENCY_5WS;
 8001d8e:	4b31      	ldr	r3, [pc, #196]	@ (8001e54 <MCU_Clock_Setup+0x114>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a30      	ldr	r2, [pc, #192]	@ (8001e54 <MCU_Clock_Setup+0x114>)
 8001d94:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001d98:	f043 0305 	orr.w	r3, r3, #5
 8001d9c:	6013      	str	r3, [r2, #0]
	RCC->PLLCFGR |= (pll_q << 24) | (pll_p << 16) | (pll_n << 6) | (pll_m << 0);
 8001d9e:	4b2b      	ldr	r3, [pc, #172]	@ (8001e4c <MCU_Clock_Setup+0x10c>)
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	793a      	ldrb	r2, [r7, #4]
 8001da4:	0611      	lsls	r1, r2, #24
 8001da6:	797a      	ldrb	r2, [r7, #5]
 8001da8:	0412      	lsls	r2, r2, #16
 8001daa:	4311      	orrs	r1, r2
 8001dac:	79ba      	ldrb	r2, [r7, #6]
 8001dae:	0192      	lsls	r2, r2, #6
 8001db0:	4311      	orrs	r1, r2
 8001db2:	79fa      	ldrb	r2, [r7, #7]
 8001db4:	430a      	orrs	r2, r1
 8001db6:	4611      	mov	r1, r2
 8001db8:	4a24      	ldr	r2, [pc, #144]	@ (8001e4c <MCU_Clock_Setup+0x10c>)
 8001dba:	430b      	orrs	r3, r1
 8001dbc:	6053      	str	r3, [r2, #4]
	RCC ->PLLCFGR |= 1 << 22;
 8001dbe:	4b23      	ldr	r3, [pc, #140]	@ (8001e4c <MCU_Clock_Setup+0x10c>)
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	4a22      	ldr	r2, [pc, #136]	@ (8001e4c <MCU_Clock_Setup+0x10c>)
 8001dc4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001dc8:	6053      	str	r3, [r2, #4]
	RCC -> CFGR |= RCC_CFGR_HPRE_DIV1;
 8001dca:	4b20      	ldr	r3, [pc, #128]	@ (8001e4c <MCU_Clock_Setup+0x10c>)
 8001dcc:	4a1f      	ldr	r2, [pc, #124]	@ (8001e4c <MCU_Clock_Setup+0x10c>)
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= RCC_CFGR_PPRE1_DIV4;
 8001dd2:	4b1e      	ldr	r3, [pc, #120]	@ (8001e4c <MCU_Clock_Setup+0x10c>)
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	4a1d      	ldr	r2, [pc, #116]	@ (8001e4c <MCU_Clock_Setup+0x10c>)
 8001dd8:	f443 53a0 	orr.w	r3, r3, #5120	@ 0x1400
 8001ddc:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= RCC_CFGR_PPRE2_DIV2;
 8001dde:	4b1b      	ldr	r3, [pc, #108]	@ (8001e4c <MCU_Clock_Setup+0x10c>)
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	4a1a      	ldr	r2, [pc, #104]	@ (8001e4c <MCU_Clock_Setup+0x10c>)
 8001de4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001de8:	6093      	str	r3, [r2, #8]
	RCC -> CR |= RCC_CR_PLLON;
 8001dea:	4b18      	ldr	r3, [pc, #96]	@ (8001e4c <MCU_Clock_Setup+0x10c>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a17      	ldr	r2, [pc, #92]	@ (8001e4c <MCU_Clock_Setup+0x10c>)
 8001df0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001df4:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_PLLRDY)){}
 8001df6:	bf00      	nop
 8001df8:	4b14      	ldr	r3, [pc, #80]	@ (8001e4c <MCU_Clock_Setup+0x10c>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d0f9      	beq.n	8001df8 <MCU_Clock_Setup+0xb8>
	RCC -> CFGR |= RCC_CFGR_SW_PLL;
 8001e04:	4b11      	ldr	r3, [pc, #68]	@ (8001e4c <MCU_Clock_Setup+0x10c>)
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	4a10      	ldr	r2, [pc, #64]	@ (8001e4c <MCU_Clock_Setup+0x10c>)
 8001e0a:	f043 0302 	orr.w	r3, r3, #2
 8001e0e:	6093      	str	r3, [r2, #8]
	while((RCC -> CFGR & RCC_CFGR_SWS_PLL) != RCC_CFGR_SWS_PLL);
 8001e10:	bf00      	nop
 8001e12:	4b0e      	ldr	r3, [pc, #56]	@ (8001e4c <MCU_Clock_Setup+0x10c>)
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	f003 0308 	and.w	r3, r3, #8
 8001e1a:	2b08      	cmp	r3, #8
 8001e1c:	d1f9      	bne.n	8001e12 <MCU_Clock_Setup+0xd2>
	SystemCoreClockUpdate();
 8001e1e:	f000 fa21 	bl	8002264 <SystemCoreClockUpdate>
	SysTick_Config(SystemCoreClock/168);
 8001e22:	4b0d      	ldr	r3, [pc, #52]	@ (8001e58 <MCU_Clock_Setup+0x118>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	08db      	lsrs	r3, r3, #3
 8001e28:	4a0c      	ldr	r2, [pc, #48]	@ (8001e5c <MCU_Clock_Setup+0x11c>)
 8001e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e2e:	085b      	lsrs	r3, r3, #1
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7ff ff63 	bl	8001cfc <SysTick_Config>
	RCC -> APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8001e36:	4b05      	ldr	r3, [pc, #20]	@ (8001e4c <MCU_Clock_Setup+0x10c>)
 8001e38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e3a:	4a04      	ldr	r2, [pc, #16]	@ (8001e4c <MCU_Clock_Setup+0x10c>)
 8001e3c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e40:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8001e42:	bf00      	nop
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	40023800 	.word	0x40023800
 8001e50:	40007000 	.word	0x40007000
 8001e54:	40023c00 	.word	0x40023c00
 8001e58:	20000000 	.word	0x20000000
 8001e5c:	18618619 	.word	0x18618619

08001e60 <Delay_Config>:
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
	SysTick->CTRL = 0;
 8001e64:	4b09      	ldr	r3, [pc, #36]	@ (8001e8c <Delay_Config+0x2c>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0x00FFFFFF;
 8001e6a:	4b08      	ldr	r3, [pc, #32]	@ (8001e8c <Delay_Config+0x2c>)
 8001e6c:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 8001e70:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 8001e72:	4b06      	ldr	r3, [pc, #24]	@ (8001e8c <Delay_Config+0x2c>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = 5;
 8001e78:	4b04      	ldr	r3, [pc, #16]	@ (8001e8c <Delay_Config+0x2c>)
 8001e7a:	2205      	movs	r2, #5
 8001e7c:	601a      	str	r2, [r3, #0]
	return (0UL);                                                     /* Function successful */
 8001e7e:	2300      	movs	r3, #0
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	e000e010 	.word	0xe000e010

08001e90 <EXTI0_IRQHandler>:

void LED_Init();
void LED_Brightness_Update(int brightness);

void EXTI0_IRQHandler(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
		APDS9930_Get_Lux(&ALSensor);
 8001e94:	482d      	ldr	r0, [pc, #180]	@ (8001f4c <EXTI0_IRQHandler+0xbc>)
 8001e96:	f7ff f8d7 	bl	8001048 <APDS9930_Get_Lux>
		EXTI->PR |= EXTI_PR_PR0;
 8001e9a:	4b2d      	ldr	r3, [pc, #180]	@ (8001f50 <EXTI0_IRQHandler+0xc0>)
 8001e9c:	695b      	ldr	r3, [r3, #20]
 8001e9e:	4a2c      	ldr	r2, [pc, #176]	@ (8001f50 <EXTI0_IRQHandler+0xc0>)
 8001ea0:	f043 0301 	orr.w	r3, r3, #1
 8001ea4:	6153      	str	r3, [r2, #20]
		APDS9930_Proximity_Interrupt_Clear(&ALSensor);
 8001ea6:	4829      	ldr	r0, [pc, #164]	@ (8001f4c <EXTI0_IRQHandler+0xbc>)
 8001ea8:	f7fe ffac 	bl	8000e04 <APDS9930_Proximity_Interrupt_Clear>
		flag = 1;
 8001eac:	4b29      	ldr	r3, [pc, #164]	@ (8001f54 <EXTI0_IRQHandler+0xc4>)
 8001eae:	2201      	movs	r2, #1
 8001eb0:	601a      	str	r2, [r3, #0]
		if(ALSensor.Lux_Data < 10)
 8001eb2:	4b26      	ldr	r3, [pc, #152]	@ (8001f4c <EXTI0_IRQHandler+0xbc>)
 8001eb4:	edd3 7a07 	vldr	s15, [r3, #28]
 8001eb8:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001ebc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ec0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ec4:	d506      	bpl.n	8001ed4 <EXTI0_IRQHandler+0x44>
		{
			Brightness = 0;
 8001ec6:	4b24      	ldr	r3, [pc, #144]	@ (8001f58 <EXTI0_IRQHandler+0xc8>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	601a      	str	r2, [r3, #0]
			LED_Brightness_Update(0);
 8001ecc:	2000      	movs	r0, #0
 8001ece:	f000 f8e1 	bl	8002094 <LED_Brightness_Update>
		{
			Brightness = 100;
			LED_Brightness_Update(100);
		}

}
 8001ed2:	e038      	b.n	8001f46 <EXTI0_IRQHandler+0xb6>
		else if(ALSensor.Lux_Data < 279)
 8001ed4:	4b1d      	ldr	r3, [pc, #116]	@ (8001f4c <EXTI0_IRQHandler+0xbc>)
 8001ed6:	edd3 7a07 	vldr	s15, [r3, #28]
 8001eda:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8001f5c <EXTI0_IRQHandler+0xcc>
 8001ede:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ee2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ee6:	d506      	bpl.n	8001ef6 <EXTI0_IRQHandler+0x66>
			Brightness = 25;
 8001ee8:	4b1b      	ldr	r3, [pc, #108]	@ (8001f58 <EXTI0_IRQHandler+0xc8>)
 8001eea:	2219      	movs	r2, #25
 8001eec:	601a      	str	r2, [r3, #0]
			LED_Brightness_Update(25);
 8001eee:	2019      	movs	r0, #25
 8001ef0:	f000 f8d0 	bl	8002094 <LED_Brightness_Update>
}
 8001ef4:	e027      	b.n	8001f46 <EXTI0_IRQHandler+0xb6>
		else if(ALSensor.Lux_Data < 540)
 8001ef6:	4b15      	ldr	r3, [pc, #84]	@ (8001f4c <EXTI0_IRQHandler+0xbc>)
 8001ef8:	edd3 7a07 	vldr	s15, [r3, #28]
 8001efc:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8001f60 <EXTI0_IRQHandler+0xd0>
 8001f00:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f08:	d506      	bpl.n	8001f18 <EXTI0_IRQHandler+0x88>
			Brightness = 50;
 8001f0a:	4b13      	ldr	r3, [pc, #76]	@ (8001f58 <EXTI0_IRQHandler+0xc8>)
 8001f0c:	2232      	movs	r2, #50	@ 0x32
 8001f0e:	601a      	str	r2, [r3, #0]
			LED_Brightness_Update(50);
 8001f10:	2032      	movs	r0, #50	@ 0x32
 8001f12:	f000 f8bf 	bl	8002094 <LED_Brightness_Update>
}
 8001f16:	e016      	b.n	8001f46 <EXTI0_IRQHandler+0xb6>
		else if( ALSensor.Lux_Data < 880)
 8001f18:	4b0c      	ldr	r3, [pc, #48]	@ (8001f4c <EXTI0_IRQHandler+0xbc>)
 8001f1a:	edd3 7a07 	vldr	s15, [r3, #28]
 8001f1e:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8001f64 <EXTI0_IRQHandler+0xd4>
 8001f22:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f2a:	d506      	bpl.n	8001f3a <EXTI0_IRQHandler+0xaa>
			Brightness = 75;
 8001f2c:	4b0a      	ldr	r3, [pc, #40]	@ (8001f58 <EXTI0_IRQHandler+0xc8>)
 8001f2e:	224b      	movs	r2, #75	@ 0x4b
 8001f30:	601a      	str	r2, [r3, #0]
			LED_Brightness_Update(75);
 8001f32:	204b      	movs	r0, #75	@ 0x4b
 8001f34:	f000 f8ae 	bl	8002094 <LED_Brightness_Update>
}
 8001f38:	e005      	b.n	8001f46 <EXTI0_IRQHandler+0xb6>
			Brightness = 100;
 8001f3a:	4b07      	ldr	r3, [pc, #28]	@ (8001f58 <EXTI0_IRQHandler+0xc8>)
 8001f3c:	2264      	movs	r2, #100	@ 0x64
 8001f3e:	601a      	str	r2, [r3, #0]
			LED_Brightness_Update(100);
 8001f40:	2064      	movs	r0, #100	@ 0x64
 8001f42:	f000 f8a7 	bl	8002094 <LED_Brightness_Update>
}
 8001f46:	bf00      	nop
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	20000278 	.word	0x20000278
 8001f50:	40013c00 	.word	0x40013c00
 8001f54:	200002a0 	.word	0x200002a0
 8001f58:	2000029c 	.word	0x2000029c
 8001f5c:	438b8000 	.word	0x438b8000
 8001f60:	44070000 	.word	0x44070000
 8001f64:	445c0000 	.word	0x445c0000

08001f68 <main>:

int main(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af02      	add	r7, sp, #8

	MCU_Clock_Setup();
 8001f6e:	f7ff fee7 	bl	8001d40 <MCU_Clock_Setup>
	Delay_Config();
 8001f72:	f7ff ff75 	bl	8001e60 <Delay_Config>
	Console_Init(USART1, 256000);
 8001f76:	f44f 317a 	mov.w	r1, #256000	@ 0x3e800
 8001f7a:	4819      	ldr	r0, [pc, #100]	@ (8001fe0 <main+0x78>)
 8001f7c:	f7ff f936 	bl	80011ec <Console_Init>

	APDS9930_DeInit(&ALSensor);
 8001f80:	4818      	ldr	r0, [pc, #96]	@ (8001fe4 <main+0x7c>)
 8001f82:	f7fe ff59 	bl	8000e38 <APDS9930_DeInit>

	ALSensor.Port = I2C1;
 8001f86:	4b17      	ldr	r3, [pc, #92]	@ (8001fe4 <main+0x7c>)
 8001f88:	4a17      	ldr	r2, [pc, #92]	@ (8001fe8 <main+0x80>)
 8001f8a:	601a      	str	r2, [r3, #0]
	ALSensor.SCL_Pin = I2C1_SCL_Pin.PB8;
 8001f8c:	221c      	movs	r2, #28
 8001f8e:	4b15      	ldr	r3, [pc, #84]	@ (8001fe4 <main+0x7c>)
 8001f90:	715a      	strb	r2, [r3, #5]
	ALSensor.SDA_Pin = I2C1_SDA_Pin.PB9;
 8001f92:	221d      	movs	r2, #29
 8001f94:	4b13      	ldr	r3, [pc, #76]	@ (8001fe4 <main+0x7c>)
 8001f96:	711a      	strb	r2, [r3, #4]
	ALSensor.Interrupt_Port = GPIOA;
 8001f98:	4b12      	ldr	r3, [pc, #72]	@ (8001fe4 <main+0x7c>)
 8001f9a:	4a14      	ldr	r2, [pc, #80]	@ (8001fec <main+0x84>)
 8001f9c:	609a      	str	r2, [r3, #8]
	ALSensor.Interrupt_Pin = 0;
 8001f9e:	4b11      	ldr	r3, [pc, #68]	@ (8001fe4 <main+0x7c>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	731a      	strb	r2, [r3, #12]
	ALSensor.Proximity_Interrupt_Enable = true;
 8001fa4:	4b0f      	ldr	r3, [pc, #60]	@ (8001fe4 <main+0x7c>)
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	735a      	strb	r2, [r3, #13]
	APDS9930_Init(&ALSensor);
 8001faa:	480e      	ldr	r0, [pc, #56]	@ (8001fe4 <main+0x7c>)
 8001fac:	f7fe ff6a 	bl	8000e84 <APDS9930_Init>
	LED_Init();
 8001fb0:	f000 f824 	bl	8001ffc <LED_Init>

    /* Loop forever */
	for(;;)
	{

		if(flag == 1)
 8001fb4:	4b0e      	ldr	r3, [pc, #56]	@ (8001ff0 <main+0x88>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d1fb      	bne.n	8001fb4 <main+0x4c>
		{
			printConsole("LUX Level = %f, Brightness = %d \r\n",ALSensor.Lux_Data,Brightness);
 8001fbc:	4b09      	ldr	r3, [pc, #36]	@ (8001fe4 <main+0x7c>)
 8001fbe:	69db      	ldr	r3, [r3, #28]
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7fe fad1 	bl	8000568 <__aeabi_f2d>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	460b      	mov	r3, r1
 8001fca:	490a      	ldr	r1, [pc, #40]	@ (8001ff4 <main+0x8c>)
 8001fcc:	6809      	ldr	r1, [r1, #0]
 8001fce:	9100      	str	r1, [sp, #0]
 8001fd0:	4809      	ldr	r0, [pc, #36]	@ (8001ff8 <main+0x90>)
 8001fd2:	f7ff f931 	bl	8001238 <printConsole>
			flag = 0;
 8001fd6:	4b06      	ldr	r3, [pc, #24]	@ (8001ff0 <main+0x88>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	601a      	str	r2, [r3, #0]
		if(flag == 1)
 8001fdc:	e7ea      	b.n	8001fb4 <main+0x4c>
 8001fde:	bf00      	nop
 8001fe0:	40011000 	.word	0x40011000
 8001fe4:	20000278 	.word	0x20000278
 8001fe8:	40005400 	.word	0x40005400
 8001fec:	40020000 	.word	0x40020000
 8001ff0:	200002a0 	.word	0x200002a0
 8001ff4:	2000029c 	.word	0x2000029c
 8001ff8:	08005d40 	.word	0x08005d40

08001ffc <LED_Init>:
	}

}

void LED_Init()
{
 8001ffc:	b590      	push	{r4, r7, lr}
 8001ffe:	b085      	sub	sp, #20
 8002000:	af04      	add	r7, sp, #16

	GPIO_Pin_Init(GPIOD, 12, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.Pull_Up, Alternate_Functions.TIM_4);
 8002002:	2002      	movs	r0, #2
 8002004:	2400      	movs	r4, #0
 8002006:	2303      	movs	r3, #3
 8002008:	2201      	movs	r2, #1
 800200a:	2102      	movs	r1, #2
 800200c:	9102      	str	r1, [sp, #8]
 800200e:	9201      	str	r2, [sp, #4]
 8002010:	9300      	str	r3, [sp, #0]
 8002012:	4623      	mov	r3, r4
 8002014:	4602      	mov	r2, r0
 8002016:	210c      	movs	r1, #12
 8002018:	481b      	ldr	r0, [pc, #108]	@ (8002088 <LED_Init+0x8c>)
 800201a:	f7ff fab5 	bl	8001588 <GPIO_Pin_Init>
	RCC -> APB1ENR |= RCC_APB1ENR_TIM4EN;
 800201e:	4b1b      	ldr	r3, [pc, #108]	@ (800208c <LED_Init+0x90>)
 8002020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002022:	4a1a      	ldr	r2, [pc, #104]	@ (800208c <LED_Init+0x90>)
 8002024:	f043 0304 	orr.w	r3, r3, #4
 8002028:	6413      	str	r3, [r2, #64]	@ 0x40
	TIM4 -> ARR = 100;
 800202a:	4b19      	ldr	r3, [pc, #100]	@ (8002090 <LED_Init+0x94>)
 800202c:	2264      	movs	r2, #100	@ 0x64
 800202e:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM4 -> CCR1 = Nominal_Brightness;
 8002030:	4b17      	ldr	r3, [pc, #92]	@ (8002090 <LED_Init+0x94>)
 8002032:	2232      	movs	r2, #50	@ 0x32
 8002034:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM4 -> CCMR1 |= TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_2|TIM_CCMR1_OC1PE;
 8002036:	4b16      	ldr	r3, [pc, #88]	@ (8002090 <LED_Init+0x94>)
 8002038:	699b      	ldr	r3, [r3, #24]
 800203a:	4a15      	ldr	r2, [pc, #84]	@ (8002090 <LED_Init+0x94>)
 800203c:	f043 0368 	orr.w	r3, r3, #104	@ 0x68
 8002040:	6193      	str	r3, [r2, #24]
	TIM4 -> BDTR |= TIM_BDTR_MOE;
 8002042:	4b13      	ldr	r3, [pc, #76]	@ (8002090 <LED_Init+0x94>)
 8002044:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002046:	4a12      	ldr	r2, [pc, #72]	@ (8002090 <LED_Init+0x94>)
 8002048:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800204c:	6453      	str	r3, [r2, #68]	@ 0x44
	TIM4 -> CCER |= TIM_CCER_CC1E;
 800204e:	4b10      	ldr	r3, [pc, #64]	@ (8002090 <LED_Init+0x94>)
 8002050:	6a1b      	ldr	r3, [r3, #32]
 8002052:	4a0f      	ldr	r2, [pc, #60]	@ (8002090 <LED_Init+0x94>)
 8002054:	f043 0301 	orr.w	r3, r3, #1
 8002058:	6213      	str	r3, [r2, #32]
	TIM4 -> CR1 |= TIM_CR1_ARPE;
 800205a:	4b0d      	ldr	r3, [pc, #52]	@ (8002090 <LED_Init+0x94>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a0c      	ldr	r2, [pc, #48]	@ (8002090 <LED_Init+0x94>)
 8002060:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002064:	6013      	str	r3, [r2, #0]
	TIM4 -> EGR |= TIM_EGR_UG;
 8002066:	4b0a      	ldr	r3, [pc, #40]	@ (8002090 <LED_Init+0x94>)
 8002068:	695b      	ldr	r3, [r3, #20]
 800206a:	4a09      	ldr	r2, [pc, #36]	@ (8002090 <LED_Init+0x94>)
 800206c:	f043 0301 	orr.w	r3, r3, #1
 8002070:	6153      	str	r3, [r2, #20]
	TIM4 -> CR1 |= TIM_CR1_CEN;
 8002072:	4b07      	ldr	r3, [pc, #28]	@ (8002090 <LED_Init+0x94>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a06      	ldr	r2, [pc, #24]	@ (8002090 <LED_Init+0x94>)
 8002078:	f043 0301 	orr.w	r3, r3, #1
 800207c:	6013      	str	r3, [r2, #0]
}
 800207e:	bf00      	nop
 8002080:	3704      	adds	r7, #4
 8002082:	46bd      	mov	sp, r7
 8002084:	bd90      	pop	{r4, r7, pc}
 8002086:	bf00      	nop
 8002088:	40020c00 	.word	0x40020c00
 800208c:	40023800 	.word	0x40023800
 8002090:	40000800 	.word	0x40000800

08002094 <LED_Brightness_Update>:

void LED_Brightness_Update(int brightness)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
	TIM4 -> CCR1 = brightness;
 800209c:	4a04      	ldr	r2, [pc, #16]	@ (80020b0 <LED_Brightness_Update+0x1c>)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6353      	str	r3, [r2, #52]	@ 0x34
}
 80020a2:	bf00      	nop
 80020a4:	370c      	adds	r7, #12
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	40000800 	.word	0x40000800

080020b4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
  return 1;
 80020b8:	2301      	movs	r3, #1
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <_kill>:

int _kill(int pid, int sig)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80020ce:	f001 fd37 	bl	8003b40 <__errno>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2216      	movs	r2, #22
 80020d6:	601a      	str	r2, [r3, #0]
  return -1;
 80020d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3708      	adds	r7, #8
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}

080020e4 <_exit>:

void _exit (int status)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80020ec:	f04f 31ff 	mov.w	r1, #4294967295
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f7ff ffe7 	bl	80020c4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80020f6:	bf00      	nop
 80020f8:	e7fd      	b.n	80020f6 <_exit+0x12>

080020fa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020fa:	b580      	push	{r7, lr}
 80020fc:	b086      	sub	sp, #24
 80020fe:	af00      	add	r7, sp, #0
 8002100:	60f8      	str	r0, [r7, #12]
 8002102:	60b9      	str	r1, [r7, #8]
 8002104:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002106:	2300      	movs	r3, #0
 8002108:	617b      	str	r3, [r7, #20]
 800210a:	e00a      	b.n	8002122 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800210c:	f3af 8000 	nop.w
 8002110:	4601      	mov	r1, r0
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	1c5a      	adds	r2, r3, #1
 8002116:	60ba      	str	r2, [r7, #8]
 8002118:	b2ca      	uxtb	r2, r1
 800211a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	3301      	adds	r3, #1
 8002120:	617b      	str	r3, [r7, #20]
 8002122:	697a      	ldr	r2, [r7, #20]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	429a      	cmp	r2, r3
 8002128:	dbf0      	blt.n	800210c <_read+0x12>
  }

  return len;
 800212a:	687b      	ldr	r3, [r7, #4]
}
 800212c:	4618      	mov	r0, r3
 800212e:	3718      	adds	r7, #24
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}

08002134 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b086      	sub	sp, #24
 8002138:	af00      	add	r7, sp, #0
 800213a:	60f8      	str	r0, [r7, #12]
 800213c:	60b9      	str	r1, [r7, #8]
 800213e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002140:	2300      	movs	r3, #0
 8002142:	617b      	str	r3, [r7, #20]
 8002144:	e009      	b.n	800215a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	1c5a      	adds	r2, r3, #1
 800214a:	60ba      	str	r2, [r7, #8]
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	4618      	mov	r0, r3
 8002150:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	3301      	adds	r3, #1
 8002158:	617b      	str	r3, [r7, #20]
 800215a:	697a      	ldr	r2, [r7, #20]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	429a      	cmp	r2, r3
 8002160:	dbf1      	blt.n	8002146 <_write+0x12>
  }
  return len;
 8002162:	687b      	ldr	r3, [r7, #4]
}
 8002164:	4618      	mov	r0, r3
 8002166:	3718      	adds	r7, #24
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}

0800216c <_close>:

int _close(int file)
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002174:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002178:	4618      	mov	r0, r3
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002194:	605a      	str	r2, [r3, #4]
  return 0;
 8002196:	2300      	movs	r3, #0
}
 8002198:	4618      	mov	r0, r3
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr

080021a4 <_isatty>:

int _isatty(int file)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80021ac:	2301      	movs	r3, #1
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr

080021ba <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021ba:	b480      	push	{r7}
 80021bc:	b085      	sub	sp, #20
 80021be:	af00      	add	r7, sp, #0
 80021c0:	60f8      	str	r0, [r7, #12]
 80021c2:	60b9      	str	r1, [r7, #8]
 80021c4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80021c6:	2300      	movs	r3, #0
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3714      	adds	r7, #20
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr

080021d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b086      	sub	sp, #24
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021dc:	4a14      	ldr	r2, [pc, #80]	@ (8002230 <_sbrk+0x5c>)
 80021de:	4b15      	ldr	r3, [pc, #84]	@ (8002234 <_sbrk+0x60>)
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021e8:	4b13      	ldr	r3, [pc, #76]	@ (8002238 <_sbrk+0x64>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d102      	bne.n	80021f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021f0:	4b11      	ldr	r3, [pc, #68]	@ (8002238 <_sbrk+0x64>)
 80021f2:	4a12      	ldr	r2, [pc, #72]	@ (800223c <_sbrk+0x68>)
 80021f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021f6:	4b10      	ldr	r3, [pc, #64]	@ (8002238 <_sbrk+0x64>)
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4413      	add	r3, r2
 80021fe:	693a      	ldr	r2, [r7, #16]
 8002200:	429a      	cmp	r2, r3
 8002202:	d207      	bcs.n	8002214 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002204:	f001 fc9c 	bl	8003b40 <__errno>
 8002208:	4603      	mov	r3, r0
 800220a:	220c      	movs	r2, #12
 800220c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800220e:	f04f 33ff 	mov.w	r3, #4294967295
 8002212:	e009      	b.n	8002228 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002214:	4b08      	ldr	r3, [pc, #32]	@ (8002238 <_sbrk+0x64>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800221a:	4b07      	ldr	r3, [pc, #28]	@ (8002238 <_sbrk+0x64>)
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4413      	add	r3, r2
 8002222:	4a05      	ldr	r2, [pc, #20]	@ (8002238 <_sbrk+0x64>)
 8002224:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002226:	68fb      	ldr	r3, [r7, #12]
}
 8002228:	4618      	mov	r0, r3
 800222a:	3718      	adds	r7, #24
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	20020000 	.word	0x20020000
 8002234:	00000400 	.word	0x00000400
 8002238:	200002a4 	.word	0x200002a4
 800223c:	200003f8 	.word	0x200003f8

08002240 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002244:	4b06      	ldr	r3, [pc, #24]	@ (8002260 <SystemInit+0x20>)
 8002246:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800224a:	4a05      	ldr	r2, [pc, #20]	@ (8002260 <SystemInit+0x20>)
 800224c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002250:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002254:	bf00      	nop
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	e000ed00 	.word	0xe000ed00

08002264 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8002264:	b480      	push	{r7}
 8002266:	b087      	sub	sp, #28
 8002268:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800226a:	2300      	movs	r3, #0
 800226c:	613b      	str	r3, [r7, #16]
 800226e:	2300      	movs	r3, #0
 8002270:	617b      	str	r3, [r7, #20]
 8002272:	2302      	movs	r3, #2
 8002274:	60fb      	str	r3, [r7, #12]
 8002276:	2300      	movs	r3, #0
 8002278:	60bb      	str	r3, [r7, #8]
 800227a:	2302      	movs	r3, #2
 800227c:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800227e:	4b34      	ldr	r3, [pc, #208]	@ (8002350 <SystemCoreClockUpdate+0xec>)
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	f003 030c 	and.w	r3, r3, #12
 8002286:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	2b08      	cmp	r3, #8
 800228c:	d011      	beq.n	80022b2 <SystemCoreClockUpdate+0x4e>
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	2b08      	cmp	r3, #8
 8002292:	d844      	bhi.n	800231e <SystemCoreClockUpdate+0xba>
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d003      	beq.n	80022a2 <SystemCoreClockUpdate+0x3e>
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	2b04      	cmp	r3, #4
 800229e:	d004      	beq.n	80022aa <SystemCoreClockUpdate+0x46>
 80022a0:	e03d      	b.n	800231e <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80022a2:	4b2c      	ldr	r3, [pc, #176]	@ (8002354 <SystemCoreClockUpdate+0xf0>)
 80022a4:	4a2c      	ldr	r2, [pc, #176]	@ (8002358 <SystemCoreClockUpdate+0xf4>)
 80022a6:	601a      	str	r2, [r3, #0]
      break;
 80022a8:	e03d      	b.n	8002326 <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80022aa:	4b2a      	ldr	r3, [pc, #168]	@ (8002354 <SystemCoreClockUpdate+0xf0>)
 80022ac:	4a2b      	ldr	r2, [pc, #172]	@ (800235c <SystemCoreClockUpdate+0xf8>)
 80022ae:	601a      	str	r2, [r3, #0]
      break;
 80022b0:	e039      	b.n	8002326 <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80022b2:	4b27      	ldr	r3, [pc, #156]	@ (8002350 <SystemCoreClockUpdate+0xec>)
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	0d9b      	lsrs	r3, r3, #22
 80022b8:	f003 0301 	and.w	r3, r3, #1
 80022bc:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022be:	4b24      	ldr	r3, [pc, #144]	@ (8002350 <SystemCoreClockUpdate+0xec>)
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80022c6:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d00c      	beq.n	80022e8 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80022ce:	4a23      	ldr	r2, [pc, #140]	@ (800235c <SystemCoreClockUpdate+0xf8>)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80022d6:	4a1e      	ldr	r2, [pc, #120]	@ (8002350 <SystemCoreClockUpdate+0xec>)
 80022d8:	6852      	ldr	r2, [r2, #4]
 80022da:	0992      	lsrs	r2, r2, #6
 80022dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80022e0:	fb02 f303 	mul.w	r3, r2, r3
 80022e4:	617b      	str	r3, [r7, #20]
 80022e6:	e00b      	b.n	8002300 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80022e8:	4a1b      	ldr	r2, [pc, #108]	@ (8002358 <SystemCoreClockUpdate+0xf4>)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80022f0:	4a17      	ldr	r2, [pc, #92]	@ (8002350 <SystemCoreClockUpdate+0xec>)
 80022f2:	6852      	ldr	r2, [r2, #4]
 80022f4:	0992      	lsrs	r2, r2, #6
 80022f6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80022fa:	fb02 f303 	mul.w	r3, r2, r3
 80022fe:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8002300:	4b13      	ldr	r3, [pc, #76]	@ (8002350 <SystemCoreClockUpdate+0xec>)
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	0c1b      	lsrs	r3, r3, #16
 8002306:	f003 0303 	and.w	r3, r3, #3
 800230a:	3301      	adds	r3, #1
 800230c:	005b      	lsls	r3, r3, #1
 800230e:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8002310:	697a      	ldr	r2, [r7, #20]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	fbb2 f3f3 	udiv	r3, r2, r3
 8002318:	4a0e      	ldr	r2, [pc, #56]	@ (8002354 <SystemCoreClockUpdate+0xf0>)
 800231a:	6013      	str	r3, [r2, #0]
      break;
 800231c:	e003      	b.n	8002326 <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 800231e:	4b0d      	ldr	r3, [pc, #52]	@ (8002354 <SystemCoreClockUpdate+0xf0>)
 8002320:	4a0d      	ldr	r2, [pc, #52]	@ (8002358 <SystemCoreClockUpdate+0xf4>)
 8002322:	601a      	str	r2, [r3, #0]
      break;
 8002324:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8002326:	4b0a      	ldr	r3, [pc, #40]	@ (8002350 <SystemCoreClockUpdate+0xec>)
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	091b      	lsrs	r3, r3, #4
 800232c:	f003 030f 	and.w	r3, r3, #15
 8002330:	4a0b      	ldr	r2, [pc, #44]	@ (8002360 <SystemCoreClockUpdate+0xfc>)
 8002332:	5cd3      	ldrb	r3, [r2, r3]
 8002334:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8002336:	4b07      	ldr	r3, [pc, #28]	@ (8002354 <SystemCoreClockUpdate+0xf0>)
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	fa22 f303 	lsr.w	r3, r2, r3
 8002340:	4a04      	ldr	r2, [pc, #16]	@ (8002354 <SystemCoreClockUpdate+0xf0>)
 8002342:	6013      	str	r3, [r2, #0]
}
 8002344:	bf00      	nop
 8002346:	371c      	adds	r7, #28
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr
 8002350:	40023800 	.word	0x40023800
 8002354:	20000000 	.word	0x20000000
 8002358:	00f42400 	.word	0x00f42400
 800235c:	007a1200 	.word	0x007a1200
 8002360:	08005d64 	.word	0x08005d64

08002364 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002364:	480d      	ldr	r0, [pc, #52]	@ (800239c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002366:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002368:	f7ff ff6a 	bl	8002240 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800236c:	480c      	ldr	r0, [pc, #48]	@ (80023a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800236e:	490d      	ldr	r1, [pc, #52]	@ (80023a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002370:	4a0d      	ldr	r2, [pc, #52]	@ (80023a8 <LoopForever+0xe>)
  movs r3, #0
 8002372:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002374:	e002      	b.n	800237c <LoopCopyDataInit>

08002376 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002376:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002378:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800237a:	3304      	adds	r3, #4

0800237c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800237c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800237e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002380:	d3f9      	bcc.n	8002376 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002382:	4a0a      	ldr	r2, [pc, #40]	@ (80023ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8002384:	4c0a      	ldr	r4, [pc, #40]	@ (80023b0 <LoopForever+0x16>)
  movs r3, #0
 8002386:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002388:	e001      	b.n	800238e <LoopFillZerobss>

0800238a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800238a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800238c:	3204      	adds	r2, #4

0800238e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800238e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002390:	d3fb      	bcc.n	800238a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002392:	f001 fbdb 	bl	8003b4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002396:	f7ff fde7 	bl	8001f68 <main>

0800239a <LoopForever>:

LoopForever:
  b LoopForever
 800239a:	e7fe      	b.n	800239a <LoopForever>
  ldr   r0, =_estack
 800239c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80023a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023a4:	200001cc 	.word	0x200001cc
  ldr r2, =_sidata
 80023a8:	080060f8 	.word	0x080060f8
  ldr r2, =_sbss
 80023ac:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 80023b0:	200003f4 	.word	0x200003f4

080023b4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80023b4:	e7fe      	b.n	80023b4 <ADC_IRQHandler>

080023b6 <separateFractionAndIntegral>:
	float temp = 0;
	temp = (float)(SysTick->VAL / (SystemCoreClock));
	return temp;
}

__STATIC_INLINE void separateFractionAndIntegral(double number, double *fractionalPart, double *integralPart) {
 80023b6:	b580      	push	{r7, lr}
 80023b8:	b084      	sub	sp, #16
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	ed87 0b02 	vstr	d0, [r7, #8]
 80023c0:	6078      	str	r0, [r7, #4]
 80023c2:	6039      	str	r1, [r7, #0]
    *integralPart = (double)((int64_t)number);
 80023c4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80023c8:	f7fe fc4e 	bl	8000c68 <__aeabi_d2lz>
 80023cc:	4602      	mov	r2, r0
 80023ce:	460b      	mov	r3, r1
 80023d0:	4610      	mov	r0, r2
 80023d2:	4619      	mov	r1, r3
 80023d4:	f7fe f8f2 	bl	80005bc <__aeabi_l2d>
 80023d8:	4602      	mov	r2, r0
 80023da:	460b      	mov	r3, r1
 80023dc:	6839      	ldr	r1, [r7, #0]
 80023de:	e9c1 2300 	strd	r2, r3, [r1]
    *fractionalPart = number - *integralPart;
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023e8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80023ec:	f7fd ff5c 	bl	80002a8 <__aeabi_dsub>
 80023f0:	4602      	mov	r2, r0
 80023f2:	460b      	mov	r3, r1
 80023f4:	6879      	ldr	r1, [r7, #4]
 80023f6:	e9c1 2300 	strd	r2, r3, [r1]
}
 80023fa:	bf00      	nop
 80023fc:	3710      	adds	r7, #16
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}

08002402 <USART_Config_Reset>:
#include "USART.h"



void USART_Config_Reset(USART_Config *config)
{
 8002402:	b480      	push	{r7}
 8002404:	b083      	sub	sp, #12
 8002406:	af00      	add	r7, sp, #0
 8002408:	6078      	str	r0, [r7, #4]
	config->mode = USART_Mode.Disable;
 800240a:	2200      	movs	r2, #0
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	731a      	strb	r2, [r3, #12]
	config->hardware_flow = Hardware_Flow.Disable;
 8002410:	2200      	movs	r2, #0
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	74da      	strb	r2, [r3, #19]
	config->low_power_uart = Low_Power_USART.Disable;
 8002416:	2200      	movs	r2, #0
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	711a      	strb	r2, [r3, #4]
	config->baudrate = 9600;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002422:	609a      	str	r2, [r3, #8]
	config->dma_enable = DMA_Enable.RX_Disable | DMA_Enable.TX_Disable;
 8002424:	2203      	movs	r2, #3
 8002426:	2301      	movs	r3, #1
 8002428:	4313      	orrs	r3, r2
 800242a:	b2da      	uxtb	r2, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	755a      	strb	r2, [r3, #21]
	config->interrupt = Interrupt_Type.Disable;
 8002430:	2300      	movs	r3, #0
 8002432:	b2da      	uxtb	r2, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	749a      	strb	r2, [r3, #18]
}
 8002438:	bf00      	nop
 800243a:	370c      	adds	r7, #12
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr

08002444 <USART_Clock_Enable>:


int8_t USART_Clock_Enable(USART_Config *config)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
	if(config->Port == USART1)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a47      	ldr	r2, [pc, #284]	@ (8002570 <USART_Clock_Enable+0x12c>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d112      	bne.n	800247c <USART_Clock_Enable+0x38>
	{
		if(config->low_power_uart == Low_Power_USART.Enable) RCC -> APB2LPENR |= RCC_APB2LPENR_USART1LPEN;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	791b      	ldrb	r3, [r3, #4]
 800245a:	2201      	movs	r2, #1
 800245c:	4293      	cmp	r3, r2
 800245e:	d106      	bne.n	800246e <USART_Clock_Enable+0x2a>
 8002460:	4b44      	ldr	r3, [pc, #272]	@ (8002574 <USART_Clock_Enable+0x130>)
 8002462:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002464:	4a43      	ldr	r2, [pc, #268]	@ (8002574 <USART_Clock_Enable+0x130>)
 8002466:	f043 0310 	orr.w	r3, r3, #16
 800246a:	6653      	str	r3, [r2, #100]	@ 0x64
 800246c:	e079      	b.n	8002562 <USART_Clock_Enable+0x11e>
		else RCC -> APB2ENR |= RCC_APB2ENR_USART1EN;
 800246e:	4b41      	ldr	r3, [pc, #260]	@ (8002574 <USART_Clock_Enable+0x130>)
 8002470:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002472:	4a40      	ldr	r2, [pc, #256]	@ (8002574 <USART_Clock_Enable+0x130>)
 8002474:	f043 0310 	orr.w	r3, r3, #16
 8002478:	6453      	str	r3, [r2, #68]	@ 0x44
 800247a:	e072      	b.n	8002562 <USART_Clock_Enable+0x11e>
	}
	else if(config->Port == USART2)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a3d      	ldr	r2, [pc, #244]	@ (8002578 <USART_Clock_Enable+0x134>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d112      	bne.n	80024ac <USART_Clock_Enable+0x68>
	{
		if(config->low_power_uart == Low_Power_USART.Enable) RCC -> APB1LPENR |= RCC_APB1LPENR_USART2LPEN;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	791b      	ldrb	r3, [r3, #4]
 800248a:	2201      	movs	r2, #1
 800248c:	4293      	cmp	r3, r2
 800248e:	d106      	bne.n	800249e <USART_Clock_Enable+0x5a>
 8002490:	4b38      	ldr	r3, [pc, #224]	@ (8002574 <USART_Clock_Enable+0x130>)
 8002492:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002494:	4a37      	ldr	r2, [pc, #220]	@ (8002574 <USART_Clock_Enable+0x130>)
 8002496:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800249a:	6613      	str	r3, [r2, #96]	@ 0x60
 800249c:	e061      	b.n	8002562 <USART_Clock_Enable+0x11e>
		else RCC -> APB1ENR |= RCC_APB1ENR_USART2EN;
 800249e:	4b35      	ldr	r3, [pc, #212]	@ (8002574 <USART_Clock_Enable+0x130>)
 80024a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024a2:	4a34      	ldr	r2, [pc, #208]	@ (8002574 <USART_Clock_Enable+0x130>)
 80024a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80024aa:	e05a      	b.n	8002562 <USART_Clock_Enable+0x11e>
	}
	else if(config->Port == USART3)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a32      	ldr	r2, [pc, #200]	@ (800257c <USART_Clock_Enable+0x138>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d112      	bne.n	80024dc <USART_Clock_Enable+0x98>
	{
		if(config->low_power_uart == Low_Power_USART.Enable) RCC -> APB1LPENR |= RCC_APB1LPENR_USART3LPEN;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	791b      	ldrb	r3, [r3, #4]
 80024ba:	2201      	movs	r2, #1
 80024bc:	4293      	cmp	r3, r2
 80024be:	d106      	bne.n	80024ce <USART_Clock_Enable+0x8a>
 80024c0:	4b2c      	ldr	r3, [pc, #176]	@ (8002574 <USART_Clock_Enable+0x130>)
 80024c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024c4:	4a2b      	ldr	r2, [pc, #172]	@ (8002574 <USART_Clock_Enable+0x130>)
 80024c6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024ca:	6613      	str	r3, [r2, #96]	@ 0x60
 80024cc:	e049      	b.n	8002562 <USART_Clock_Enable+0x11e>
		else RCC -> APB1ENR |= RCC_APB1ENR_USART3EN;
 80024ce:	4b29      	ldr	r3, [pc, #164]	@ (8002574 <USART_Clock_Enable+0x130>)
 80024d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024d2:	4a28      	ldr	r2, [pc, #160]	@ (8002574 <USART_Clock_Enable+0x130>)
 80024d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80024da:	e042      	b.n	8002562 <USART_Clock_Enable+0x11e>
	}
	else if(config->Port == UART4)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a27      	ldr	r2, [pc, #156]	@ (8002580 <USART_Clock_Enable+0x13c>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d10e      	bne.n	8002504 <USART_Clock_Enable+0xc0>
	{
		if(config->low_power_uart == Low_Power_USART.Enable) return -1;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	791b      	ldrb	r3, [r3, #4]
 80024ea:	2201      	movs	r2, #1
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d102      	bne.n	80024f6 <USART_Clock_Enable+0xb2>
 80024f0:	f04f 33ff 	mov.w	r3, #4294967295
 80024f4:	e036      	b.n	8002564 <USART_Clock_Enable+0x120>
		else RCC -> APB1ENR |= RCC_APB1ENR_UART4EN;
 80024f6:	4b1f      	ldr	r3, [pc, #124]	@ (8002574 <USART_Clock_Enable+0x130>)
 80024f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024fa:	4a1e      	ldr	r2, [pc, #120]	@ (8002574 <USART_Clock_Enable+0x130>)
 80024fc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002500:	6413      	str	r3, [r2, #64]	@ 0x40
 8002502:	e02e      	b.n	8002562 <USART_Clock_Enable+0x11e>
	}
	else if(config->Port == UART5)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a1e      	ldr	r2, [pc, #120]	@ (8002584 <USART_Clock_Enable+0x140>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d10e      	bne.n	800252c <USART_Clock_Enable+0xe8>
	{
		if(config->low_power_uart == Low_Power_USART.Enable) return -1;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	791b      	ldrb	r3, [r3, #4]
 8002512:	2201      	movs	r2, #1
 8002514:	4293      	cmp	r3, r2
 8002516:	d102      	bne.n	800251e <USART_Clock_Enable+0xda>
 8002518:	f04f 33ff 	mov.w	r3, #4294967295
 800251c:	e022      	b.n	8002564 <USART_Clock_Enable+0x120>
		else RCC -> APB1ENR |= RCC_APB1ENR_UART5EN;
 800251e:	4b15      	ldr	r3, [pc, #84]	@ (8002574 <USART_Clock_Enable+0x130>)
 8002520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002522:	4a14      	ldr	r2, [pc, #80]	@ (8002574 <USART_Clock_Enable+0x130>)
 8002524:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002528:	6413      	str	r3, [r2, #64]	@ 0x40
 800252a:	e01a      	b.n	8002562 <USART_Clock_Enable+0x11e>
	}
	else if(config->Port == USART6)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a15      	ldr	r2, [pc, #84]	@ (8002588 <USART_Clock_Enable+0x144>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d112      	bne.n	800255c <USART_Clock_Enable+0x118>
	{
		if(config->low_power_uart == Low_Power_USART.Enable) RCC -> APB2LPENR |= RCC_APB2LPENR_USART6LPEN;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	791b      	ldrb	r3, [r3, #4]
 800253a:	2201      	movs	r2, #1
 800253c:	4293      	cmp	r3, r2
 800253e:	d106      	bne.n	800254e <USART_Clock_Enable+0x10a>
 8002540:	4b0c      	ldr	r3, [pc, #48]	@ (8002574 <USART_Clock_Enable+0x130>)
 8002542:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002544:	4a0b      	ldr	r2, [pc, #44]	@ (8002574 <USART_Clock_Enable+0x130>)
 8002546:	f043 0320 	orr.w	r3, r3, #32
 800254a:	6653      	str	r3, [r2, #100]	@ 0x64
 800254c:	e009      	b.n	8002562 <USART_Clock_Enable+0x11e>
		else RCC -> APB2ENR |= RCC_APB2ENR_USART6EN;
 800254e:	4b09      	ldr	r3, [pc, #36]	@ (8002574 <USART_Clock_Enable+0x130>)
 8002550:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002552:	4a08      	ldr	r2, [pc, #32]	@ (8002574 <USART_Clock_Enable+0x130>)
 8002554:	f043 0320 	orr.w	r3, r3, #32
 8002558:	6453      	str	r3, [r2, #68]	@ 0x44
 800255a:	e002      	b.n	8002562 <USART_Clock_Enable+0x11e>
	}
	else
	{
		return -1;
 800255c:	f04f 33ff 	mov.w	r3, #4294967295
 8002560:	e000      	b.n	8002564 <USART_Clock_Enable+0x120>
	}
	return 1;
 8002562:	2301      	movs	r3, #1
}
 8002564:	4618      	mov	r0, r3
 8002566:	370c      	adds	r7, #12
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr
 8002570:	40011000 	.word	0x40011000
 8002574:	40023800 	.word	0x40023800
 8002578:	40004400 	.word	0x40004400
 800257c:	40004800 	.word	0x40004800
 8002580:	40004c00 	.word	0x40004c00
 8002584:	40005000 	.word	0x40005000
 8002588:	40011400 	.word	0x40011400

0800258c <PIN_Setup>:
	}
	return 1;
}

static void PIN_Setup(USART_Config *config)
{
 800258c:	b5b0      	push	{r4, r5, r7, lr}
 800258e:	b086      	sub	sp, #24
 8002590:	af04      	add	r7, sp, #16
 8002592:	6078      	str	r0, [r7, #4]
	if(config->Port == USART1)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4aa0      	ldr	r2, [pc, #640]	@ (800281c <PIN_Setup+0x290>)
 800259a:	4293      	cmp	r3, r2
 800259c:	f040 810d 	bne.w	80027ba <PIN_Setup+0x22e>
	{
		if((config->mode == USART_Mode.Asynchronous) ||
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	7b1b      	ldrb	r3, [r3, #12]
 80025a4:	2201      	movs	r2, #1
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d00f      	beq.n	80025ca <PIN_Setup+0x3e>
		   (config->mode == USART_Mode.Synchronous) ||
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	7b1b      	ldrb	r3, [r3, #12]
 80025ae:	2202      	movs	r2, #2
		if((config->mode == USART_Mode.Asynchronous) ||
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d00a      	beq.n	80025ca <PIN_Setup+0x3e>
		   (config->mode == USART_Mode.IrDA) ||
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	7b1b      	ldrb	r3, [r3, #12]
 80025b8:	2204      	movs	r2, #4
		   (config->mode == USART_Mode.Synchronous) ||
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d005      	beq.n	80025ca <PIN_Setup+0x3e>
		   (config->mode == USART_Mode.LIN) )
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	7b1b      	ldrb	r3, [r3, #12]
 80025c2:	2205      	movs	r2, #5
		   (config->mode == USART_Mode.IrDA) ||
 80025c4:	4293      	cmp	r3, r2
 80025c6:	f040 80be 	bne.w	8002746 <PIN_Setup+0x1ba>
		{
			if(config->TX_Pin == USART1_TX_Pin.PA9)GPIO_Pin_Init(GPIOA, USART1_TX_Pin.PA9, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_1);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	7b5b      	ldrb	r3, [r3, #13]
 80025ce:	2209      	movs	r2, #9
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d10f      	bne.n	80025f4 <PIN_Setup+0x68>
 80025d4:	2009      	movs	r0, #9
 80025d6:	2402      	movs	r4, #2
 80025d8:	2500      	movs	r5, #0
 80025da:	2302      	movs	r3, #2
 80025dc:	2200      	movs	r2, #0
 80025de:	2107      	movs	r1, #7
 80025e0:	9102      	str	r1, [sp, #8]
 80025e2:	9201      	str	r2, [sp, #4]
 80025e4:	9300      	str	r3, [sp, #0]
 80025e6:	462b      	mov	r3, r5
 80025e8:	4622      	mov	r2, r4
 80025ea:	4601      	mov	r1, r0
 80025ec:	488c      	ldr	r0, [pc, #560]	@ (8002820 <PIN_Setup+0x294>)
 80025ee:	f7fe ffcb 	bl	8001588 <GPIO_Pin_Init>
 80025f2:	e013      	b.n	800261c <PIN_Setup+0x90>
			else if(config->TX_Pin == USART1_TX_Pin.PB6)GPIO_Pin_Init(GPIOB, USART1_TX_Pin.PB6, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_1);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	7b5b      	ldrb	r3, [r3, #13]
 80025f8:	2206      	movs	r2, #6
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d10e      	bne.n	800261c <PIN_Setup+0x90>
 80025fe:	2006      	movs	r0, #6
 8002600:	2402      	movs	r4, #2
 8002602:	2500      	movs	r5, #0
 8002604:	2302      	movs	r3, #2
 8002606:	2200      	movs	r2, #0
 8002608:	2107      	movs	r1, #7
 800260a:	9102      	str	r1, [sp, #8]
 800260c:	9201      	str	r2, [sp, #4]
 800260e:	9300      	str	r3, [sp, #0]
 8002610:	462b      	mov	r3, r5
 8002612:	4622      	mov	r2, r4
 8002614:	4601      	mov	r1, r0
 8002616:	4883      	ldr	r0, [pc, #524]	@ (8002824 <PIN_Setup+0x298>)
 8002618:	f7fe ffb6 	bl	8001588 <GPIO_Pin_Init>

			if(config->RX_Pin == USART1_RX_Pin.PA10)GPIO_Pin_Init(GPIOA, USART1_RX_Pin.PA10, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_1);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	7b9b      	ldrb	r3, [r3, #14]
 8002620:	220a      	movs	r2, #10
 8002622:	4293      	cmp	r3, r2
 8002624:	d10f      	bne.n	8002646 <PIN_Setup+0xba>
 8002626:	200a      	movs	r0, #10
 8002628:	2402      	movs	r4, #2
 800262a:	2500      	movs	r5, #0
 800262c:	2302      	movs	r3, #2
 800262e:	2200      	movs	r2, #0
 8002630:	2107      	movs	r1, #7
 8002632:	9102      	str	r1, [sp, #8]
 8002634:	9201      	str	r2, [sp, #4]
 8002636:	9300      	str	r3, [sp, #0]
 8002638:	462b      	mov	r3, r5
 800263a:	4622      	mov	r2, r4
 800263c:	4601      	mov	r1, r0
 800263e:	4878      	ldr	r0, [pc, #480]	@ (8002820 <PIN_Setup+0x294>)
 8002640:	f7fe ffa2 	bl	8001588 <GPIO_Pin_Init>
 8002644:	e013      	b.n	800266e <PIN_Setup+0xe2>
			else if(config->RX_Pin == USART1_RX_Pin.PB7)GPIO_Pin_Init(GPIOB, USART1_RX_Pin.PB7, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_1);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	7b9b      	ldrb	r3, [r3, #14]
 800264a:	2207      	movs	r2, #7
 800264c:	4293      	cmp	r3, r2
 800264e:	d10e      	bne.n	800266e <PIN_Setup+0xe2>
 8002650:	2007      	movs	r0, #7
 8002652:	2402      	movs	r4, #2
 8002654:	2500      	movs	r5, #0
 8002656:	2302      	movs	r3, #2
 8002658:	2200      	movs	r2, #0
 800265a:	2107      	movs	r1, #7
 800265c:	9102      	str	r1, [sp, #8]
 800265e:	9201      	str	r2, [sp, #4]
 8002660:	9300      	str	r3, [sp, #0]
 8002662:	462b      	mov	r3, r5
 8002664:	4622      	mov	r2, r4
 8002666:	4601      	mov	r1, r0
 8002668:	486e      	ldr	r0, [pc, #440]	@ (8002824 <PIN_Setup+0x298>)
 800266a:	f7fe ff8d 	bl	8001588 <GPIO_Pin_Init>

			if((config->mode == USART_Mode.Synchronous))if(config->CLK_Pin == USART1_CLK_Pin.PA8)GPIO_Pin_Init(GPIOA, USART1_CLK_Pin.PA8, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_1);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	7b1b      	ldrb	r3, [r3, #12]
 8002672:	2202      	movs	r2, #2
 8002674:	4293      	cmp	r3, r2
 8002676:	d113      	bne.n	80026a0 <PIN_Setup+0x114>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	7bdb      	ldrb	r3, [r3, #15]
 800267c:	2208      	movs	r2, #8
 800267e:	4293      	cmp	r3, r2
 8002680:	d10e      	bne.n	80026a0 <PIN_Setup+0x114>
 8002682:	2008      	movs	r0, #8
 8002684:	2402      	movs	r4, #2
 8002686:	2500      	movs	r5, #0
 8002688:	2302      	movs	r3, #2
 800268a:	2200      	movs	r2, #0
 800268c:	2107      	movs	r1, #7
 800268e:	9102      	str	r1, [sp, #8]
 8002690:	9201      	str	r2, [sp, #4]
 8002692:	9300      	str	r3, [sp, #0]
 8002694:	462b      	mov	r3, r5
 8002696:	4622      	mov	r2, r4
 8002698:	4601      	mov	r1, r0
 800269a:	4861      	ldr	r0, [pc, #388]	@ (8002820 <PIN_Setup+0x294>)
 800269c:	f7fe ff74 	bl	8001588 <GPIO_Pin_Init>

			if(config->hardware_flow != Hardware_Flow.Disable)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	7cdb      	ldrb	r3, [r3, #19]
 80026a4:	2200      	movs	r2, #0
 80026a6:	4293      	cmp	r3, r2
 80026a8:	f000 83bb 	beq.w	8002e22 <PIN_Setup+0x896>
			{
				if(config->hardware_flow == Hardware_Flow.CTS_Enable)GPIO_Pin_Init(GPIOA, USART1_CTS_Pin.PA11, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_1);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	7cdb      	ldrb	r3, [r3, #19]
 80026b0:	2201      	movs	r2, #1
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d10e      	bne.n	80026d4 <PIN_Setup+0x148>
 80026b6:	200b      	movs	r0, #11
 80026b8:	2402      	movs	r4, #2
 80026ba:	2500      	movs	r5, #0
 80026bc:	2302      	movs	r3, #2
 80026be:	2200      	movs	r2, #0
 80026c0:	2107      	movs	r1, #7
 80026c2:	9102      	str	r1, [sp, #8]
 80026c4:	9201      	str	r2, [sp, #4]
 80026c6:	9300      	str	r3, [sp, #0]
 80026c8:	462b      	mov	r3, r5
 80026ca:	4622      	mov	r2, r4
 80026cc:	4601      	mov	r1, r0
 80026ce:	4854      	ldr	r0, [pc, #336]	@ (8002820 <PIN_Setup+0x294>)
 80026d0:	f7fe ff5a 	bl	8001588 <GPIO_Pin_Init>
				if(config->hardware_flow == Hardware_Flow.RTS_Enable)GPIO_Pin_Init(GPIOA, USART1_RTS_Pin.PA12, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_1);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	7cdb      	ldrb	r3, [r3, #19]
 80026d8:	2202      	movs	r2, #2
 80026da:	4293      	cmp	r3, r2
 80026dc:	d10e      	bne.n	80026fc <PIN_Setup+0x170>
 80026de:	200c      	movs	r0, #12
 80026e0:	2402      	movs	r4, #2
 80026e2:	2500      	movs	r5, #0
 80026e4:	2302      	movs	r3, #2
 80026e6:	2200      	movs	r2, #0
 80026e8:	2107      	movs	r1, #7
 80026ea:	9102      	str	r1, [sp, #8]
 80026ec:	9201      	str	r2, [sp, #4]
 80026ee:	9300      	str	r3, [sp, #0]
 80026f0:	462b      	mov	r3, r5
 80026f2:	4622      	mov	r2, r4
 80026f4:	4601      	mov	r1, r0
 80026f6:	484a      	ldr	r0, [pc, #296]	@ (8002820 <PIN_Setup+0x294>)
 80026f8:	f7fe ff46 	bl	8001588 <GPIO_Pin_Init>
				if(config->hardware_flow == Hardware_Flow.CTS_RTS_Enable)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	7cdb      	ldrb	r3, [r3, #19]
 8002700:	2203      	movs	r2, #3
 8002702:	4293      	cmp	r3, r2
 8002704:	f040 838d 	bne.w	8002e22 <PIN_Setup+0x896>
				{
					GPIO_Pin_Init(GPIOA, USART1_CTS_Pin.PA11, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_1);
 8002708:	200b      	movs	r0, #11
 800270a:	2402      	movs	r4, #2
 800270c:	2500      	movs	r5, #0
 800270e:	2302      	movs	r3, #2
 8002710:	2200      	movs	r2, #0
 8002712:	2107      	movs	r1, #7
 8002714:	9102      	str	r1, [sp, #8]
 8002716:	9201      	str	r2, [sp, #4]
 8002718:	9300      	str	r3, [sp, #0]
 800271a:	462b      	mov	r3, r5
 800271c:	4622      	mov	r2, r4
 800271e:	4601      	mov	r1, r0
 8002720:	483f      	ldr	r0, [pc, #252]	@ (8002820 <PIN_Setup+0x294>)
 8002722:	f7fe ff31 	bl	8001588 <GPIO_Pin_Init>
					GPIO_Pin_Init(GPIOA, USART1_RTS_Pin.PA12, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_1);
 8002726:	200c      	movs	r0, #12
 8002728:	2402      	movs	r4, #2
 800272a:	2500      	movs	r5, #0
 800272c:	2302      	movs	r3, #2
 800272e:	2200      	movs	r2, #0
 8002730:	2107      	movs	r1, #7
 8002732:	9102      	str	r1, [sp, #8]
 8002734:	9201      	str	r2, [sp, #4]
 8002736:	9300      	str	r3, [sp, #0]
 8002738:	462b      	mov	r3, r5
 800273a:	4622      	mov	r2, r4
 800273c:	4601      	mov	r1, r0
 800273e:	4838      	ldr	r0, [pc, #224]	@ (8002820 <PIN_Setup+0x294>)
 8002740:	f7fe ff22 	bl	8001588 <GPIO_Pin_Init>
			if(config->hardware_flow != Hardware_Flow.Disable)
 8002744:	e36d      	b.n	8002e22 <PIN_Setup+0x896>
				}
		    }
		}
		else if((config->mode == USART_Mode.SmartCard) ||
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	7b1b      	ldrb	r3, [r3, #12]
 800274a:	2206      	movs	r2, #6
 800274c:	4293      	cmp	r3, r2
 800274e:	d00a      	beq.n	8002766 <PIN_Setup+0x1da>
		   (config->mode == USART_Mode.SmartCard_Clock) ||
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	7b1b      	ldrb	r3, [r3, #12]
 8002754:	2207      	movs	r2, #7
		else if((config->mode == USART_Mode.SmartCard) ||
 8002756:	4293      	cmp	r3, r2
 8002758:	d005      	beq.n	8002766 <PIN_Setup+0x1da>
		   (config->mode == USART_Mode.Single_Wire_Half_Duplex) )
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	7b1b      	ldrb	r3, [r3, #12]
 800275e:	2203      	movs	r2, #3
		   (config->mode == USART_Mode.SmartCard_Clock) ||
 8002760:	4293      	cmp	r3, r2
 8002762:	f040 8363 	bne.w	8002e2c <PIN_Setup+0x8a0>
		{
			if(config->TX_Pin == USART1_TX_Pin.PA9)GPIO_Pin_Init(GPIOA, USART1_TX_Pin.PA9, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_1);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	7b5b      	ldrb	r3, [r3, #13]
 800276a:	2209      	movs	r2, #9
 800276c:	4293      	cmp	r3, r2
 800276e:	d10e      	bne.n	800278e <PIN_Setup+0x202>
 8002770:	2009      	movs	r0, #9
 8002772:	2402      	movs	r4, #2
 8002774:	2500      	movs	r5, #0
 8002776:	2302      	movs	r3, #2
 8002778:	2200      	movs	r2, #0
 800277a:	2107      	movs	r1, #7
 800277c:	9102      	str	r1, [sp, #8]
 800277e:	9201      	str	r2, [sp, #4]
 8002780:	9300      	str	r3, [sp, #0]
 8002782:	462b      	mov	r3, r5
 8002784:	4622      	mov	r2, r4
 8002786:	4601      	mov	r1, r0
 8002788:	4825      	ldr	r0, [pc, #148]	@ (8002820 <PIN_Setup+0x294>)
 800278a:	f7fe fefd 	bl	8001588 <GPIO_Pin_Init>
			if((config->mode == USART_Mode.SmartCard_Clock))GPIO_Pin_Init(GPIOA, USART1_CLK_Pin.PA8, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_1);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	7b1b      	ldrb	r3, [r3, #12]
 8002792:	2207      	movs	r2, #7
 8002794:	4293      	cmp	r3, r2
 8002796:	f040 8349 	bne.w	8002e2c <PIN_Setup+0x8a0>
 800279a:	2008      	movs	r0, #8
 800279c:	2402      	movs	r4, #2
 800279e:	2500      	movs	r5, #0
 80027a0:	2302      	movs	r3, #2
 80027a2:	2200      	movs	r2, #0
 80027a4:	2107      	movs	r1, #7
 80027a6:	9102      	str	r1, [sp, #8]
 80027a8:	9201      	str	r2, [sp, #4]
 80027aa:	9300      	str	r3, [sp, #0]
 80027ac:	462b      	mov	r3, r5
 80027ae:	4622      	mov	r2, r4
 80027b0:	4601      	mov	r1, r0
 80027b2:	481b      	ldr	r0, [pc, #108]	@ (8002820 <PIN_Setup+0x294>)
 80027b4:	f7fe fee8 	bl	8001588 <GPIO_Pin_Init>
//
//		}
//	}


}
 80027b8:	e338      	b.n	8002e2c <PIN_Setup+0x8a0>
	else if(config->Port == USART2)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a1a      	ldr	r2, [pc, #104]	@ (8002828 <PIN_Setup+0x29c>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	f040 817b 	bne.w	8002abc <PIN_Setup+0x530>
		if((config->mode == USART_Mode.Asynchronous) ||
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	7b1b      	ldrb	r3, [r3, #12]
 80027ca:	2201      	movs	r2, #1
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d00f      	beq.n	80027f0 <PIN_Setup+0x264>
		   (config->mode == USART_Mode.Synchronous) ||
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	7b1b      	ldrb	r3, [r3, #12]
 80027d4:	2202      	movs	r2, #2
		if((config->mode == USART_Mode.Asynchronous) ||
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d00a      	beq.n	80027f0 <PIN_Setup+0x264>
		   (config->mode == USART_Mode.IrDA) ||
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	7b1b      	ldrb	r3, [r3, #12]
 80027de:	2204      	movs	r2, #4
		   (config->mode == USART_Mode.Synchronous) ||
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d005      	beq.n	80027f0 <PIN_Setup+0x264>
		   (config->mode == USART_Mode.LIN) )
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	7b1b      	ldrb	r3, [r3, #12]
 80027e8:	2205      	movs	r2, #5
		   (config->mode == USART_Mode.IrDA) ||
 80027ea:	4293      	cmp	r3, r2
 80027ec:	f040 80f8 	bne.w	80029e0 <PIN_Setup+0x454>
			if(config->TX_Pin == USART2_TX_Pin.PA2)GPIO_Pin_Init(GPIOA, USART2_TX_Pin.PA2, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	7b5b      	ldrb	r3, [r3, #13]
 80027f4:	2202      	movs	r2, #2
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d118      	bne.n	800282c <PIN_Setup+0x2a0>
 80027fa:	2002      	movs	r0, #2
 80027fc:	2402      	movs	r4, #2
 80027fe:	2500      	movs	r5, #0
 8002800:	2302      	movs	r3, #2
 8002802:	2200      	movs	r2, #0
 8002804:	2107      	movs	r1, #7
 8002806:	9102      	str	r1, [sp, #8]
 8002808:	9201      	str	r2, [sp, #4]
 800280a:	9300      	str	r3, [sp, #0]
 800280c:	462b      	mov	r3, r5
 800280e:	4622      	mov	r2, r4
 8002810:	4601      	mov	r1, r0
 8002812:	4803      	ldr	r0, [pc, #12]	@ (8002820 <PIN_Setup+0x294>)
 8002814:	f7fe feb8 	bl	8001588 <GPIO_Pin_Init>
 8002818:	e01c      	b.n	8002854 <PIN_Setup+0x2c8>
 800281a:	bf00      	nop
 800281c:	40011000 	.word	0x40011000
 8002820:	40020000 	.word	0x40020000
 8002824:	40020400 	.word	0x40020400
 8002828:	40004400 	.word	0x40004400
			else if(config->TX_Pin == USART2_TX_Pin.PD5)GPIO_Pin_Init(GPIOD, USART2_TX_Pin.PD5, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	7b5b      	ldrb	r3, [r3, #13]
 8002830:	2205      	movs	r2, #5
 8002832:	4293      	cmp	r3, r2
 8002834:	d10e      	bne.n	8002854 <PIN_Setup+0x2c8>
 8002836:	2005      	movs	r0, #5
 8002838:	2402      	movs	r4, #2
 800283a:	2500      	movs	r5, #0
 800283c:	2302      	movs	r3, #2
 800283e:	2200      	movs	r2, #0
 8002840:	2107      	movs	r1, #7
 8002842:	9102      	str	r1, [sp, #8]
 8002844:	9201      	str	r2, [sp, #4]
 8002846:	9300      	str	r3, [sp, #0]
 8002848:	462b      	mov	r3, r5
 800284a:	4622      	mov	r2, r4
 800284c:	4601      	mov	r1, r0
 800284e:	4899      	ldr	r0, [pc, #612]	@ (8002ab4 <PIN_Setup+0x528>)
 8002850:	f7fe fe9a 	bl	8001588 <GPIO_Pin_Init>
			if(config->RX_Pin == USART2_RX_Pin.PA3)GPIO_Pin_Init(GPIOA, USART2_RX_Pin.PA3, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	7b9b      	ldrb	r3, [r3, #14]
 8002858:	2203      	movs	r2, #3
 800285a:	4293      	cmp	r3, r2
 800285c:	d10f      	bne.n	800287e <PIN_Setup+0x2f2>
 800285e:	2003      	movs	r0, #3
 8002860:	2402      	movs	r4, #2
 8002862:	2500      	movs	r5, #0
 8002864:	2302      	movs	r3, #2
 8002866:	2200      	movs	r2, #0
 8002868:	2107      	movs	r1, #7
 800286a:	9102      	str	r1, [sp, #8]
 800286c:	9201      	str	r2, [sp, #4]
 800286e:	9300      	str	r3, [sp, #0]
 8002870:	462b      	mov	r3, r5
 8002872:	4622      	mov	r2, r4
 8002874:	4601      	mov	r1, r0
 8002876:	4890      	ldr	r0, [pc, #576]	@ (8002ab8 <PIN_Setup+0x52c>)
 8002878:	f7fe fe86 	bl	8001588 <GPIO_Pin_Init>
 800287c:	e013      	b.n	80028a6 <PIN_Setup+0x31a>
			else if(config->RX_Pin == USART2_RX_Pin.PD6)GPIO_Pin_Init(GPIOD, USART2_RX_Pin.PD6, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	7b9b      	ldrb	r3, [r3, #14]
 8002882:	2206      	movs	r2, #6
 8002884:	4293      	cmp	r3, r2
 8002886:	d10e      	bne.n	80028a6 <PIN_Setup+0x31a>
 8002888:	2006      	movs	r0, #6
 800288a:	2402      	movs	r4, #2
 800288c:	2500      	movs	r5, #0
 800288e:	2302      	movs	r3, #2
 8002890:	2200      	movs	r2, #0
 8002892:	2107      	movs	r1, #7
 8002894:	9102      	str	r1, [sp, #8]
 8002896:	9201      	str	r2, [sp, #4]
 8002898:	9300      	str	r3, [sp, #0]
 800289a:	462b      	mov	r3, r5
 800289c:	4622      	mov	r2, r4
 800289e:	4601      	mov	r1, r0
 80028a0:	4884      	ldr	r0, [pc, #528]	@ (8002ab4 <PIN_Setup+0x528>)
 80028a2:	f7fe fe71 	bl	8001588 <GPIO_Pin_Init>
			if((config->mode == USART_Mode.Synchronous)){
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	7b1b      	ldrb	r3, [r3, #12]
 80028aa:	2202      	movs	r2, #2
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d128      	bne.n	8002902 <PIN_Setup+0x376>
				if(config->CLK_Pin == USART2_CLK_Pin.PA4)GPIO_Pin_Init(GPIOA, USART2_CLK_Pin.PA4, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	7bdb      	ldrb	r3, [r3, #15]
 80028b4:	2204      	movs	r2, #4
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d10f      	bne.n	80028da <PIN_Setup+0x34e>
 80028ba:	2004      	movs	r0, #4
 80028bc:	2402      	movs	r4, #2
 80028be:	2500      	movs	r5, #0
 80028c0:	2302      	movs	r3, #2
 80028c2:	2200      	movs	r2, #0
 80028c4:	2107      	movs	r1, #7
 80028c6:	9102      	str	r1, [sp, #8]
 80028c8:	9201      	str	r2, [sp, #4]
 80028ca:	9300      	str	r3, [sp, #0]
 80028cc:	462b      	mov	r3, r5
 80028ce:	4622      	mov	r2, r4
 80028d0:	4601      	mov	r1, r0
 80028d2:	4879      	ldr	r0, [pc, #484]	@ (8002ab8 <PIN_Setup+0x52c>)
 80028d4:	f7fe fe58 	bl	8001588 <GPIO_Pin_Init>
 80028d8:	e013      	b.n	8002902 <PIN_Setup+0x376>
				else if(config->CLK_Pin == USART2_CLK_Pin.PD7)GPIO_Pin_Init(GPIOA, USART2_CLK_Pin.PD7, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	7bdb      	ldrb	r3, [r3, #15]
 80028de:	2207      	movs	r2, #7
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d10e      	bne.n	8002902 <PIN_Setup+0x376>
 80028e4:	2007      	movs	r0, #7
 80028e6:	2402      	movs	r4, #2
 80028e8:	2500      	movs	r5, #0
 80028ea:	2302      	movs	r3, #2
 80028ec:	2200      	movs	r2, #0
 80028ee:	2107      	movs	r1, #7
 80028f0:	9102      	str	r1, [sp, #8]
 80028f2:	9201      	str	r2, [sp, #4]
 80028f4:	9300      	str	r3, [sp, #0]
 80028f6:	462b      	mov	r3, r5
 80028f8:	4622      	mov	r2, r4
 80028fa:	4601      	mov	r1, r0
 80028fc:	486e      	ldr	r0, [pc, #440]	@ (8002ab8 <PIN_Setup+0x52c>)
 80028fe:	f7fe fe43 	bl	8001588 <GPIO_Pin_Init>
			if((config->hardware_flow != Hardware_Flow.Disable) || (config->hardware_flow == Hardware_Flow.CTS_RTS_Enable))
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	7cdb      	ldrb	r3, [r3, #19]
 8002906:	2200      	movs	r2, #0
 8002908:	4293      	cmp	r3, r2
 800290a:	d105      	bne.n	8002918 <PIN_Setup+0x38c>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	7cdb      	ldrb	r3, [r3, #19]
 8002910:	2203      	movs	r2, #3
 8002912:	4293      	cmp	r3, r2
 8002914:	f040 8287 	bne.w	8002e26 <PIN_Setup+0x89a>
				if(config->hardware_flow == Hardware_Flow.CTS_Enable)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	7cdb      	ldrb	r3, [r3, #19]
 800291c:	2201      	movs	r2, #1
 800291e:	4293      	cmp	r3, r2
 8002920:	d128      	bne.n	8002974 <PIN_Setup+0x3e8>
					if(config->CLK_Pin == USART2_CTS_Pin.PA0)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	7bdb      	ldrb	r3, [r3, #15]
 8002926:	2200      	movs	r2, #0
 8002928:	4293      	cmp	r3, r2
 800292a:	d10f      	bne.n	800294c <PIN_Setup+0x3c0>
						GPIO_Pin_Init(GPIOA, USART2_CTS_Pin.PA0, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 800292c:	2000      	movs	r0, #0
 800292e:	2402      	movs	r4, #2
 8002930:	2500      	movs	r5, #0
 8002932:	2302      	movs	r3, #2
 8002934:	2200      	movs	r2, #0
 8002936:	2107      	movs	r1, #7
 8002938:	9102      	str	r1, [sp, #8]
 800293a:	9201      	str	r2, [sp, #4]
 800293c:	9300      	str	r3, [sp, #0]
 800293e:	462b      	mov	r3, r5
 8002940:	4622      	mov	r2, r4
 8002942:	4601      	mov	r1, r0
 8002944:	485c      	ldr	r0, [pc, #368]	@ (8002ab8 <PIN_Setup+0x52c>)
 8002946:	f7fe fe1f 	bl	8001588 <GPIO_Pin_Init>
 800294a:	e013      	b.n	8002974 <PIN_Setup+0x3e8>
					else if(config->CLK_Pin == USART2_CTS_Pin.PD3)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	7bdb      	ldrb	r3, [r3, #15]
 8002950:	2203      	movs	r2, #3
 8002952:	4293      	cmp	r3, r2
 8002954:	d10e      	bne.n	8002974 <PIN_Setup+0x3e8>
						GPIO_Pin_Init(GPIOD, USART2_CTS_Pin.PD3, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 8002956:	2003      	movs	r0, #3
 8002958:	2402      	movs	r4, #2
 800295a:	2500      	movs	r5, #0
 800295c:	2302      	movs	r3, #2
 800295e:	2200      	movs	r2, #0
 8002960:	2107      	movs	r1, #7
 8002962:	9102      	str	r1, [sp, #8]
 8002964:	9201      	str	r2, [sp, #4]
 8002966:	9300      	str	r3, [sp, #0]
 8002968:	462b      	mov	r3, r5
 800296a:	4622      	mov	r2, r4
 800296c:	4601      	mov	r1, r0
 800296e:	4851      	ldr	r0, [pc, #324]	@ (8002ab4 <PIN_Setup+0x528>)
 8002970:	f7fe fe0a 	bl	8001588 <GPIO_Pin_Init>
				if((config->hardware_flow == Hardware_Flow.RTS_Enable) || (config->hardware_flow == Hardware_Flow.CTS_RTS_Enable))
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	7cdb      	ldrb	r3, [r3, #19]
 8002978:	2202      	movs	r2, #2
 800297a:	4293      	cmp	r3, r2
 800297c:	d005      	beq.n	800298a <PIN_Setup+0x3fe>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	7cdb      	ldrb	r3, [r3, #19]
 8002982:	2203      	movs	r2, #3
 8002984:	4293      	cmp	r3, r2
 8002986:	f040 824e 	bne.w	8002e26 <PIN_Setup+0x89a>
					if(config->CLK_Pin == USART2_RTS_Pin.PA1)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	7bdb      	ldrb	r3, [r3, #15]
 800298e:	2201      	movs	r2, #1
 8002990:	4293      	cmp	r3, r2
 8002992:	d10f      	bne.n	80029b4 <PIN_Setup+0x428>
						GPIO_Pin_Init(GPIOA, USART2_RTS_Pin.PA1, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 8002994:	2001      	movs	r0, #1
 8002996:	2402      	movs	r4, #2
 8002998:	2500      	movs	r5, #0
 800299a:	2302      	movs	r3, #2
 800299c:	2200      	movs	r2, #0
 800299e:	2107      	movs	r1, #7
 80029a0:	9102      	str	r1, [sp, #8]
 80029a2:	9201      	str	r2, [sp, #4]
 80029a4:	9300      	str	r3, [sp, #0]
 80029a6:	462b      	mov	r3, r5
 80029a8:	4622      	mov	r2, r4
 80029aa:	4601      	mov	r1, r0
 80029ac:	4842      	ldr	r0, [pc, #264]	@ (8002ab8 <PIN_Setup+0x52c>)
 80029ae:	f7fe fdeb 	bl	8001588 <GPIO_Pin_Init>
			if((config->hardware_flow != Hardware_Flow.Disable) || (config->hardware_flow == Hardware_Flow.CTS_RTS_Enable))
 80029b2:	e238      	b.n	8002e26 <PIN_Setup+0x89a>
					else if(config->CLK_Pin == USART2_RTS_Pin.PD4)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	7bdb      	ldrb	r3, [r3, #15]
 80029b8:	2204      	movs	r2, #4
 80029ba:	4293      	cmp	r3, r2
 80029bc:	f040 8233 	bne.w	8002e26 <PIN_Setup+0x89a>
						GPIO_Pin_Init(GPIOD, USART2_RTS_Pin.PD4, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 80029c0:	2004      	movs	r0, #4
 80029c2:	2402      	movs	r4, #2
 80029c4:	2500      	movs	r5, #0
 80029c6:	2302      	movs	r3, #2
 80029c8:	2200      	movs	r2, #0
 80029ca:	2107      	movs	r1, #7
 80029cc:	9102      	str	r1, [sp, #8]
 80029ce:	9201      	str	r2, [sp, #4]
 80029d0:	9300      	str	r3, [sp, #0]
 80029d2:	462b      	mov	r3, r5
 80029d4:	4622      	mov	r2, r4
 80029d6:	4601      	mov	r1, r0
 80029d8:	4836      	ldr	r0, [pc, #216]	@ (8002ab4 <PIN_Setup+0x528>)
 80029da:	f7fe fdd5 	bl	8001588 <GPIO_Pin_Init>
			if((config->hardware_flow != Hardware_Flow.Disable) || (config->hardware_flow == Hardware_Flow.CTS_RTS_Enable))
 80029de:	e222      	b.n	8002e26 <PIN_Setup+0x89a>
		else if((config->mode == USART_Mode.SmartCard) ||
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	7b1b      	ldrb	r3, [r3, #12]
 80029e4:	2206      	movs	r2, #6
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d00a      	beq.n	8002a00 <PIN_Setup+0x474>
		   (config->mode == USART_Mode.SmartCard_Clock) ||
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	7b1b      	ldrb	r3, [r3, #12]
 80029ee:	2207      	movs	r2, #7
		else if((config->mode == USART_Mode.SmartCard) ||
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d005      	beq.n	8002a00 <PIN_Setup+0x474>
		   (config->mode == USART_Mode.Single_Wire_Half_Duplex))
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	7b1b      	ldrb	r3, [r3, #12]
 80029f8:	2203      	movs	r2, #3
		   (config->mode == USART_Mode.SmartCard_Clock) ||
 80029fa:	4293      	cmp	r3, r2
 80029fc:	f040 8216 	bne.w	8002e2c <PIN_Setup+0x8a0>
			if(config->TX_Pin == USART2_TX_Pin.PA2)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	7b5b      	ldrb	r3, [r3, #13]
 8002a04:	2202      	movs	r2, #2
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d10f      	bne.n	8002a2a <PIN_Setup+0x49e>
				GPIO_Pin_Init(GPIOA, USART2_TX_Pin.PA2, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 8002a0a:	2002      	movs	r0, #2
 8002a0c:	2402      	movs	r4, #2
 8002a0e:	2500      	movs	r5, #0
 8002a10:	2302      	movs	r3, #2
 8002a12:	2200      	movs	r2, #0
 8002a14:	2107      	movs	r1, #7
 8002a16:	9102      	str	r1, [sp, #8]
 8002a18:	9201      	str	r2, [sp, #4]
 8002a1a:	9300      	str	r3, [sp, #0]
 8002a1c:	462b      	mov	r3, r5
 8002a1e:	4622      	mov	r2, r4
 8002a20:	4601      	mov	r1, r0
 8002a22:	4825      	ldr	r0, [pc, #148]	@ (8002ab8 <PIN_Setup+0x52c>)
 8002a24:	f7fe fdb0 	bl	8001588 <GPIO_Pin_Init>
 8002a28:	e013      	b.n	8002a52 <PIN_Setup+0x4c6>
			else if(config->TX_Pin == USART2_TX_Pin.PD5)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	7b5b      	ldrb	r3, [r3, #13]
 8002a2e:	2205      	movs	r2, #5
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d10e      	bne.n	8002a52 <PIN_Setup+0x4c6>
				GPIO_Pin_Init(GPIOD, USART2_TX_Pin.PD5, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 8002a34:	2005      	movs	r0, #5
 8002a36:	2402      	movs	r4, #2
 8002a38:	2500      	movs	r5, #0
 8002a3a:	2302      	movs	r3, #2
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	2107      	movs	r1, #7
 8002a40:	9102      	str	r1, [sp, #8]
 8002a42:	9201      	str	r2, [sp, #4]
 8002a44:	9300      	str	r3, [sp, #0]
 8002a46:	462b      	mov	r3, r5
 8002a48:	4622      	mov	r2, r4
 8002a4a:	4601      	mov	r1, r0
 8002a4c:	4819      	ldr	r0, [pc, #100]	@ (8002ab4 <PIN_Setup+0x528>)
 8002a4e:	f7fe fd9b 	bl	8001588 <GPIO_Pin_Init>
			if((config->mode == USART_Mode.SmartCard_Clock))
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	7b1b      	ldrb	r3, [r3, #12]
 8002a56:	2207      	movs	r2, #7
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	f040 81e7 	bne.w	8002e2c <PIN_Setup+0x8a0>
				if(config->CLK_Pin == USART2_CLK_Pin.PA4)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	7bdb      	ldrb	r3, [r3, #15]
 8002a62:	2204      	movs	r2, #4
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d10f      	bne.n	8002a88 <PIN_Setup+0x4fc>
					GPIO_Pin_Init(GPIOA, USART2_CLK_Pin.PA4, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 8002a68:	2004      	movs	r0, #4
 8002a6a:	2402      	movs	r4, #2
 8002a6c:	2500      	movs	r5, #0
 8002a6e:	2302      	movs	r3, #2
 8002a70:	2200      	movs	r2, #0
 8002a72:	2107      	movs	r1, #7
 8002a74:	9102      	str	r1, [sp, #8]
 8002a76:	9201      	str	r2, [sp, #4]
 8002a78:	9300      	str	r3, [sp, #0]
 8002a7a:	462b      	mov	r3, r5
 8002a7c:	4622      	mov	r2, r4
 8002a7e:	4601      	mov	r1, r0
 8002a80:	480d      	ldr	r0, [pc, #52]	@ (8002ab8 <PIN_Setup+0x52c>)
 8002a82:	f7fe fd81 	bl	8001588 <GPIO_Pin_Init>
}
 8002a86:	e1d1      	b.n	8002e2c <PIN_Setup+0x8a0>
				else if(config->CLK_Pin == USART2_CLK_Pin.PD7)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	7bdb      	ldrb	r3, [r3, #15]
 8002a8c:	2207      	movs	r2, #7
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	f040 81cc 	bne.w	8002e2c <PIN_Setup+0x8a0>
					GPIO_Pin_Init(GPIOA, USART2_CLK_Pin.PD7, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 8002a94:	2007      	movs	r0, #7
 8002a96:	2402      	movs	r4, #2
 8002a98:	2500      	movs	r5, #0
 8002a9a:	2302      	movs	r3, #2
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	2107      	movs	r1, #7
 8002aa0:	9102      	str	r1, [sp, #8]
 8002aa2:	9201      	str	r2, [sp, #4]
 8002aa4:	9300      	str	r3, [sp, #0]
 8002aa6:	462b      	mov	r3, r5
 8002aa8:	4622      	mov	r2, r4
 8002aaa:	4601      	mov	r1, r0
 8002aac:	4802      	ldr	r0, [pc, #8]	@ (8002ab8 <PIN_Setup+0x52c>)
 8002aae:	f7fe fd6b 	bl	8001588 <GPIO_Pin_Init>
}
 8002ab2:	e1bb      	b.n	8002e2c <PIN_Setup+0x8a0>
 8002ab4:	40020c00 	.word	0x40020c00
 8002ab8:	40020000 	.word	0x40020000
	else if(config->Port == USART3)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4aaa      	ldr	r2, [pc, #680]	@ (8002d6c <PIN_Setup+0x7e0>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	f040 81b2 	bne.w	8002e2c <PIN_Setup+0x8a0>
		if((config->mode == USART_Mode.Asynchronous) ||
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	7b1b      	ldrb	r3, [r3, #12]
 8002acc:	2201      	movs	r2, #1
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d00f      	beq.n	8002af2 <PIN_Setup+0x566>
		   (config->mode == USART_Mode.Synchronous) ||
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	7b1b      	ldrb	r3, [r3, #12]
 8002ad6:	2202      	movs	r2, #2
		if((config->mode == USART_Mode.Asynchronous) ||
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d00a      	beq.n	8002af2 <PIN_Setup+0x566>
		   (config->mode == USART_Mode.IrDA) ||
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	7b1b      	ldrb	r3, [r3, #12]
 8002ae0:	2204      	movs	r2, #4
		   (config->mode == USART_Mode.Synchronous) ||
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d005      	beq.n	8002af2 <PIN_Setup+0x566>
		   (config->mode == USART_Mode.LIN) )
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	7b1b      	ldrb	r3, [r3, #12]
 8002aea:	2205      	movs	r2, #5
		   (config->mode == USART_Mode.IrDA) ||
 8002aec:	4293      	cmp	r3, r2
 8002aee:	f040 8119 	bne.w	8002d24 <PIN_Setup+0x798>
			if(config->TX_Pin == USART3_TX_Pin.PB11)GPIO_Pin_Init(GPIOA, USART3_TX_Pin.PB11, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	7b5b      	ldrb	r3, [r3, #13]
 8002af6:	220b      	movs	r2, #11
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d10f      	bne.n	8002b1c <PIN_Setup+0x590>
 8002afc:	200b      	movs	r0, #11
 8002afe:	2402      	movs	r4, #2
 8002b00:	2500      	movs	r5, #0
 8002b02:	2302      	movs	r3, #2
 8002b04:	2200      	movs	r2, #0
 8002b06:	2107      	movs	r1, #7
 8002b08:	9102      	str	r1, [sp, #8]
 8002b0a:	9201      	str	r2, [sp, #4]
 8002b0c:	9300      	str	r3, [sp, #0]
 8002b0e:	462b      	mov	r3, r5
 8002b10:	4622      	mov	r2, r4
 8002b12:	4601      	mov	r1, r0
 8002b14:	4896      	ldr	r0, [pc, #600]	@ (8002d70 <PIN_Setup+0x7e4>)
 8002b16:	f7fe fd37 	bl	8001588 <GPIO_Pin_Init>
 8002b1a:	e028      	b.n	8002b6e <PIN_Setup+0x5e2>
			else if(config->TX_Pin == USART3_TX_Pin.PC10)GPIO_Pin_Init(GPIOB, USART3_TX_Pin.PC10, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	7b5b      	ldrb	r3, [r3, #13]
 8002b20:	220a      	movs	r2, #10
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d10f      	bne.n	8002b46 <PIN_Setup+0x5ba>
 8002b26:	200a      	movs	r0, #10
 8002b28:	2402      	movs	r4, #2
 8002b2a:	2500      	movs	r5, #0
 8002b2c:	2302      	movs	r3, #2
 8002b2e:	2200      	movs	r2, #0
 8002b30:	2107      	movs	r1, #7
 8002b32:	9102      	str	r1, [sp, #8]
 8002b34:	9201      	str	r2, [sp, #4]
 8002b36:	9300      	str	r3, [sp, #0]
 8002b38:	462b      	mov	r3, r5
 8002b3a:	4622      	mov	r2, r4
 8002b3c:	4601      	mov	r1, r0
 8002b3e:	488d      	ldr	r0, [pc, #564]	@ (8002d74 <PIN_Setup+0x7e8>)
 8002b40:	f7fe fd22 	bl	8001588 <GPIO_Pin_Init>
 8002b44:	e013      	b.n	8002b6e <PIN_Setup+0x5e2>
			else if(config->TX_Pin == USART3_TX_Pin.PD8)GPIO_Pin_Init(GPIOB, USART3_TX_Pin.PD8, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	7b5b      	ldrb	r3, [r3, #13]
 8002b4a:	2208      	movs	r2, #8
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d10e      	bne.n	8002b6e <PIN_Setup+0x5e2>
 8002b50:	2008      	movs	r0, #8
 8002b52:	2402      	movs	r4, #2
 8002b54:	2500      	movs	r5, #0
 8002b56:	2302      	movs	r3, #2
 8002b58:	2200      	movs	r2, #0
 8002b5a:	2107      	movs	r1, #7
 8002b5c:	9102      	str	r1, [sp, #8]
 8002b5e:	9201      	str	r2, [sp, #4]
 8002b60:	9300      	str	r3, [sp, #0]
 8002b62:	462b      	mov	r3, r5
 8002b64:	4622      	mov	r2, r4
 8002b66:	4601      	mov	r1, r0
 8002b68:	4882      	ldr	r0, [pc, #520]	@ (8002d74 <PIN_Setup+0x7e8>)
 8002b6a:	f7fe fd0d 	bl	8001588 <GPIO_Pin_Init>
			if(config->RX_Pin == USART3_RX_Pin.PB10)GPIO_Pin_Init(GPIOA, USART3_RX_Pin.PB10, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	7b9b      	ldrb	r3, [r3, #14]
 8002b72:	220a      	movs	r2, #10
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d10f      	bne.n	8002b98 <PIN_Setup+0x60c>
 8002b78:	200a      	movs	r0, #10
 8002b7a:	2402      	movs	r4, #2
 8002b7c:	2500      	movs	r5, #0
 8002b7e:	2302      	movs	r3, #2
 8002b80:	2200      	movs	r2, #0
 8002b82:	2107      	movs	r1, #7
 8002b84:	9102      	str	r1, [sp, #8]
 8002b86:	9201      	str	r2, [sp, #4]
 8002b88:	9300      	str	r3, [sp, #0]
 8002b8a:	462b      	mov	r3, r5
 8002b8c:	4622      	mov	r2, r4
 8002b8e:	4601      	mov	r1, r0
 8002b90:	4877      	ldr	r0, [pc, #476]	@ (8002d70 <PIN_Setup+0x7e4>)
 8002b92:	f7fe fcf9 	bl	8001588 <GPIO_Pin_Init>
 8002b96:	e028      	b.n	8002bea <PIN_Setup+0x65e>
			else if(config->RX_Pin == USART3_RX_Pin.PC11)GPIO_Pin_Init(GPIOB, USART3_RX_Pin.PC11, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	7b9b      	ldrb	r3, [r3, #14]
 8002b9c:	220b      	movs	r2, #11
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d10f      	bne.n	8002bc2 <PIN_Setup+0x636>
 8002ba2:	200b      	movs	r0, #11
 8002ba4:	2402      	movs	r4, #2
 8002ba6:	2500      	movs	r5, #0
 8002ba8:	2302      	movs	r3, #2
 8002baa:	2200      	movs	r2, #0
 8002bac:	2107      	movs	r1, #7
 8002bae:	9102      	str	r1, [sp, #8]
 8002bb0:	9201      	str	r2, [sp, #4]
 8002bb2:	9300      	str	r3, [sp, #0]
 8002bb4:	462b      	mov	r3, r5
 8002bb6:	4622      	mov	r2, r4
 8002bb8:	4601      	mov	r1, r0
 8002bba:	486e      	ldr	r0, [pc, #440]	@ (8002d74 <PIN_Setup+0x7e8>)
 8002bbc:	f7fe fce4 	bl	8001588 <GPIO_Pin_Init>
 8002bc0:	e013      	b.n	8002bea <PIN_Setup+0x65e>
			else if(config->TX_Pin == USART3_TX_Pin.PD8)GPIO_Pin_Init(GPIOB, USART3_TX_Pin.PD8, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	7b5b      	ldrb	r3, [r3, #13]
 8002bc6:	2208      	movs	r2, #8
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d10e      	bne.n	8002bea <PIN_Setup+0x65e>
 8002bcc:	2008      	movs	r0, #8
 8002bce:	2402      	movs	r4, #2
 8002bd0:	2500      	movs	r5, #0
 8002bd2:	2302      	movs	r3, #2
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	2107      	movs	r1, #7
 8002bd8:	9102      	str	r1, [sp, #8]
 8002bda:	9201      	str	r2, [sp, #4]
 8002bdc:	9300      	str	r3, [sp, #0]
 8002bde:	462b      	mov	r3, r5
 8002be0:	4622      	mov	r2, r4
 8002be2:	4601      	mov	r1, r0
 8002be4:	4863      	ldr	r0, [pc, #396]	@ (8002d74 <PIN_Setup+0x7e8>)
 8002be6:	f7fe fccf 	bl	8001588 <GPIO_Pin_Init>
			if((config->mode == USART_Mode.Synchronous))
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	7b1b      	ldrb	r3, [r3, #12]
 8002bee:	2202      	movs	r2, #2
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d128      	bne.n	8002c46 <PIN_Setup+0x6ba>
				if(config->CLK_Pin == USART3_CLK_Pin.PB12)GPIO_Pin_Init(GPIOB, USART3_CLK_Pin.PB12, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	7bdb      	ldrb	r3, [r3, #15]
 8002bf8:	220c      	movs	r2, #12
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d10f      	bne.n	8002c1e <PIN_Setup+0x692>
 8002bfe:	200c      	movs	r0, #12
 8002c00:	2402      	movs	r4, #2
 8002c02:	2500      	movs	r5, #0
 8002c04:	2302      	movs	r3, #2
 8002c06:	2200      	movs	r2, #0
 8002c08:	2107      	movs	r1, #7
 8002c0a:	9102      	str	r1, [sp, #8]
 8002c0c:	9201      	str	r2, [sp, #4]
 8002c0e:	9300      	str	r3, [sp, #0]
 8002c10:	462b      	mov	r3, r5
 8002c12:	4622      	mov	r2, r4
 8002c14:	4601      	mov	r1, r0
 8002c16:	4857      	ldr	r0, [pc, #348]	@ (8002d74 <PIN_Setup+0x7e8>)
 8002c18:	f7fe fcb6 	bl	8001588 <GPIO_Pin_Init>
 8002c1c:	e013      	b.n	8002c46 <PIN_Setup+0x6ba>
				else if(config->CLK_Pin == USART3_CLK_Pin.PD10)GPIO_Pin_Init(GPIOD, USART3_CLK_Pin.PD10, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	7bdb      	ldrb	r3, [r3, #15]
 8002c22:	220a      	movs	r2, #10
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d10e      	bne.n	8002c46 <PIN_Setup+0x6ba>
 8002c28:	200a      	movs	r0, #10
 8002c2a:	2402      	movs	r4, #2
 8002c2c:	2500      	movs	r5, #0
 8002c2e:	2302      	movs	r3, #2
 8002c30:	2200      	movs	r2, #0
 8002c32:	2107      	movs	r1, #7
 8002c34:	9102      	str	r1, [sp, #8]
 8002c36:	9201      	str	r2, [sp, #4]
 8002c38:	9300      	str	r3, [sp, #0]
 8002c3a:	462b      	mov	r3, r5
 8002c3c:	4622      	mov	r2, r4
 8002c3e:	4601      	mov	r1, r0
 8002c40:	484d      	ldr	r0, [pc, #308]	@ (8002d78 <PIN_Setup+0x7ec>)
 8002c42:	f7fe fca1 	bl	8001588 <GPIO_Pin_Init>
			if(config->hardware_flow != Hardware_Flow.Disable)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	7cdb      	ldrb	r3, [r3, #19]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	f000 80ec 	beq.w	8002e2a <PIN_Setup+0x89e>
				if((config->hardware_flow == Hardware_Flow.CTS_Enable) || (config->hardware_flow == Hardware_Flow.CTS_RTS_Enable))
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	7cdb      	ldrb	r3, [r3, #19]
 8002c56:	2201      	movs	r2, #1
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d004      	beq.n	8002c66 <PIN_Setup+0x6da>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	7cdb      	ldrb	r3, [r3, #19]
 8002c60:	2203      	movs	r2, #3
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d128      	bne.n	8002cb8 <PIN_Setup+0x72c>
					if(config->CLK_Pin == USART3_CTS_Pin.PB13)GPIO_Pin_Init(GPIOB, USART3_CTS_Pin.PB13, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	7bdb      	ldrb	r3, [r3, #15]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d10f      	bne.n	8002c90 <PIN_Setup+0x704>
 8002c70:	2000      	movs	r0, #0
 8002c72:	2402      	movs	r4, #2
 8002c74:	2500      	movs	r5, #0
 8002c76:	2302      	movs	r3, #2
 8002c78:	2200      	movs	r2, #0
 8002c7a:	2107      	movs	r1, #7
 8002c7c:	9102      	str	r1, [sp, #8]
 8002c7e:	9201      	str	r2, [sp, #4]
 8002c80:	9300      	str	r3, [sp, #0]
 8002c82:	462b      	mov	r3, r5
 8002c84:	4622      	mov	r2, r4
 8002c86:	4601      	mov	r1, r0
 8002c88:	483a      	ldr	r0, [pc, #232]	@ (8002d74 <PIN_Setup+0x7e8>)
 8002c8a:	f7fe fc7d 	bl	8001588 <GPIO_Pin_Init>
 8002c8e:	e013      	b.n	8002cb8 <PIN_Setup+0x72c>
					else if(config->CLK_Pin == USART3_CTS_Pin.PD11)GPIO_Pin_Init(GPIOD, USART3_CTS_Pin.PD11, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	7bdb      	ldrb	r3, [r3, #15]
 8002c94:	2203      	movs	r2, #3
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d10e      	bne.n	8002cb8 <PIN_Setup+0x72c>
 8002c9a:	2003      	movs	r0, #3
 8002c9c:	2402      	movs	r4, #2
 8002c9e:	2500      	movs	r5, #0
 8002ca0:	2302      	movs	r3, #2
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	2107      	movs	r1, #7
 8002ca6:	9102      	str	r1, [sp, #8]
 8002ca8:	9201      	str	r2, [sp, #4]
 8002caa:	9300      	str	r3, [sp, #0]
 8002cac:	462b      	mov	r3, r5
 8002cae:	4622      	mov	r2, r4
 8002cb0:	4601      	mov	r1, r0
 8002cb2:	4831      	ldr	r0, [pc, #196]	@ (8002d78 <PIN_Setup+0x7ec>)
 8002cb4:	f7fe fc68 	bl	8001588 <GPIO_Pin_Init>
				if((config->hardware_flow == Hardware_Flow.RTS_Enable) || (config->hardware_flow == Hardware_Flow.CTS_RTS_Enable))
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	7cdb      	ldrb	r3, [r3, #19]
 8002cbc:	2202      	movs	r2, #2
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d005      	beq.n	8002cce <PIN_Setup+0x742>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	7cdb      	ldrb	r3, [r3, #19]
 8002cc6:	2203      	movs	r2, #3
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	f040 80ae 	bne.w	8002e2a <PIN_Setup+0x89e>
					if(config->CLK_Pin == USART3_RTS_Pin.PB14)GPIO_Pin_Init(GPIOB, USART3_RTS_Pin.PB14, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	7bdb      	ldrb	r3, [r3, #15]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d10f      	bne.n	8002cf8 <PIN_Setup+0x76c>
 8002cd8:	2001      	movs	r0, #1
 8002cda:	2402      	movs	r4, #2
 8002cdc:	2500      	movs	r5, #0
 8002cde:	2302      	movs	r3, #2
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	2107      	movs	r1, #7
 8002ce4:	9102      	str	r1, [sp, #8]
 8002ce6:	9201      	str	r2, [sp, #4]
 8002ce8:	9300      	str	r3, [sp, #0]
 8002cea:	462b      	mov	r3, r5
 8002cec:	4622      	mov	r2, r4
 8002cee:	4601      	mov	r1, r0
 8002cf0:	4820      	ldr	r0, [pc, #128]	@ (8002d74 <PIN_Setup+0x7e8>)
 8002cf2:	f7fe fc49 	bl	8001588 <GPIO_Pin_Init>
			if(config->hardware_flow != Hardware_Flow.Disable)
 8002cf6:	e098      	b.n	8002e2a <PIN_Setup+0x89e>
					else if(config->CLK_Pin == USART3_RTS_Pin.PD12)GPIO_Pin_Init(GPIOD, USART3_RTS_Pin.PD12, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	7bdb      	ldrb	r3, [r3, #15]
 8002cfc:	2204      	movs	r2, #4
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	f040 8093 	bne.w	8002e2a <PIN_Setup+0x89e>
 8002d04:	2004      	movs	r0, #4
 8002d06:	2402      	movs	r4, #2
 8002d08:	2500      	movs	r5, #0
 8002d0a:	2302      	movs	r3, #2
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	2107      	movs	r1, #7
 8002d10:	9102      	str	r1, [sp, #8]
 8002d12:	9201      	str	r2, [sp, #4]
 8002d14:	9300      	str	r3, [sp, #0]
 8002d16:	462b      	mov	r3, r5
 8002d18:	4622      	mov	r2, r4
 8002d1a:	4601      	mov	r1, r0
 8002d1c:	4816      	ldr	r0, [pc, #88]	@ (8002d78 <PIN_Setup+0x7ec>)
 8002d1e:	f7fe fc33 	bl	8001588 <GPIO_Pin_Init>
			if(config->hardware_flow != Hardware_Flow.Disable)
 8002d22:	e082      	b.n	8002e2a <PIN_Setup+0x89e>
		else if((config->mode == USART_Mode.SmartCard) ||
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	7b1b      	ldrb	r3, [r3, #12]
 8002d28:	2206      	movs	r2, #6
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d009      	beq.n	8002d42 <PIN_Setup+0x7b6>
		   (config->mode == USART_Mode.SmartCard_Clock) ||
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	7b1b      	ldrb	r3, [r3, #12]
 8002d32:	2207      	movs	r2, #7
		else if((config->mode == USART_Mode.SmartCard) ||
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d004      	beq.n	8002d42 <PIN_Setup+0x7b6>
		   (config->mode == USART_Mode.Single_Wire_Half_Duplex) )
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	7b1b      	ldrb	r3, [r3, #12]
 8002d3c:	2203      	movs	r2, #3
		   (config->mode == USART_Mode.SmartCard_Clock) ||
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d174      	bne.n	8002e2c <PIN_Setup+0x8a0>
			if(config->TX_Pin == USART3_TX_Pin.PB11)GPIO_Pin_Init(GPIOA, USART3_TX_Pin.PB11, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	7b5b      	ldrb	r3, [r3, #13]
 8002d46:	220b      	movs	r2, #11
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d117      	bne.n	8002d7c <PIN_Setup+0x7f0>
 8002d4c:	200b      	movs	r0, #11
 8002d4e:	2402      	movs	r4, #2
 8002d50:	2500      	movs	r5, #0
 8002d52:	2302      	movs	r3, #2
 8002d54:	2200      	movs	r2, #0
 8002d56:	2107      	movs	r1, #7
 8002d58:	9102      	str	r1, [sp, #8]
 8002d5a:	9201      	str	r2, [sp, #4]
 8002d5c:	9300      	str	r3, [sp, #0]
 8002d5e:	462b      	mov	r3, r5
 8002d60:	4622      	mov	r2, r4
 8002d62:	4601      	mov	r1, r0
 8002d64:	4802      	ldr	r0, [pc, #8]	@ (8002d70 <PIN_Setup+0x7e4>)
 8002d66:	f7fe fc0f 	bl	8001588 <GPIO_Pin_Init>
 8002d6a:	e030      	b.n	8002dce <PIN_Setup+0x842>
 8002d6c:	40004800 	.word	0x40004800
 8002d70:	40020000 	.word	0x40020000
 8002d74:	40020400 	.word	0x40020400
 8002d78:	40020c00 	.word	0x40020c00
			else if(config->TX_Pin == USART3_TX_Pin.PC10)GPIO_Pin_Init(GPIOB, USART3_TX_Pin.PC10, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	7b5b      	ldrb	r3, [r3, #13]
 8002d80:	220a      	movs	r2, #10
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d10f      	bne.n	8002da6 <PIN_Setup+0x81a>
 8002d86:	200a      	movs	r0, #10
 8002d88:	2402      	movs	r4, #2
 8002d8a:	2500      	movs	r5, #0
 8002d8c:	2302      	movs	r3, #2
 8002d8e:	2200      	movs	r2, #0
 8002d90:	2107      	movs	r1, #7
 8002d92:	9102      	str	r1, [sp, #8]
 8002d94:	9201      	str	r2, [sp, #4]
 8002d96:	9300      	str	r3, [sp, #0]
 8002d98:	462b      	mov	r3, r5
 8002d9a:	4622      	mov	r2, r4
 8002d9c:	4601      	mov	r1, r0
 8002d9e:	4825      	ldr	r0, [pc, #148]	@ (8002e34 <PIN_Setup+0x8a8>)
 8002da0:	f7fe fbf2 	bl	8001588 <GPIO_Pin_Init>
 8002da4:	e013      	b.n	8002dce <PIN_Setup+0x842>
			else if(config->TX_Pin == USART3_TX_Pin.PD8)GPIO_Pin_Init(GPIOB, USART3_TX_Pin.PD8, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	7b5b      	ldrb	r3, [r3, #13]
 8002daa:	2208      	movs	r2, #8
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d10e      	bne.n	8002dce <PIN_Setup+0x842>
 8002db0:	2008      	movs	r0, #8
 8002db2:	2402      	movs	r4, #2
 8002db4:	2500      	movs	r5, #0
 8002db6:	2302      	movs	r3, #2
 8002db8:	2200      	movs	r2, #0
 8002dba:	2107      	movs	r1, #7
 8002dbc:	9102      	str	r1, [sp, #8]
 8002dbe:	9201      	str	r2, [sp, #4]
 8002dc0:	9300      	str	r3, [sp, #0]
 8002dc2:	462b      	mov	r3, r5
 8002dc4:	4622      	mov	r2, r4
 8002dc6:	4601      	mov	r1, r0
 8002dc8:	481a      	ldr	r0, [pc, #104]	@ (8002e34 <PIN_Setup+0x8a8>)
 8002dca:	f7fe fbdd 	bl	8001588 <GPIO_Pin_Init>
			if(config->CLK_Pin == USART3_CLK_Pin.PB12)GPIO_Pin_Init(GPIOB, USART3_CLK_Pin.PB12, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	7bdb      	ldrb	r3, [r3, #15]
 8002dd2:	220c      	movs	r2, #12
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d10f      	bne.n	8002df8 <PIN_Setup+0x86c>
 8002dd8:	200c      	movs	r0, #12
 8002dda:	2402      	movs	r4, #2
 8002ddc:	2500      	movs	r5, #0
 8002dde:	2302      	movs	r3, #2
 8002de0:	2200      	movs	r2, #0
 8002de2:	2107      	movs	r1, #7
 8002de4:	9102      	str	r1, [sp, #8]
 8002de6:	9201      	str	r2, [sp, #4]
 8002de8:	9300      	str	r3, [sp, #0]
 8002dea:	462b      	mov	r3, r5
 8002dec:	4622      	mov	r2, r4
 8002dee:	4601      	mov	r1, r0
 8002df0:	4810      	ldr	r0, [pc, #64]	@ (8002e34 <PIN_Setup+0x8a8>)
 8002df2:	f7fe fbc9 	bl	8001588 <GPIO_Pin_Init>
}
 8002df6:	e019      	b.n	8002e2c <PIN_Setup+0x8a0>
			else if(config->CLK_Pin == USART3_CLK_Pin.PD10)GPIO_Pin_Init(GPIOD, USART3_CLK_Pin.PD10, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	7bdb      	ldrb	r3, [r3, #15]
 8002dfc:	220a      	movs	r2, #10
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d114      	bne.n	8002e2c <PIN_Setup+0x8a0>
 8002e02:	200a      	movs	r0, #10
 8002e04:	2402      	movs	r4, #2
 8002e06:	2500      	movs	r5, #0
 8002e08:	2302      	movs	r3, #2
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	2107      	movs	r1, #7
 8002e0e:	9102      	str	r1, [sp, #8]
 8002e10:	9201      	str	r2, [sp, #4]
 8002e12:	9300      	str	r3, [sp, #0]
 8002e14:	462b      	mov	r3, r5
 8002e16:	4622      	mov	r2, r4
 8002e18:	4601      	mov	r1, r0
 8002e1a:	4807      	ldr	r0, [pc, #28]	@ (8002e38 <PIN_Setup+0x8ac>)
 8002e1c:	f7fe fbb4 	bl	8001588 <GPIO_Pin_Init>
}
 8002e20:	e004      	b.n	8002e2c <PIN_Setup+0x8a0>
			if(config->hardware_flow != Hardware_Flow.Disable)
 8002e22:	bf00      	nop
 8002e24:	e002      	b.n	8002e2c <PIN_Setup+0x8a0>
			if((config->hardware_flow != Hardware_Flow.Disable) || (config->hardware_flow == Hardware_Flow.CTS_RTS_Enable))
 8002e26:	bf00      	nop
 8002e28:	e000      	b.n	8002e2c <PIN_Setup+0x8a0>
			if(config->hardware_flow != Hardware_Flow.Disable)
 8002e2a:	bf00      	nop
}
 8002e2c:	bf00      	nop
 8002e2e:	3708      	adds	r7, #8
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bdb0      	pop	{r4, r5, r7, pc}
 8002e34:	40020400 	.word	0x40020400
 8002e38:	40020c00 	.word	0x40020c00
 8002e3c:	00000000 	.word	0x00000000

08002e40 <USART_Init>:

int8_t USART_Init(USART_Config *config)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b08a      	sub	sp, #40	@ 0x28
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
	USART_Clock_Enable(config);
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	f7ff fafb 	bl	8002444 <USART_Clock_Enable>
	PIN_Setup(config);
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f7ff fb9c 	bl	800258c <PIN_Setup>

//	USART1 -> CR1 |= USART_CR1_UE;

	double brr = (168000000.0/ (16.0 * 2.0 * (double)(config->baudrate)));
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f7fd fb63 	bl	8000524 <__aeabi_ui2d>
 8002e5e:	f04f 0200 	mov.w	r2, #0
 8002e62:	4b4d      	ldr	r3, [pc, #308]	@ (8002f98 <USART_Init+0x158>)
 8002e64:	f7fd fbd8 	bl	8000618 <__aeabi_dmul>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	460b      	mov	r3, r1
 8002e6c:	a148      	add	r1, pc, #288	@ (adr r1, 8002f90 <USART_Init+0x150>)
 8002e6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002e72:	f7fd fcfb 	bl	800086c <__aeabi_ddiv>
 8002e76:	4602      	mov	r2, r0
 8002e78:	460b      	mov	r3, r1
 8002e7a:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double div_frac, mantissa;
	separateFractionAndIntegral(brr, &div_frac, &mantissa);
 8002e7e:	f107 0208 	add.w	r2, r7, #8
 8002e82:	f107 0310 	add.w	r3, r7, #16
 8002e86:	4611      	mov	r1, r2
 8002e88:	4618      	mov	r0, r3
 8002e8a:	ed97 0b08 	vldr	d0, [r7, #32]
 8002e8e:	f7ff fa92 	bl	80023b6 <separateFractionAndIntegral>

	int div_frac_1 = (int)(ceil(div_frac*16.0));
 8002e92:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002e96:	f04f 0200 	mov.w	r2, #0
 8002e9a:	4b40      	ldr	r3, [pc, #256]	@ (8002f9c <USART_Init+0x15c>)
 8002e9c:	f7fd fbbc 	bl	8000618 <__aeabi_dmul>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	460b      	mov	r3, r1
 8002ea4:	ec43 2b17 	vmov	d7, r2, r3
 8002ea8:	eeb0 0a47 	vmov.f32	s0, s14
 8002eac:	eef0 0a67 	vmov.f32	s1, s15
 8002eb0:	f002 febe 	bl	8005c30 <ceil>
 8002eb4:	ec53 2b10 	vmov	r2, r3, d0
 8002eb8:	4610      	mov	r0, r2
 8002eba:	4619      	mov	r1, r3
 8002ebc:	f7fd fe5c 	bl	8000b78 <__aeabi_d2iz>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	61fb      	str	r3, [r7, #28]
	int mantissa_1 = (int)(ceil(mantissa));
 8002ec4:	ed97 7b02 	vldr	d7, [r7, #8]
 8002ec8:	eeb0 0a47 	vmov.f32	s0, s14
 8002ecc:	eef0 0a67 	vmov.f32	s1, s15
 8002ed0:	f002 feae 	bl	8005c30 <ceil>
 8002ed4:	ec53 2b10 	vmov	r2, r3, d0
 8002ed8:	4610      	mov	r0, r2
 8002eda:	4619      	mov	r1, r3
 8002edc:	f7fd fe4c 	bl	8000b78 <__aeabi_d2iz>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	61bb      	str	r3, [r7, #24]

	config->Port-> CR1 |= USART_CR1_UE;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	68da      	ldr	r2, [r3, #12]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002ef2:	60da      	str	r2, [r3, #12]
	config->Port->BRR = (mantissa_1<<4)|(div_frac_1);
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	011a      	lsls	r2, r3, #4
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	431a      	orrs	r2, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	609a      	str	r2, [r3, #8]
	config->Port->CR1 |= config->parity; //Parity
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	68da      	ldr	r2, [r3, #12]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	7d9b      	ldrb	r3, [r3, #22]
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	430a      	orrs	r2, r1
 8002f14:	60da      	str	r2, [r3, #12]
	config->Port->CR1 |= config->interrupt; //interrupt
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	68da      	ldr	r2, [r3, #12]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	7c9b      	ldrb	r3, [r3, #18]
 8002f20:	4619      	mov	r1, r3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	430a      	orrs	r2, r1
 8002f28:	60da      	str	r2, [r3, #12]
	config->Port->CR2 |= config->stop_bits;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	691a      	ldr	r2, [r3, #16]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	7d1b      	ldrb	r3, [r3, #20]
 8002f34:	4619      	mov	r1, r3
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	430a      	orrs	r2, r1
 8002f3c:	611a      	str	r2, [r3, #16]

	if(config->mode == USART_Mode.Single_Wire_Half_Duplex) config -> Port -> CR3 |= USART_CR3_HDSEL;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	7b1b      	ldrb	r3, [r3, #12]
 8002f42:	2203      	movs	r2, #3
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d107      	bne.n	8002f58 <USART_Init+0x118>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	695a      	ldr	r2, [r3, #20]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f042 0208 	orr.w	r2, r2, #8
 8002f56:	615a      	str	r2, [r3, #20]
	if(config->mode == USART_Mode.LIN) config -> Port -> CR2 |= USART_CR2_LINEN;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	7b1b      	ldrb	r3, [r3, #12]
 8002f5c:	2205      	movs	r2, #5
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d107      	bne.n	8002f72 <USART_Init+0x132>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	691a      	ldr	r2, [r3, #16]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002f70:	611a      	str	r2, [r3, #16]


	config->Port->CR1 |= USART_CR1_RE | USART_CR1_TE  ;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	68da      	ldr	r2, [r3, #12]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f042 020c 	orr.w	r2, r2, #12
 8002f80:	60da      	str	r2, [r3, #12]

	return 1;
 8002f82:	2301      	movs	r3, #1
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3728      	adds	r7, #40	@ 0x28
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}
 8002f8c:	f3af 8000 	nop.w
 8002f90:	00000000 	.word	0x00000000
 8002f94:	41a406f4 	.word	0x41a406f4
 8002f98:	40400000 	.word	0x40400000
 8002f9c:	40300000 	.word	0x40300000

08002fa0 <__cvt>:
 8002fa0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002fa4:	ec57 6b10 	vmov	r6, r7, d0
 8002fa8:	2f00      	cmp	r7, #0
 8002faa:	460c      	mov	r4, r1
 8002fac:	4619      	mov	r1, r3
 8002fae:	463b      	mov	r3, r7
 8002fb0:	bfbb      	ittet	lt
 8002fb2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8002fb6:	461f      	movlt	r7, r3
 8002fb8:	2300      	movge	r3, #0
 8002fba:	232d      	movlt	r3, #45	@ 0x2d
 8002fbc:	700b      	strb	r3, [r1, #0]
 8002fbe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8002fc0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8002fc4:	4691      	mov	r9, r2
 8002fc6:	f023 0820 	bic.w	r8, r3, #32
 8002fca:	bfbc      	itt	lt
 8002fcc:	4632      	movlt	r2, r6
 8002fce:	4616      	movlt	r6, r2
 8002fd0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8002fd4:	d005      	beq.n	8002fe2 <__cvt+0x42>
 8002fd6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8002fda:	d100      	bne.n	8002fde <__cvt+0x3e>
 8002fdc:	3401      	adds	r4, #1
 8002fde:	2102      	movs	r1, #2
 8002fe0:	e000      	b.n	8002fe4 <__cvt+0x44>
 8002fe2:	2103      	movs	r1, #3
 8002fe4:	ab03      	add	r3, sp, #12
 8002fe6:	9301      	str	r3, [sp, #4]
 8002fe8:	ab02      	add	r3, sp, #8
 8002fea:	9300      	str	r3, [sp, #0]
 8002fec:	ec47 6b10 	vmov	d0, r6, r7
 8002ff0:	4653      	mov	r3, sl
 8002ff2:	4622      	mov	r2, r4
 8002ff4:	f000 fe5c 	bl	8003cb0 <_dtoa_r>
 8002ff8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8002ffc:	4605      	mov	r5, r0
 8002ffe:	d119      	bne.n	8003034 <__cvt+0x94>
 8003000:	f019 0f01 	tst.w	r9, #1
 8003004:	d00e      	beq.n	8003024 <__cvt+0x84>
 8003006:	eb00 0904 	add.w	r9, r0, r4
 800300a:	2200      	movs	r2, #0
 800300c:	2300      	movs	r3, #0
 800300e:	4630      	mov	r0, r6
 8003010:	4639      	mov	r1, r7
 8003012:	f7fd fd69 	bl	8000ae8 <__aeabi_dcmpeq>
 8003016:	b108      	cbz	r0, 800301c <__cvt+0x7c>
 8003018:	f8cd 900c 	str.w	r9, [sp, #12]
 800301c:	2230      	movs	r2, #48	@ 0x30
 800301e:	9b03      	ldr	r3, [sp, #12]
 8003020:	454b      	cmp	r3, r9
 8003022:	d31e      	bcc.n	8003062 <__cvt+0xc2>
 8003024:	9b03      	ldr	r3, [sp, #12]
 8003026:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003028:	1b5b      	subs	r3, r3, r5
 800302a:	4628      	mov	r0, r5
 800302c:	6013      	str	r3, [r2, #0]
 800302e:	b004      	add	sp, #16
 8003030:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003034:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003038:	eb00 0904 	add.w	r9, r0, r4
 800303c:	d1e5      	bne.n	800300a <__cvt+0x6a>
 800303e:	7803      	ldrb	r3, [r0, #0]
 8003040:	2b30      	cmp	r3, #48	@ 0x30
 8003042:	d10a      	bne.n	800305a <__cvt+0xba>
 8003044:	2200      	movs	r2, #0
 8003046:	2300      	movs	r3, #0
 8003048:	4630      	mov	r0, r6
 800304a:	4639      	mov	r1, r7
 800304c:	f7fd fd4c 	bl	8000ae8 <__aeabi_dcmpeq>
 8003050:	b918      	cbnz	r0, 800305a <__cvt+0xba>
 8003052:	f1c4 0401 	rsb	r4, r4, #1
 8003056:	f8ca 4000 	str.w	r4, [sl]
 800305a:	f8da 3000 	ldr.w	r3, [sl]
 800305e:	4499      	add	r9, r3
 8003060:	e7d3      	b.n	800300a <__cvt+0x6a>
 8003062:	1c59      	adds	r1, r3, #1
 8003064:	9103      	str	r1, [sp, #12]
 8003066:	701a      	strb	r2, [r3, #0]
 8003068:	e7d9      	b.n	800301e <__cvt+0x7e>

0800306a <__exponent>:
 800306a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800306c:	2900      	cmp	r1, #0
 800306e:	bfba      	itte	lt
 8003070:	4249      	neglt	r1, r1
 8003072:	232d      	movlt	r3, #45	@ 0x2d
 8003074:	232b      	movge	r3, #43	@ 0x2b
 8003076:	2909      	cmp	r1, #9
 8003078:	7002      	strb	r2, [r0, #0]
 800307a:	7043      	strb	r3, [r0, #1]
 800307c:	dd29      	ble.n	80030d2 <__exponent+0x68>
 800307e:	f10d 0307 	add.w	r3, sp, #7
 8003082:	461d      	mov	r5, r3
 8003084:	270a      	movs	r7, #10
 8003086:	461a      	mov	r2, r3
 8003088:	fbb1 f6f7 	udiv	r6, r1, r7
 800308c:	fb07 1416 	mls	r4, r7, r6, r1
 8003090:	3430      	adds	r4, #48	@ 0x30
 8003092:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003096:	460c      	mov	r4, r1
 8003098:	2c63      	cmp	r4, #99	@ 0x63
 800309a:	f103 33ff 	add.w	r3, r3, #4294967295
 800309e:	4631      	mov	r1, r6
 80030a0:	dcf1      	bgt.n	8003086 <__exponent+0x1c>
 80030a2:	3130      	adds	r1, #48	@ 0x30
 80030a4:	1e94      	subs	r4, r2, #2
 80030a6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80030aa:	1c41      	adds	r1, r0, #1
 80030ac:	4623      	mov	r3, r4
 80030ae:	42ab      	cmp	r3, r5
 80030b0:	d30a      	bcc.n	80030c8 <__exponent+0x5e>
 80030b2:	f10d 0309 	add.w	r3, sp, #9
 80030b6:	1a9b      	subs	r3, r3, r2
 80030b8:	42ac      	cmp	r4, r5
 80030ba:	bf88      	it	hi
 80030bc:	2300      	movhi	r3, #0
 80030be:	3302      	adds	r3, #2
 80030c0:	4403      	add	r3, r0
 80030c2:	1a18      	subs	r0, r3, r0
 80030c4:	b003      	add	sp, #12
 80030c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030c8:	f813 6b01 	ldrb.w	r6, [r3], #1
 80030cc:	f801 6f01 	strb.w	r6, [r1, #1]!
 80030d0:	e7ed      	b.n	80030ae <__exponent+0x44>
 80030d2:	2330      	movs	r3, #48	@ 0x30
 80030d4:	3130      	adds	r1, #48	@ 0x30
 80030d6:	7083      	strb	r3, [r0, #2]
 80030d8:	70c1      	strb	r1, [r0, #3]
 80030da:	1d03      	adds	r3, r0, #4
 80030dc:	e7f1      	b.n	80030c2 <__exponent+0x58>
	...

080030e0 <_printf_float>:
 80030e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030e4:	b08d      	sub	sp, #52	@ 0x34
 80030e6:	460c      	mov	r4, r1
 80030e8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80030ec:	4616      	mov	r6, r2
 80030ee:	461f      	mov	r7, r3
 80030f0:	4605      	mov	r5, r0
 80030f2:	f000 fcdb 	bl	8003aac <_localeconv_r>
 80030f6:	6803      	ldr	r3, [r0, #0]
 80030f8:	9304      	str	r3, [sp, #16]
 80030fa:	4618      	mov	r0, r3
 80030fc:	f7fd f8c8 	bl	8000290 <strlen>
 8003100:	2300      	movs	r3, #0
 8003102:	930a      	str	r3, [sp, #40]	@ 0x28
 8003104:	f8d8 3000 	ldr.w	r3, [r8]
 8003108:	9005      	str	r0, [sp, #20]
 800310a:	3307      	adds	r3, #7
 800310c:	f023 0307 	bic.w	r3, r3, #7
 8003110:	f103 0208 	add.w	r2, r3, #8
 8003114:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003118:	f8d4 b000 	ldr.w	fp, [r4]
 800311c:	f8c8 2000 	str.w	r2, [r8]
 8003120:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003124:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003128:	9307      	str	r3, [sp, #28]
 800312a:	f8cd 8018 	str.w	r8, [sp, #24]
 800312e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8003132:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003136:	4b9c      	ldr	r3, [pc, #624]	@ (80033a8 <_printf_float+0x2c8>)
 8003138:	f04f 32ff 	mov.w	r2, #4294967295
 800313c:	f7fd fd06 	bl	8000b4c <__aeabi_dcmpun>
 8003140:	bb70      	cbnz	r0, 80031a0 <_printf_float+0xc0>
 8003142:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003146:	4b98      	ldr	r3, [pc, #608]	@ (80033a8 <_printf_float+0x2c8>)
 8003148:	f04f 32ff 	mov.w	r2, #4294967295
 800314c:	f7fd fce0 	bl	8000b10 <__aeabi_dcmple>
 8003150:	bb30      	cbnz	r0, 80031a0 <_printf_float+0xc0>
 8003152:	2200      	movs	r2, #0
 8003154:	2300      	movs	r3, #0
 8003156:	4640      	mov	r0, r8
 8003158:	4649      	mov	r1, r9
 800315a:	f7fd fccf 	bl	8000afc <__aeabi_dcmplt>
 800315e:	b110      	cbz	r0, 8003166 <_printf_float+0x86>
 8003160:	232d      	movs	r3, #45	@ 0x2d
 8003162:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003166:	4a91      	ldr	r2, [pc, #580]	@ (80033ac <_printf_float+0x2cc>)
 8003168:	4b91      	ldr	r3, [pc, #580]	@ (80033b0 <_printf_float+0x2d0>)
 800316a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800316e:	bf94      	ite	ls
 8003170:	4690      	movls	r8, r2
 8003172:	4698      	movhi	r8, r3
 8003174:	2303      	movs	r3, #3
 8003176:	6123      	str	r3, [r4, #16]
 8003178:	f02b 0304 	bic.w	r3, fp, #4
 800317c:	6023      	str	r3, [r4, #0]
 800317e:	f04f 0900 	mov.w	r9, #0
 8003182:	9700      	str	r7, [sp, #0]
 8003184:	4633      	mov	r3, r6
 8003186:	aa0b      	add	r2, sp, #44	@ 0x2c
 8003188:	4621      	mov	r1, r4
 800318a:	4628      	mov	r0, r5
 800318c:	f000 f9d2 	bl	8003534 <_printf_common>
 8003190:	3001      	adds	r0, #1
 8003192:	f040 808d 	bne.w	80032b0 <_printf_float+0x1d0>
 8003196:	f04f 30ff 	mov.w	r0, #4294967295
 800319a:	b00d      	add	sp, #52	@ 0x34
 800319c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031a0:	4642      	mov	r2, r8
 80031a2:	464b      	mov	r3, r9
 80031a4:	4640      	mov	r0, r8
 80031a6:	4649      	mov	r1, r9
 80031a8:	f7fd fcd0 	bl	8000b4c <__aeabi_dcmpun>
 80031ac:	b140      	cbz	r0, 80031c0 <_printf_float+0xe0>
 80031ae:	464b      	mov	r3, r9
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	bfbc      	itt	lt
 80031b4:	232d      	movlt	r3, #45	@ 0x2d
 80031b6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80031ba:	4a7e      	ldr	r2, [pc, #504]	@ (80033b4 <_printf_float+0x2d4>)
 80031bc:	4b7e      	ldr	r3, [pc, #504]	@ (80033b8 <_printf_float+0x2d8>)
 80031be:	e7d4      	b.n	800316a <_printf_float+0x8a>
 80031c0:	6863      	ldr	r3, [r4, #4]
 80031c2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80031c6:	9206      	str	r2, [sp, #24]
 80031c8:	1c5a      	adds	r2, r3, #1
 80031ca:	d13b      	bne.n	8003244 <_printf_float+0x164>
 80031cc:	2306      	movs	r3, #6
 80031ce:	6063      	str	r3, [r4, #4]
 80031d0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80031d4:	2300      	movs	r3, #0
 80031d6:	6022      	str	r2, [r4, #0]
 80031d8:	9303      	str	r3, [sp, #12]
 80031da:	ab0a      	add	r3, sp, #40	@ 0x28
 80031dc:	e9cd a301 	strd	sl, r3, [sp, #4]
 80031e0:	ab09      	add	r3, sp, #36	@ 0x24
 80031e2:	9300      	str	r3, [sp, #0]
 80031e4:	6861      	ldr	r1, [r4, #4]
 80031e6:	ec49 8b10 	vmov	d0, r8, r9
 80031ea:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80031ee:	4628      	mov	r0, r5
 80031f0:	f7ff fed6 	bl	8002fa0 <__cvt>
 80031f4:	9b06      	ldr	r3, [sp, #24]
 80031f6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80031f8:	2b47      	cmp	r3, #71	@ 0x47
 80031fa:	4680      	mov	r8, r0
 80031fc:	d129      	bne.n	8003252 <_printf_float+0x172>
 80031fe:	1cc8      	adds	r0, r1, #3
 8003200:	db02      	blt.n	8003208 <_printf_float+0x128>
 8003202:	6863      	ldr	r3, [r4, #4]
 8003204:	4299      	cmp	r1, r3
 8003206:	dd41      	ble.n	800328c <_printf_float+0x1ac>
 8003208:	f1aa 0a02 	sub.w	sl, sl, #2
 800320c:	fa5f fa8a 	uxtb.w	sl, sl
 8003210:	3901      	subs	r1, #1
 8003212:	4652      	mov	r2, sl
 8003214:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003218:	9109      	str	r1, [sp, #36]	@ 0x24
 800321a:	f7ff ff26 	bl	800306a <__exponent>
 800321e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003220:	1813      	adds	r3, r2, r0
 8003222:	2a01      	cmp	r2, #1
 8003224:	4681      	mov	r9, r0
 8003226:	6123      	str	r3, [r4, #16]
 8003228:	dc02      	bgt.n	8003230 <_printf_float+0x150>
 800322a:	6822      	ldr	r2, [r4, #0]
 800322c:	07d2      	lsls	r2, r2, #31
 800322e:	d501      	bpl.n	8003234 <_printf_float+0x154>
 8003230:	3301      	adds	r3, #1
 8003232:	6123      	str	r3, [r4, #16]
 8003234:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8003238:	2b00      	cmp	r3, #0
 800323a:	d0a2      	beq.n	8003182 <_printf_float+0xa2>
 800323c:	232d      	movs	r3, #45	@ 0x2d
 800323e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003242:	e79e      	b.n	8003182 <_printf_float+0xa2>
 8003244:	9a06      	ldr	r2, [sp, #24]
 8003246:	2a47      	cmp	r2, #71	@ 0x47
 8003248:	d1c2      	bne.n	80031d0 <_printf_float+0xf0>
 800324a:	2b00      	cmp	r3, #0
 800324c:	d1c0      	bne.n	80031d0 <_printf_float+0xf0>
 800324e:	2301      	movs	r3, #1
 8003250:	e7bd      	b.n	80031ce <_printf_float+0xee>
 8003252:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003256:	d9db      	bls.n	8003210 <_printf_float+0x130>
 8003258:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800325c:	d118      	bne.n	8003290 <_printf_float+0x1b0>
 800325e:	2900      	cmp	r1, #0
 8003260:	6863      	ldr	r3, [r4, #4]
 8003262:	dd0b      	ble.n	800327c <_printf_float+0x19c>
 8003264:	6121      	str	r1, [r4, #16]
 8003266:	b913      	cbnz	r3, 800326e <_printf_float+0x18e>
 8003268:	6822      	ldr	r2, [r4, #0]
 800326a:	07d0      	lsls	r0, r2, #31
 800326c:	d502      	bpl.n	8003274 <_printf_float+0x194>
 800326e:	3301      	adds	r3, #1
 8003270:	440b      	add	r3, r1
 8003272:	6123      	str	r3, [r4, #16]
 8003274:	65a1      	str	r1, [r4, #88]	@ 0x58
 8003276:	f04f 0900 	mov.w	r9, #0
 800327a:	e7db      	b.n	8003234 <_printf_float+0x154>
 800327c:	b913      	cbnz	r3, 8003284 <_printf_float+0x1a4>
 800327e:	6822      	ldr	r2, [r4, #0]
 8003280:	07d2      	lsls	r2, r2, #31
 8003282:	d501      	bpl.n	8003288 <_printf_float+0x1a8>
 8003284:	3302      	adds	r3, #2
 8003286:	e7f4      	b.n	8003272 <_printf_float+0x192>
 8003288:	2301      	movs	r3, #1
 800328a:	e7f2      	b.n	8003272 <_printf_float+0x192>
 800328c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8003290:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003292:	4299      	cmp	r1, r3
 8003294:	db05      	blt.n	80032a2 <_printf_float+0x1c2>
 8003296:	6823      	ldr	r3, [r4, #0]
 8003298:	6121      	str	r1, [r4, #16]
 800329a:	07d8      	lsls	r0, r3, #31
 800329c:	d5ea      	bpl.n	8003274 <_printf_float+0x194>
 800329e:	1c4b      	adds	r3, r1, #1
 80032a0:	e7e7      	b.n	8003272 <_printf_float+0x192>
 80032a2:	2900      	cmp	r1, #0
 80032a4:	bfd4      	ite	le
 80032a6:	f1c1 0202 	rsble	r2, r1, #2
 80032aa:	2201      	movgt	r2, #1
 80032ac:	4413      	add	r3, r2
 80032ae:	e7e0      	b.n	8003272 <_printf_float+0x192>
 80032b0:	6823      	ldr	r3, [r4, #0]
 80032b2:	055a      	lsls	r2, r3, #21
 80032b4:	d407      	bmi.n	80032c6 <_printf_float+0x1e6>
 80032b6:	6923      	ldr	r3, [r4, #16]
 80032b8:	4642      	mov	r2, r8
 80032ba:	4631      	mov	r1, r6
 80032bc:	4628      	mov	r0, r5
 80032be:	47b8      	blx	r7
 80032c0:	3001      	adds	r0, #1
 80032c2:	d12b      	bne.n	800331c <_printf_float+0x23c>
 80032c4:	e767      	b.n	8003196 <_printf_float+0xb6>
 80032c6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80032ca:	f240 80dd 	bls.w	8003488 <_printf_float+0x3a8>
 80032ce:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80032d2:	2200      	movs	r2, #0
 80032d4:	2300      	movs	r3, #0
 80032d6:	f7fd fc07 	bl	8000ae8 <__aeabi_dcmpeq>
 80032da:	2800      	cmp	r0, #0
 80032dc:	d033      	beq.n	8003346 <_printf_float+0x266>
 80032de:	4a37      	ldr	r2, [pc, #220]	@ (80033bc <_printf_float+0x2dc>)
 80032e0:	2301      	movs	r3, #1
 80032e2:	4631      	mov	r1, r6
 80032e4:	4628      	mov	r0, r5
 80032e6:	47b8      	blx	r7
 80032e8:	3001      	adds	r0, #1
 80032ea:	f43f af54 	beq.w	8003196 <_printf_float+0xb6>
 80032ee:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80032f2:	4543      	cmp	r3, r8
 80032f4:	db02      	blt.n	80032fc <_printf_float+0x21c>
 80032f6:	6823      	ldr	r3, [r4, #0]
 80032f8:	07d8      	lsls	r0, r3, #31
 80032fa:	d50f      	bpl.n	800331c <_printf_float+0x23c>
 80032fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003300:	4631      	mov	r1, r6
 8003302:	4628      	mov	r0, r5
 8003304:	47b8      	blx	r7
 8003306:	3001      	adds	r0, #1
 8003308:	f43f af45 	beq.w	8003196 <_printf_float+0xb6>
 800330c:	f04f 0900 	mov.w	r9, #0
 8003310:	f108 38ff 	add.w	r8, r8, #4294967295
 8003314:	f104 0a1a 	add.w	sl, r4, #26
 8003318:	45c8      	cmp	r8, r9
 800331a:	dc09      	bgt.n	8003330 <_printf_float+0x250>
 800331c:	6823      	ldr	r3, [r4, #0]
 800331e:	079b      	lsls	r3, r3, #30
 8003320:	f100 8103 	bmi.w	800352a <_printf_float+0x44a>
 8003324:	68e0      	ldr	r0, [r4, #12]
 8003326:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003328:	4298      	cmp	r0, r3
 800332a:	bfb8      	it	lt
 800332c:	4618      	movlt	r0, r3
 800332e:	e734      	b.n	800319a <_printf_float+0xba>
 8003330:	2301      	movs	r3, #1
 8003332:	4652      	mov	r2, sl
 8003334:	4631      	mov	r1, r6
 8003336:	4628      	mov	r0, r5
 8003338:	47b8      	blx	r7
 800333a:	3001      	adds	r0, #1
 800333c:	f43f af2b 	beq.w	8003196 <_printf_float+0xb6>
 8003340:	f109 0901 	add.w	r9, r9, #1
 8003344:	e7e8      	b.n	8003318 <_printf_float+0x238>
 8003346:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003348:	2b00      	cmp	r3, #0
 800334a:	dc39      	bgt.n	80033c0 <_printf_float+0x2e0>
 800334c:	4a1b      	ldr	r2, [pc, #108]	@ (80033bc <_printf_float+0x2dc>)
 800334e:	2301      	movs	r3, #1
 8003350:	4631      	mov	r1, r6
 8003352:	4628      	mov	r0, r5
 8003354:	47b8      	blx	r7
 8003356:	3001      	adds	r0, #1
 8003358:	f43f af1d 	beq.w	8003196 <_printf_float+0xb6>
 800335c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8003360:	ea59 0303 	orrs.w	r3, r9, r3
 8003364:	d102      	bne.n	800336c <_printf_float+0x28c>
 8003366:	6823      	ldr	r3, [r4, #0]
 8003368:	07d9      	lsls	r1, r3, #31
 800336a:	d5d7      	bpl.n	800331c <_printf_float+0x23c>
 800336c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003370:	4631      	mov	r1, r6
 8003372:	4628      	mov	r0, r5
 8003374:	47b8      	blx	r7
 8003376:	3001      	adds	r0, #1
 8003378:	f43f af0d 	beq.w	8003196 <_printf_float+0xb6>
 800337c:	f04f 0a00 	mov.w	sl, #0
 8003380:	f104 0b1a 	add.w	fp, r4, #26
 8003384:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003386:	425b      	negs	r3, r3
 8003388:	4553      	cmp	r3, sl
 800338a:	dc01      	bgt.n	8003390 <_printf_float+0x2b0>
 800338c:	464b      	mov	r3, r9
 800338e:	e793      	b.n	80032b8 <_printf_float+0x1d8>
 8003390:	2301      	movs	r3, #1
 8003392:	465a      	mov	r2, fp
 8003394:	4631      	mov	r1, r6
 8003396:	4628      	mov	r0, r5
 8003398:	47b8      	blx	r7
 800339a:	3001      	adds	r0, #1
 800339c:	f43f aefb 	beq.w	8003196 <_printf_float+0xb6>
 80033a0:	f10a 0a01 	add.w	sl, sl, #1
 80033a4:	e7ee      	b.n	8003384 <_printf_float+0x2a4>
 80033a6:	bf00      	nop
 80033a8:	7fefffff 	.word	0x7fefffff
 80033ac:	08005d74 	.word	0x08005d74
 80033b0:	08005d78 	.word	0x08005d78
 80033b4:	08005d7c 	.word	0x08005d7c
 80033b8:	08005d80 	.word	0x08005d80
 80033bc:	08005d84 	.word	0x08005d84
 80033c0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80033c2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80033c6:	4553      	cmp	r3, sl
 80033c8:	bfa8      	it	ge
 80033ca:	4653      	movge	r3, sl
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	4699      	mov	r9, r3
 80033d0:	dc36      	bgt.n	8003440 <_printf_float+0x360>
 80033d2:	f04f 0b00 	mov.w	fp, #0
 80033d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80033da:	f104 021a 	add.w	r2, r4, #26
 80033de:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80033e0:	9306      	str	r3, [sp, #24]
 80033e2:	eba3 0309 	sub.w	r3, r3, r9
 80033e6:	455b      	cmp	r3, fp
 80033e8:	dc31      	bgt.n	800344e <_printf_float+0x36e>
 80033ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80033ec:	459a      	cmp	sl, r3
 80033ee:	dc3a      	bgt.n	8003466 <_printf_float+0x386>
 80033f0:	6823      	ldr	r3, [r4, #0]
 80033f2:	07da      	lsls	r2, r3, #31
 80033f4:	d437      	bmi.n	8003466 <_printf_float+0x386>
 80033f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80033f8:	ebaa 0903 	sub.w	r9, sl, r3
 80033fc:	9b06      	ldr	r3, [sp, #24]
 80033fe:	ebaa 0303 	sub.w	r3, sl, r3
 8003402:	4599      	cmp	r9, r3
 8003404:	bfa8      	it	ge
 8003406:	4699      	movge	r9, r3
 8003408:	f1b9 0f00 	cmp.w	r9, #0
 800340c:	dc33      	bgt.n	8003476 <_printf_float+0x396>
 800340e:	f04f 0800 	mov.w	r8, #0
 8003412:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003416:	f104 0b1a 	add.w	fp, r4, #26
 800341a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800341c:	ebaa 0303 	sub.w	r3, sl, r3
 8003420:	eba3 0309 	sub.w	r3, r3, r9
 8003424:	4543      	cmp	r3, r8
 8003426:	f77f af79 	ble.w	800331c <_printf_float+0x23c>
 800342a:	2301      	movs	r3, #1
 800342c:	465a      	mov	r2, fp
 800342e:	4631      	mov	r1, r6
 8003430:	4628      	mov	r0, r5
 8003432:	47b8      	blx	r7
 8003434:	3001      	adds	r0, #1
 8003436:	f43f aeae 	beq.w	8003196 <_printf_float+0xb6>
 800343a:	f108 0801 	add.w	r8, r8, #1
 800343e:	e7ec      	b.n	800341a <_printf_float+0x33a>
 8003440:	4642      	mov	r2, r8
 8003442:	4631      	mov	r1, r6
 8003444:	4628      	mov	r0, r5
 8003446:	47b8      	blx	r7
 8003448:	3001      	adds	r0, #1
 800344a:	d1c2      	bne.n	80033d2 <_printf_float+0x2f2>
 800344c:	e6a3      	b.n	8003196 <_printf_float+0xb6>
 800344e:	2301      	movs	r3, #1
 8003450:	4631      	mov	r1, r6
 8003452:	4628      	mov	r0, r5
 8003454:	9206      	str	r2, [sp, #24]
 8003456:	47b8      	blx	r7
 8003458:	3001      	adds	r0, #1
 800345a:	f43f ae9c 	beq.w	8003196 <_printf_float+0xb6>
 800345e:	9a06      	ldr	r2, [sp, #24]
 8003460:	f10b 0b01 	add.w	fp, fp, #1
 8003464:	e7bb      	b.n	80033de <_printf_float+0x2fe>
 8003466:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800346a:	4631      	mov	r1, r6
 800346c:	4628      	mov	r0, r5
 800346e:	47b8      	blx	r7
 8003470:	3001      	adds	r0, #1
 8003472:	d1c0      	bne.n	80033f6 <_printf_float+0x316>
 8003474:	e68f      	b.n	8003196 <_printf_float+0xb6>
 8003476:	9a06      	ldr	r2, [sp, #24]
 8003478:	464b      	mov	r3, r9
 800347a:	4442      	add	r2, r8
 800347c:	4631      	mov	r1, r6
 800347e:	4628      	mov	r0, r5
 8003480:	47b8      	blx	r7
 8003482:	3001      	adds	r0, #1
 8003484:	d1c3      	bne.n	800340e <_printf_float+0x32e>
 8003486:	e686      	b.n	8003196 <_printf_float+0xb6>
 8003488:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800348c:	f1ba 0f01 	cmp.w	sl, #1
 8003490:	dc01      	bgt.n	8003496 <_printf_float+0x3b6>
 8003492:	07db      	lsls	r3, r3, #31
 8003494:	d536      	bpl.n	8003504 <_printf_float+0x424>
 8003496:	2301      	movs	r3, #1
 8003498:	4642      	mov	r2, r8
 800349a:	4631      	mov	r1, r6
 800349c:	4628      	mov	r0, r5
 800349e:	47b8      	blx	r7
 80034a0:	3001      	adds	r0, #1
 80034a2:	f43f ae78 	beq.w	8003196 <_printf_float+0xb6>
 80034a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80034aa:	4631      	mov	r1, r6
 80034ac:	4628      	mov	r0, r5
 80034ae:	47b8      	blx	r7
 80034b0:	3001      	adds	r0, #1
 80034b2:	f43f ae70 	beq.w	8003196 <_printf_float+0xb6>
 80034b6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80034ba:	2200      	movs	r2, #0
 80034bc:	2300      	movs	r3, #0
 80034be:	f10a 3aff 	add.w	sl, sl, #4294967295
 80034c2:	f7fd fb11 	bl	8000ae8 <__aeabi_dcmpeq>
 80034c6:	b9c0      	cbnz	r0, 80034fa <_printf_float+0x41a>
 80034c8:	4653      	mov	r3, sl
 80034ca:	f108 0201 	add.w	r2, r8, #1
 80034ce:	4631      	mov	r1, r6
 80034d0:	4628      	mov	r0, r5
 80034d2:	47b8      	blx	r7
 80034d4:	3001      	adds	r0, #1
 80034d6:	d10c      	bne.n	80034f2 <_printf_float+0x412>
 80034d8:	e65d      	b.n	8003196 <_printf_float+0xb6>
 80034da:	2301      	movs	r3, #1
 80034dc:	465a      	mov	r2, fp
 80034de:	4631      	mov	r1, r6
 80034e0:	4628      	mov	r0, r5
 80034e2:	47b8      	blx	r7
 80034e4:	3001      	adds	r0, #1
 80034e6:	f43f ae56 	beq.w	8003196 <_printf_float+0xb6>
 80034ea:	f108 0801 	add.w	r8, r8, #1
 80034ee:	45d0      	cmp	r8, sl
 80034f0:	dbf3      	blt.n	80034da <_printf_float+0x3fa>
 80034f2:	464b      	mov	r3, r9
 80034f4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80034f8:	e6df      	b.n	80032ba <_printf_float+0x1da>
 80034fa:	f04f 0800 	mov.w	r8, #0
 80034fe:	f104 0b1a 	add.w	fp, r4, #26
 8003502:	e7f4      	b.n	80034ee <_printf_float+0x40e>
 8003504:	2301      	movs	r3, #1
 8003506:	4642      	mov	r2, r8
 8003508:	e7e1      	b.n	80034ce <_printf_float+0x3ee>
 800350a:	2301      	movs	r3, #1
 800350c:	464a      	mov	r2, r9
 800350e:	4631      	mov	r1, r6
 8003510:	4628      	mov	r0, r5
 8003512:	47b8      	blx	r7
 8003514:	3001      	adds	r0, #1
 8003516:	f43f ae3e 	beq.w	8003196 <_printf_float+0xb6>
 800351a:	f108 0801 	add.w	r8, r8, #1
 800351e:	68e3      	ldr	r3, [r4, #12]
 8003520:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8003522:	1a5b      	subs	r3, r3, r1
 8003524:	4543      	cmp	r3, r8
 8003526:	dcf0      	bgt.n	800350a <_printf_float+0x42a>
 8003528:	e6fc      	b.n	8003324 <_printf_float+0x244>
 800352a:	f04f 0800 	mov.w	r8, #0
 800352e:	f104 0919 	add.w	r9, r4, #25
 8003532:	e7f4      	b.n	800351e <_printf_float+0x43e>

08003534 <_printf_common>:
 8003534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003538:	4616      	mov	r6, r2
 800353a:	4698      	mov	r8, r3
 800353c:	688a      	ldr	r2, [r1, #8]
 800353e:	690b      	ldr	r3, [r1, #16]
 8003540:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003544:	4293      	cmp	r3, r2
 8003546:	bfb8      	it	lt
 8003548:	4613      	movlt	r3, r2
 800354a:	6033      	str	r3, [r6, #0]
 800354c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003550:	4607      	mov	r7, r0
 8003552:	460c      	mov	r4, r1
 8003554:	b10a      	cbz	r2, 800355a <_printf_common+0x26>
 8003556:	3301      	adds	r3, #1
 8003558:	6033      	str	r3, [r6, #0]
 800355a:	6823      	ldr	r3, [r4, #0]
 800355c:	0699      	lsls	r1, r3, #26
 800355e:	bf42      	ittt	mi
 8003560:	6833      	ldrmi	r3, [r6, #0]
 8003562:	3302      	addmi	r3, #2
 8003564:	6033      	strmi	r3, [r6, #0]
 8003566:	6825      	ldr	r5, [r4, #0]
 8003568:	f015 0506 	ands.w	r5, r5, #6
 800356c:	d106      	bne.n	800357c <_printf_common+0x48>
 800356e:	f104 0a19 	add.w	sl, r4, #25
 8003572:	68e3      	ldr	r3, [r4, #12]
 8003574:	6832      	ldr	r2, [r6, #0]
 8003576:	1a9b      	subs	r3, r3, r2
 8003578:	42ab      	cmp	r3, r5
 800357a:	dc26      	bgt.n	80035ca <_printf_common+0x96>
 800357c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003580:	6822      	ldr	r2, [r4, #0]
 8003582:	3b00      	subs	r3, #0
 8003584:	bf18      	it	ne
 8003586:	2301      	movne	r3, #1
 8003588:	0692      	lsls	r2, r2, #26
 800358a:	d42b      	bmi.n	80035e4 <_printf_common+0xb0>
 800358c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003590:	4641      	mov	r1, r8
 8003592:	4638      	mov	r0, r7
 8003594:	47c8      	blx	r9
 8003596:	3001      	adds	r0, #1
 8003598:	d01e      	beq.n	80035d8 <_printf_common+0xa4>
 800359a:	6823      	ldr	r3, [r4, #0]
 800359c:	6922      	ldr	r2, [r4, #16]
 800359e:	f003 0306 	and.w	r3, r3, #6
 80035a2:	2b04      	cmp	r3, #4
 80035a4:	bf02      	ittt	eq
 80035a6:	68e5      	ldreq	r5, [r4, #12]
 80035a8:	6833      	ldreq	r3, [r6, #0]
 80035aa:	1aed      	subeq	r5, r5, r3
 80035ac:	68a3      	ldr	r3, [r4, #8]
 80035ae:	bf0c      	ite	eq
 80035b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80035b4:	2500      	movne	r5, #0
 80035b6:	4293      	cmp	r3, r2
 80035b8:	bfc4      	itt	gt
 80035ba:	1a9b      	subgt	r3, r3, r2
 80035bc:	18ed      	addgt	r5, r5, r3
 80035be:	2600      	movs	r6, #0
 80035c0:	341a      	adds	r4, #26
 80035c2:	42b5      	cmp	r5, r6
 80035c4:	d11a      	bne.n	80035fc <_printf_common+0xc8>
 80035c6:	2000      	movs	r0, #0
 80035c8:	e008      	b.n	80035dc <_printf_common+0xa8>
 80035ca:	2301      	movs	r3, #1
 80035cc:	4652      	mov	r2, sl
 80035ce:	4641      	mov	r1, r8
 80035d0:	4638      	mov	r0, r7
 80035d2:	47c8      	blx	r9
 80035d4:	3001      	adds	r0, #1
 80035d6:	d103      	bne.n	80035e0 <_printf_common+0xac>
 80035d8:	f04f 30ff 	mov.w	r0, #4294967295
 80035dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035e0:	3501      	adds	r5, #1
 80035e2:	e7c6      	b.n	8003572 <_printf_common+0x3e>
 80035e4:	18e1      	adds	r1, r4, r3
 80035e6:	1c5a      	adds	r2, r3, #1
 80035e8:	2030      	movs	r0, #48	@ 0x30
 80035ea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80035ee:	4422      	add	r2, r4
 80035f0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80035f4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80035f8:	3302      	adds	r3, #2
 80035fa:	e7c7      	b.n	800358c <_printf_common+0x58>
 80035fc:	2301      	movs	r3, #1
 80035fe:	4622      	mov	r2, r4
 8003600:	4641      	mov	r1, r8
 8003602:	4638      	mov	r0, r7
 8003604:	47c8      	blx	r9
 8003606:	3001      	adds	r0, #1
 8003608:	d0e6      	beq.n	80035d8 <_printf_common+0xa4>
 800360a:	3601      	adds	r6, #1
 800360c:	e7d9      	b.n	80035c2 <_printf_common+0x8e>
	...

08003610 <_printf_i>:
 8003610:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003614:	7e0f      	ldrb	r7, [r1, #24]
 8003616:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003618:	2f78      	cmp	r7, #120	@ 0x78
 800361a:	4691      	mov	r9, r2
 800361c:	4680      	mov	r8, r0
 800361e:	460c      	mov	r4, r1
 8003620:	469a      	mov	sl, r3
 8003622:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003626:	d807      	bhi.n	8003638 <_printf_i+0x28>
 8003628:	2f62      	cmp	r7, #98	@ 0x62
 800362a:	d80a      	bhi.n	8003642 <_printf_i+0x32>
 800362c:	2f00      	cmp	r7, #0
 800362e:	f000 80d2 	beq.w	80037d6 <_printf_i+0x1c6>
 8003632:	2f58      	cmp	r7, #88	@ 0x58
 8003634:	f000 80b9 	beq.w	80037aa <_printf_i+0x19a>
 8003638:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800363c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003640:	e03a      	b.n	80036b8 <_printf_i+0xa8>
 8003642:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003646:	2b15      	cmp	r3, #21
 8003648:	d8f6      	bhi.n	8003638 <_printf_i+0x28>
 800364a:	a101      	add	r1, pc, #4	@ (adr r1, 8003650 <_printf_i+0x40>)
 800364c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003650:	080036a9 	.word	0x080036a9
 8003654:	080036bd 	.word	0x080036bd
 8003658:	08003639 	.word	0x08003639
 800365c:	08003639 	.word	0x08003639
 8003660:	08003639 	.word	0x08003639
 8003664:	08003639 	.word	0x08003639
 8003668:	080036bd 	.word	0x080036bd
 800366c:	08003639 	.word	0x08003639
 8003670:	08003639 	.word	0x08003639
 8003674:	08003639 	.word	0x08003639
 8003678:	08003639 	.word	0x08003639
 800367c:	080037bd 	.word	0x080037bd
 8003680:	080036e7 	.word	0x080036e7
 8003684:	08003777 	.word	0x08003777
 8003688:	08003639 	.word	0x08003639
 800368c:	08003639 	.word	0x08003639
 8003690:	080037df 	.word	0x080037df
 8003694:	08003639 	.word	0x08003639
 8003698:	080036e7 	.word	0x080036e7
 800369c:	08003639 	.word	0x08003639
 80036a0:	08003639 	.word	0x08003639
 80036a4:	0800377f 	.word	0x0800377f
 80036a8:	6833      	ldr	r3, [r6, #0]
 80036aa:	1d1a      	adds	r2, r3, #4
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	6032      	str	r2, [r6, #0]
 80036b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80036b4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80036b8:	2301      	movs	r3, #1
 80036ba:	e09d      	b.n	80037f8 <_printf_i+0x1e8>
 80036bc:	6833      	ldr	r3, [r6, #0]
 80036be:	6820      	ldr	r0, [r4, #0]
 80036c0:	1d19      	adds	r1, r3, #4
 80036c2:	6031      	str	r1, [r6, #0]
 80036c4:	0606      	lsls	r6, r0, #24
 80036c6:	d501      	bpl.n	80036cc <_printf_i+0xbc>
 80036c8:	681d      	ldr	r5, [r3, #0]
 80036ca:	e003      	b.n	80036d4 <_printf_i+0xc4>
 80036cc:	0645      	lsls	r5, r0, #25
 80036ce:	d5fb      	bpl.n	80036c8 <_printf_i+0xb8>
 80036d0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80036d4:	2d00      	cmp	r5, #0
 80036d6:	da03      	bge.n	80036e0 <_printf_i+0xd0>
 80036d8:	232d      	movs	r3, #45	@ 0x2d
 80036da:	426d      	negs	r5, r5
 80036dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80036e0:	4859      	ldr	r0, [pc, #356]	@ (8003848 <_printf_i+0x238>)
 80036e2:	230a      	movs	r3, #10
 80036e4:	e011      	b.n	800370a <_printf_i+0xfa>
 80036e6:	6821      	ldr	r1, [r4, #0]
 80036e8:	6833      	ldr	r3, [r6, #0]
 80036ea:	0608      	lsls	r0, r1, #24
 80036ec:	f853 5b04 	ldr.w	r5, [r3], #4
 80036f0:	d402      	bmi.n	80036f8 <_printf_i+0xe8>
 80036f2:	0649      	lsls	r1, r1, #25
 80036f4:	bf48      	it	mi
 80036f6:	b2ad      	uxthmi	r5, r5
 80036f8:	2f6f      	cmp	r7, #111	@ 0x6f
 80036fa:	4853      	ldr	r0, [pc, #332]	@ (8003848 <_printf_i+0x238>)
 80036fc:	6033      	str	r3, [r6, #0]
 80036fe:	bf14      	ite	ne
 8003700:	230a      	movne	r3, #10
 8003702:	2308      	moveq	r3, #8
 8003704:	2100      	movs	r1, #0
 8003706:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800370a:	6866      	ldr	r6, [r4, #4]
 800370c:	60a6      	str	r6, [r4, #8]
 800370e:	2e00      	cmp	r6, #0
 8003710:	bfa2      	ittt	ge
 8003712:	6821      	ldrge	r1, [r4, #0]
 8003714:	f021 0104 	bicge.w	r1, r1, #4
 8003718:	6021      	strge	r1, [r4, #0]
 800371a:	b90d      	cbnz	r5, 8003720 <_printf_i+0x110>
 800371c:	2e00      	cmp	r6, #0
 800371e:	d04b      	beq.n	80037b8 <_printf_i+0x1a8>
 8003720:	4616      	mov	r6, r2
 8003722:	fbb5 f1f3 	udiv	r1, r5, r3
 8003726:	fb03 5711 	mls	r7, r3, r1, r5
 800372a:	5dc7      	ldrb	r7, [r0, r7]
 800372c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003730:	462f      	mov	r7, r5
 8003732:	42bb      	cmp	r3, r7
 8003734:	460d      	mov	r5, r1
 8003736:	d9f4      	bls.n	8003722 <_printf_i+0x112>
 8003738:	2b08      	cmp	r3, #8
 800373a:	d10b      	bne.n	8003754 <_printf_i+0x144>
 800373c:	6823      	ldr	r3, [r4, #0]
 800373e:	07df      	lsls	r7, r3, #31
 8003740:	d508      	bpl.n	8003754 <_printf_i+0x144>
 8003742:	6923      	ldr	r3, [r4, #16]
 8003744:	6861      	ldr	r1, [r4, #4]
 8003746:	4299      	cmp	r1, r3
 8003748:	bfde      	ittt	le
 800374a:	2330      	movle	r3, #48	@ 0x30
 800374c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003750:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003754:	1b92      	subs	r2, r2, r6
 8003756:	6122      	str	r2, [r4, #16]
 8003758:	f8cd a000 	str.w	sl, [sp]
 800375c:	464b      	mov	r3, r9
 800375e:	aa03      	add	r2, sp, #12
 8003760:	4621      	mov	r1, r4
 8003762:	4640      	mov	r0, r8
 8003764:	f7ff fee6 	bl	8003534 <_printf_common>
 8003768:	3001      	adds	r0, #1
 800376a:	d14a      	bne.n	8003802 <_printf_i+0x1f2>
 800376c:	f04f 30ff 	mov.w	r0, #4294967295
 8003770:	b004      	add	sp, #16
 8003772:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003776:	6823      	ldr	r3, [r4, #0]
 8003778:	f043 0320 	orr.w	r3, r3, #32
 800377c:	6023      	str	r3, [r4, #0]
 800377e:	4833      	ldr	r0, [pc, #204]	@ (800384c <_printf_i+0x23c>)
 8003780:	2778      	movs	r7, #120	@ 0x78
 8003782:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003786:	6823      	ldr	r3, [r4, #0]
 8003788:	6831      	ldr	r1, [r6, #0]
 800378a:	061f      	lsls	r7, r3, #24
 800378c:	f851 5b04 	ldr.w	r5, [r1], #4
 8003790:	d402      	bmi.n	8003798 <_printf_i+0x188>
 8003792:	065f      	lsls	r7, r3, #25
 8003794:	bf48      	it	mi
 8003796:	b2ad      	uxthmi	r5, r5
 8003798:	6031      	str	r1, [r6, #0]
 800379a:	07d9      	lsls	r1, r3, #31
 800379c:	bf44      	itt	mi
 800379e:	f043 0320 	orrmi.w	r3, r3, #32
 80037a2:	6023      	strmi	r3, [r4, #0]
 80037a4:	b11d      	cbz	r5, 80037ae <_printf_i+0x19e>
 80037a6:	2310      	movs	r3, #16
 80037a8:	e7ac      	b.n	8003704 <_printf_i+0xf4>
 80037aa:	4827      	ldr	r0, [pc, #156]	@ (8003848 <_printf_i+0x238>)
 80037ac:	e7e9      	b.n	8003782 <_printf_i+0x172>
 80037ae:	6823      	ldr	r3, [r4, #0]
 80037b0:	f023 0320 	bic.w	r3, r3, #32
 80037b4:	6023      	str	r3, [r4, #0]
 80037b6:	e7f6      	b.n	80037a6 <_printf_i+0x196>
 80037b8:	4616      	mov	r6, r2
 80037ba:	e7bd      	b.n	8003738 <_printf_i+0x128>
 80037bc:	6833      	ldr	r3, [r6, #0]
 80037be:	6825      	ldr	r5, [r4, #0]
 80037c0:	6961      	ldr	r1, [r4, #20]
 80037c2:	1d18      	adds	r0, r3, #4
 80037c4:	6030      	str	r0, [r6, #0]
 80037c6:	062e      	lsls	r6, r5, #24
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	d501      	bpl.n	80037d0 <_printf_i+0x1c0>
 80037cc:	6019      	str	r1, [r3, #0]
 80037ce:	e002      	b.n	80037d6 <_printf_i+0x1c6>
 80037d0:	0668      	lsls	r0, r5, #25
 80037d2:	d5fb      	bpl.n	80037cc <_printf_i+0x1bc>
 80037d4:	8019      	strh	r1, [r3, #0]
 80037d6:	2300      	movs	r3, #0
 80037d8:	6123      	str	r3, [r4, #16]
 80037da:	4616      	mov	r6, r2
 80037dc:	e7bc      	b.n	8003758 <_printf_i+0x148>
 80037de:	6833      	ldr	r3, [r6, #0]
 80037e0:	1d1a      	adds	r2, r3, #4
 80037e2:	6032      	str	r2, [r6, #0]
 80037e4:	681e      	ldr	r6, [r3, #0]
 80037e6:	6862      	ldr	r2, [r4, #4]
 80037e8:	2100      	movs	r1, #0
 80037ea:	4630      	mov	r0, r6
 80037ec:	f7fc fd00 	bl	80001f0 <memchr>
 80037f0:	b108      	cbz	r0, 80037f6 <_printf_i+0x1e6>
 80037f2:	1b80      	subs	r0, r0, r6
 80037f4:	6060      	str	r0, [r4, #4]
 80037f6:	6863      	ldr	r3, [r4, #4]
 80037f8:	6123      	str	r3, [r4, #16]
 80037fa:	2300      	movs	r3, #0
 80037fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003800:	e7aa      	b.n	8003758 <_printf_i+0x148>
 8003802:	6923      	ldr	r3, [r4, #16]
 8003804:	4632      	mov	r2, r6
 8003806:	4649      	mov	r1, r9
 8003808:	4640      	mov	r0, r8
 800380a:	47d0      	blx	sl
 800380c:	3001      	adds	r0, #1
 800380e:	d0ad      	beq.n	800376c <_printf_i+0x15c>
 8003810:	6823      	ldr	r3, [r4, #0]
 8003812:	079b      	lsls	r3, r3, #30
 8003814:	d413      	bmi.n	800383e <_printf_i+0x22e>
 8003816:	68e0      	ldr	r0, [r4, #12]
 8003818:	9b03      	ldr	r3, [sp, #12]
 800381a:	4298      	cmp	r0, r3
 800381c:	bfb8      	it	lt
 800381e:	4618      	movlt	r0, r3
 8003820:	e7a6      	b.n	8003770 <_printf_i+0x160>
 8003822:	2301      	movs	r3, #1
 8003824:	4632      	mov	r2, r6
 8003826:	4649      	mov	r1, r9
 8003828:	4640      	mov	r0, r8
 800382a:	47d0      	blx	sl
 800382c:	3001      	adds	r0, #1
 800382e:	d09d      	beq.n	800376c <_printf_i+0x15c>
 8003830:	3501      	adds	r5, #1
 8003832:	68e3      	ldr	r3, [r4, #12]
 8003834:	9903      	ldr	r1, [sp, #12]
 8003836:	1a5b      	subs	r3, r3, r1
 8003838:	42ab      	cmp	r3, r5
 800383a:	dcf2      	bgt.n	8003822 <_printf_i+0x212>
 800383c:	e7eb      	b.n	8003816 <_printf_i+0x206>
 800383e:	2500      	movs	r5, #0
 8003840:	f104 0619 	add.w	r6, r4, #25
 8003844:	e7f5      	b.n	8003832 <_printf_i+0x222>
 8003846:	bf00      	nop
 8003848:	08005d86 	.word	0x08005d86
 800384c:	08005d97 	.word	0x08005d97

08003850 <std>:
 8003850:	2300      	movs	r3, #0
 8003852:	b510      	push	{r4, lr}
 8003854:	4604      	mov	r4, r0
 8003856:	e9c0 3300 	strd	r3, r3, [r0]
 800385a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800385e:	6083      	str	r3, [r0, #8]
 8003860:	8181      	strh	r1, [r0, #12]
 8003862:	6643      	str	r3, [r0, #100]	@ 0x64
 8003864:	81c2      	strh	r2, [r0, #14]
 8003866:	6183      	str	r3, [r0, #24]
 8003868:	4619      	mov	r1, r3
 800386a:	2208      	movs	r2, #8
 800386c:	305c      	adds	r0, #92	@ 0x5c
 800386e:	f000 f915 	bl	8003a9c <memset>
 8003872:	4b0d      	ldr	r3, [pc, #52]	@ (80038a8 <std+0x58>)
 8003874:	6263      	str	r3, [r4, #36]	@ 0x24
 8003876:	4b0d      	ldr	r3, [pc, #52]	@ (80038ac <std+0x5c>)
 8003878:	62a3      	str	r3, [r4, #40]	@ 0x28
 800387a:	4b0d      	ldr	r3, [pc, #52]	@ (80038b0 <std+0x60>)
 800387c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800387e:	4b0d      	ldr	r3, [pc, #52]	@ (80038b4 <std+0x64>)
 8003880:	6323      	str	r3, [r4, #48]	@ 0x30
 8003882:	4b0d      	ldr	r3, [pc, #52]	@ (80038b8 <std+0x68>)
 8003884:	6224      	str	r4, [r4, #32]
 8003886:	429c      	cmp	r4, r3
 8003888:	d006      	beq.n	8003898 <std+0x48>
 800388a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800388e:	4294      	cmp	r4, r2
 8003890:	d002      	beq.n	8003898 <std+0x48>
 8003892:	33d0      	adds	r3, #208	@ 0xd0
 8003894:	429c      	cmp	r4, r3
 8003896:	d105      	bne.n	80038a4 <std+0x54>
 8003898:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800389c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80038a0:	f000 b978 	b.w	8003b94 <__retarget_lock_init_recursive>
 80038a4:	bd10      	pop	{r4, pc}
 80038a6:	bf00      	nop
 80038a8:	080039d5 	.word	0x080039d5
 80038ac:	080039f7 	.word	0x080039f7
 80038b0:	08003a2f 	.word	0x08003a2f
 80038b4:	08003a53 	.word	0x08003a53
 80038b8:	200002a8 	.word	0x200002a8

080038bc <stdio_exit_handler>:
 80038bc:	4a02      	ldr	r2, [pc, #8]	@ (80038c8 <stdio_exit_handler+0xc>)
 80038be:	4903      	ldr	r1, [pc, #12]	@ (80038cc <stdio_exit_handler+0x10>)
 80038c0:	4803      	ldr	r0, [pc, #12]	@ (80038d0 <stdio_exit_handler+0x14>)
 80038c2:	f000 b869 	b.w	8003998 <_fwalk_sglue>
 80038c6:	bf00      	nop
 80038c8:	20000004 	.word	0x20000004
 80038cc:	080054f5 	.word	0x080054f5
 80038d0:	20000014 	.word	0x20000014

080038d4 <cleanup_stdio>:
 80038d4:	6841      	ldr	r1, [r0, #4]
 80038d6:	4b0c      	ldr	r3, [pc, #48]	@ (8003908 <cleanup_stdio+0x34>)
 80038d8:	4299      	cmp	r1, r3
 80038da:	b510      	push	{r4, lr}
 80038dc:	4604      	mov	r4, r0
 80038de:	d001      	beq.n	80038e4 <cleanup_stdio+0x10>
 80038e0:	f001 fe08 	bl	80054f4 <_fflush_r>
 80038e4:	68a1      	ldr	r1, [r4, #8]
 80038e6:	4b09      	ldr	r3, [pc, #36]	@ (800390c <cleanup_stdio+0x38>)
 80038e8:	4299      	cmp	r1, r3
 80038ea:	d002      	beq.n	80038f2 <cleanup_stdio+0x1e>
 80038ec:	4620      	mov	r0, r4
 80038ee:	f001 fe01 	bl	80054f4 <_fflush_r>
 80038f2:	68e1      	ldr	r1, [r4, #12]
 80038f4:	4b06      	ldr	r3, [pc, #24]	@ (8003910 <cleanup_stdio+0x3c>)
 80038f6:	4299      	cmp	r1, r3
 80038f8:	d004      	beq.n	8003904 <cleanup_stdio+0x30>
 80038fa:	4620      	mov	r0, r4
 80038fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003900:	f001 bdf8 	b.w	80054f4 <_fflush_r>
 8003904:	bd10      	pop	{r4, pc}
 8003906:	bf00      	nop
 8003908:	200002a8 	.word	0x200002a8
 800390c:	20000310 	.word	0x20000310
 8003910:	20000378 	.word	0x20000378

08003914 <global_stdio_init.part.0>:
 8003914:	b510      	push	{r4, lr}
 8003916:	4b0b      	ldr	r3, [pc, #44]	@ (8003944 <global_stdio_init.part.0+0x30>)
 8003918:	4c0b      	ldr	r4, [pc, #44]	@ (8003948 <global_stdio_init.part.0+0x34>)
 800391a:	4a0c      	ldr	r2, [pc, #48]	@ (800394c <global_stdio_init.part.0+0x38>)
 800391c:	601a      	str	r2, [r3, #0]
 800391e:	4620      	mov	r0, r4
 8003920:	2200      	movs	r2, #0
 8003922:	2104      	movs	r1, #4
 8003924:	f7ff ff94 	bl	8003850 <std>
 8003928:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800392c:	2201      	movs	r2, #1
 800392e:	2109      	movs	r1, #9
 8003930:	f7ff ff8e 	bl	8003850 <std>
 8003934:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003938:	2202      	movs	r2, #2
 800393a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800393e:	2112      	movs	r1, #18
 8003940:	f7ff bf86 	b.w	8003850 <std>
 8003944:	200003e0 	.word	0x200003e0
 8003948:	200002a8 	.word	0x200002a8
 800394c:	080038bd 	.word	0x080038bd

08003950 <__sfp_lock_acquire>:
 8003950:	4801      	ldr	r0, [pc, #4]	@ (8003958 <__sfp_lock_acquire+0x8>)
 8003952:	f000 b920 	b.w	8003b96 <__retarget_lock_acquire_recursive>
 8003956:	bf00      	nop
 8003958:	200003e9 	.word	0x200003e9

0800395c <__sfp_lock_release>:
 800395c:	4801      	ldr	r0, [pc, #4]	@ (8003964 <__sfp_lock_release+0x8>)
 800395e:	f000 b91b 	b.w	8003b98 <__retarget_lock_release_recursive>
 8003962:	bf00      	nop
 8003964:	200003e9 	.word	0x200003e9

08003968 <__sinit>:
 8003968:	b510      	push	{r4, lr}
 800396a:	4604      	mov	r4, r0
 800396c:	f7ff fff0 	bl	8003950 <__sfp_lock_acquire>
 8003970:	6a23      	ldr	r3, [r4, #32]
 8003972:	b11b      	cbz	r3, 800397c <__sinit+0x14>
 8003974:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003978:	f7ff bff0 	b.w	800395c <__sfp_lock_release>
 800397c:	4b04      	ldr	r3, [pc, #16]	@ (8003990 <__sinit+0x28>)
 800397e:	6223      	str	r3, [r4, #32]
 8003980:	4b04      	ldr	r3, [pc, #16]	@ (8003994 <__sinit+0x2c>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d1f5      	bne.n	8003974 <__sinit+0xc>
 8003988:	f7ff ffc4 	bl	8003914 <global_stdio_init.part.0>
 800398c:	e7f2      	b.n	8003974 <__sinit+0xc>
 800398e:	bf00      	nop
 8003990:	080038d5 	.word	0x080038d5
 8003994:	200003e0 	.word	0x200003e0

08003998 <_fwalk_sglue>:
 8003998:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800399c:	4607      	mov	r7, r0
 800399e:	4688      	mov	r8, r1
 80039a0:	4614      	mov	r4, r2
 80039a2:	2600      	movs	r6, #0
 80039a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80039a8:	f1b9 0901 	subs.w	r9, r9, #1
 80039ac:	d505      	bpl.n	80039ba <_fwalk_sglue+0x22>
 80039ae:	6824      	ldr	r4, [r4, #0]
 80039b0:	2c00      	cmp	r4, #0
 80039b2:	d1f7      	bne.n	80039a4 <_fwalk_sglue+0xc>
 80039b4:	4630      	mov	r0, r6
 80039b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80039ba:	89ab      	ldrh	r3, [r5, #12]
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d907      	bls.n	80039d0 <_fwalk_sglue+0x38>
 80039c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80039c4:	3301      	adds	r3, #1
 80039c6:	d003      	beq.n	80039d0 <_fwalk_sglue+0x38>
 80039c8:	4629      	mov	r1, r5
 80039ca:	4638      	mov	r0, r7
 80039cc:	47c0      	blx	r8
 80039ce:	4306      	orrs	r6, r0
 80039d0:	3568      	adds	r5, #104	@ 0x68
 80039d2:	e7e9      	b.n	80039a8 <_fwalk_sglue+0x10>

080039d4 <__sread>:
 80039d4:	b510      	push	{r4, lr}
 80039d6:	460c      	mov	r4, r1
 80039d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039dc:	f000 f88c 	bl	8003af8 <_read_r>
 80039e0:	2800      	cmp	r0, #0
 80039e2:	bfab      	itete	ge
 80039e4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80039e6:	89a3      	ldrhlt	r3, [r4, #12]
 80039e8:	181b      	addge	r3, r3, r0
 80039ea:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80039ee:	bfac      	ite	ge
 80039f0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80039f2:	81a3      	strhlt	r3, [r4, #12]
 80039f4:	bd10      	pop	{r4, pc}

080039f6 <__swrite>:
 80039f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039fa:	461f      	mov	r7, r3
 80039fc:	898b      	ldrh	r3, [r1, #12]
 80039fe:	05db      	lsls	r3, r3, #23
 8003a00:	4605      	mov	r5, r0
 8003a02:	460c      	mov	r4, r1
 8003a04:	4616      	mov	r6, r2
 8003a06:	d505      	bpl.n	8003a14 <__swrite+0x1e>
 8003a08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a0c:	2302      	movs	r3, #2
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f000 f860 	bl	8003ad4 <_lseek_r>
 8003a14:	89a3      	ldrh	r3, [r4, #12]
 8003a16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003a1a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003a1e:	81a3      	strh	r3, [r4, #12]
 8003a20:	4632      	mov	r2, r6
 8003a22:	463b      	mov	r3, r7
 8003a24:	4628      	mov	r0, r5
 8003a26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003a2a:	f000 b877 	b.w	8003b1c <_write_r>

08003a2e <__sseek>:
 8003a2e:	b510      	push	{r4, lr}
 8003a30:	460c      	mov	r4, r1
 8003a32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a36:	f000 f84d 	bl	8003ad4 <_lseek_r>
 8003a3a:	1c43      	adds	r3, r0, #1
 8003a3c:	89a3      	ldrh	r3, [r4, #12]
 8003a3e:	bf15      	itete	ne
 8003a40:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003a42:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003a46:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003a4a:	81a3      	strheq	r3, [r4, #12]
 8003a4c:	bf18      	it	ne
 8003a4e:	81a3      	strhne	r3, [r4, #12]
 8003a50:	bd10      	pop	{r4, pc}

08003a52 <__sclose>:
 8003a52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a56:	f000 b82d 	b.w	8003ab4 <_close_r>
	...

08003a5c <_vsiprintf_r>:
 8003a5c:	b500      	push	{lr}
 8003a5e:	b09b      	sub	sp, #108	@ 0x6c
 8003a60:	9100      	str	r1, [sp, #0]
 8003a62:	9104      	str	r1, [sp, #16]
 8003a64:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003a68:	9105      	str	r1, [sp, #20]
 8003a6a:	9102      	str	r1, [sp, #8]
 8003a6c:	4905      	ldr	r1, [pc, #20]	@ (8003a84 <_vsiprintf_r+0x28>)
 8003a6e:	9103      	str	r1, [sp, #12]
 8003a70:	4669      	mov	r1, sp
 8003a72:	f001 fbbf 	bl	80051f4 <_svfiprintf_r>
 8003a76:	9b00      	ldr	r3, [sp, #0]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	701a      	strb	r2, [r3, #0]
 8003a7c:	b01b      	add	sp, #108	@ 0x6c
 8003a7e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003a82:	bf00      	nop
 8003a84:	ffff0208 	.word	0xffff0208

08003a88 <vsiprintf>:
 8003a88:	4613      	mov	r3, r2
 8003a8a:	460a      	mov	r2, r1
 8003a8c:	4601      	mov	r1, r0
 8003a8e:	4802      	ldr	r0, [pc, #8]	@ (8003a98 <vsiprintf+0x10>)
 8003a90:	6800      	ldr	r0, [r0, #0]
 8003a92:	f7ff bfe3 	b.w	8003a5c <_vsiprintf_r>
 8003a96:	bf00      	nop
 8003a98:	20000010 	.word	0x20000010

08003a9c <memset>:
 8003a9c:	4402      	add	r2, r0
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d100      	bne.n	8003aa6 <memset+0xa>
 8003aa4:	4770      	bx	lr
 8003aa6:	f803 1b01 	strb.w	r1, [r3], #1
 8003aaa:	e7f9      	b.n	8003aa0 <memset+0x4>

08003aac <_localeconv_r>:
 8003aac:	4800      	ldr	r0, [pc, #0]	@ (8003ab0 <_localeconv_r+0x4>)
 8003aae:	4770      	bx	lr
 8003ab0:	20000150 	.word	0x20000150

08003ab4 <_close_r>:
 8003ab4:	b538      	push	{r3, r4, r5, lr}
 8003ab6:	4d06      	ldr	r5, [pc, #24]	@ (8003ad0 <_close_r+0x1c>)
 8003ab8:	2300      	movs	r3, #0
 8003aba:	4604      	mov	r4, r0
 8003abc:	4608      	mov	r0, r1
 8003abe:	602b      	str	r3, [r5, #0]
 8003ac0:	f7fe fb54 	bl	800216c <_close>
 8003ac4:	1c43      	adds	r3, r0, #1
 8003ac6:	d102      	bne.n	8003ace <_close_r+0x1a>
 8003ac8:	682b      	ldr	r3, [r5, #0]
 8003aca:	b103      	cbz	r3, 8003ace <_close_r+0x1a>
 8003acc:	6023      	str	r3, [r4, #0]
 8003ace:	bd38      	pop	{r3, r4, r5, pc}
 8003ad0:	200003e4 	.word	0x200003e4

08003ad4 <_lseek_r>:
 8003ad4:	b538      	push	{r3, r4, r5, lr}
 8003ad6:	4d07      	ldr	r5, [pc, #28]	@ (8003af4 <_lseek_r+0x20>)
 8003ad8:	4604      	mov	r4, r0
 8003ada:	4608      	mov	r0, r1
 8003adc:	4611      	mov	r1, r2
 8003ade:	2200      	movs	r2, #0
 8003ae0:	602a      	str	r2, [r5, #0]
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	f7fe fb69 	bl	80021ba <_lseek>
 8003ae8:	1c43      	adds	r3, r0, #1
 8003aea:	d102      	bne.n	8003af2 <_lseek_r+0x1e>
 8003aec:	682b      	ldr	r3, [r5, #0]
 8003aee:	b103      	cbz	r3, 8003af2 <_lseek_r+0x1e>
 8003af0:	6023      	str	r3, [r4, #0]
 8003af2:	bd38      	pop	{r3, r4, r5, pc}
 8003af4:	200003e4 	.word	0x200003e4

08003af8 <_read_r>:
 8003af8:	b538      	push	{r3, r4, r5, lr}
 8003afa:	4d07      	ldr	r5, [pc, #28]	@ (8003b18 <_read_r+0x20>)
 8003afc:	4604      	mov	r4, r0
 8003afe:	4608      	mov	r0, r1
 8003b00:	4611      	mov	r1, r2
 8003b02:	2200      	movs	r2, #0
 8003b04:	602a      	str	r2, [r5, #0]
 8003b06:	461a      	mov	r2, r3
 8003b08:	f7fe faf7 	bl	80020fa <_read>
 8003b0c:	1c43      	adds	r3, r0, #1
 8003b0e:	d102      	bne.n	8003b16 <_read_r+0x1e>
 8003b10:	682b      	ldr	r3, [r5, #0]
 8003b12:	b103      	cbz	r3, 8003b16 <_read_r+0x1e>
 8003b14:	6023      	str	r3, [r4, #0]
 8003b16:	bd38      	pop	{r3, r4, r5, pc}
 8003b18:	200003e4 	.word	0x200003e4

08003b1c <_write_r>:
 8003b1c:	b538      	push	{r3, r4, r5, lr}
 8003b1e:	4d07      	ldr	r5, [pc, #28]	@ (8003b3c <_write_r+0x20>)
 8003b20:	4604      	mov	r4, r0
 8003b22:	4608      	mov	r0, r1
 8003b24:	4611      	mov	r1, r2
 8003b26:	2200      	movs	r2, #0
 8003b28:	602a      	str	r2, [r5, #0]
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	f7fe fb02 	bl	8002134 <_write>
 8003b30:	1c43      	adds	r3, r0, #1
 8003b32:	d102      	bne.n	8003b3a <_write_r+0x1e>
 8003b34:	682b      	ldr	r3, [r5, #0]
 8003b36:	b103      	cbz	r3, 8003b3a <_write_r+0x1e>
 8003b38:	6023      	str	r3, [r4, #0]
 8003b3a:	bd38      	pop	{r3, r4, r5, pc}
 8003b3c:	200003e4 	.word	0x200003e4

08003b40 <__errno>:
 8003b40:	4b01      	ldr	r3, [pc, #4]	@ (8003b48 <__errno+0x8>)
 8003b42:	6818      	ldr	r0, [r3, #0]
 8003b44:	4770      	bx	lr
 8003b46:	bf00      	nop
 8003b48:	20000010 	.word	0x20000010

08003b4c <__libc_init_array>:
 8003b4c:	b570      	push	{r4, r5, r6, lr}
 8003b4e:	4d0d      	ldr	r5, [pc, #52]	@ (8003b84 <__libc_init_array+0x38>)
 8003b50:	4c0d      	ldr	r4, [pc, #52]	@ (8003b88 <__libc_init_array+0x3c>)
 8003b52:	1b64      	subs	r4, r4, r5
 8003b54:	10a4      	asrs	r4, r4, #2
 8003b56:	2600      	movs	r6, #0
 8003b58:	42a6      	cmp	r6, r4
 8003b5a:	d109      	bne.n	8003b70 <__libc_init_array+0x24>
 8003b5c:	4d0b      	ldr	r5, [pc, #44]	@ (8003b8c <__libc_init_array+0x40>)
 8003b5e:	4c0c      	ldr	r4, [pc, #48]	@ (8003b90 <__libc_init_array+0x44>)
 8003b60:	f002 f8e2 	bl	8005d28 <_init>
 8003b64:	1b64      	subs	r4, r4, r5
 8003b66:	10a4      	asrs	r4, r4, #2
 8003b68:	2600      	movs	r6, #0
 8003b6a:	42a6      	cmp	r6, r4
 8003b6c:	d105      	bne.n	8003b7a <__libc_init_array+0x2e>
 8003b6e:	bd70      	pop	{r4, r5, r6, pc}
 8003b70:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b74:	4798      	blx	r3
 8003b76:	3601      	adds	r6, #1
 8003b78:	e7ee      	b.n	8003b58 <__libc_init_array+0xc>
 8003b7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b7e:	4798      	blx	r3
 8003b80:	3601      	adds	r6, #1
 8003b82:	e7f2      	b.n	8003b6a <__libc_init_array+0x1e>
 8003b84:	080060f0 	.word	0x080060f0
 8003b88:	080060f0 	.word	0x080060f0
 8003b8c:	080060f0 	.word	0x080060f0
 8003b90:	080060f4 	.word	0x080060f4

08003b94 <__retarget_lock_init_recursive>:
 8003b94:	4770      	bx	lr

08003b96 <__retarget_lock_acquire_recursive>:
 8003b96:	4770      	bx	lr

08003b98 <__retarget_lock_release_recursive>:
 8003b98:	4770      	bx	lr

08003b9a <quorem>:
 8003b9a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b9e:	6903      	ldr	r3, [r0, #16]
 8003ba0:	690c      	ldr	r4, [r1, #16]
 8003ba2:	42a3      	cmp	r3, r4
 8003ba4:	4607      	mov	r7, r0
 8003ba6:	db7e      	blt.n	8003ca6 <quorem+0x10c>
 8003ba8:	3c01      	subs	r4, #1
 8003baa:	f101 0814 	add.w	r8, r1, #20
 8003bae:	00a3      	lsls	r3, r4, #2
 8003bb0:	f100 0514 	add.w	r5, r0, #20
 8003bb4:	9300      	str	r3, [sp, #0]
 8003bb6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003bba:	9301      	str	r3, [sp, #4]
 8003bbc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003bc0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003bc4:	3301      	adds	r3, #1
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003bcc:	fbb2 f6f3 	udiv	r6, r2, r3
 8003bd0:	d32e      	bcc.n	8003c30 <quorem+0x96>
 8003bd2:	f04f 0a00 	mov.w	sl, #0
 8003bd6:	46c4      	mov	ip, r8
 8003bd8:	46ae      	mov	lr, r5
 8003bda:	46d3      	mov	fp, sl
 8003bdc:	f85c 3b04 	ldr.w	r3, [ip], #4
 8003be0:	b298      	uxth	r0, r3
 8003be2:	fb06 a000 	mla	r0, r6, r0, sl
 8003be6:	0c02      	lsrs	r2, r0, #16
 8003be8:	0c1b      	lsrs	r3, r3, #16
 8003bea:	fb06 2303 	mla	r3, r6, r3, r2
 8003bee:	f8de 2000 	ldr.w	r2, [lr]
 8003bf2:	b280      	uxth	r0, r0
 8003bf4:	b292      	uxth	r2, r2
 8003bf6:	1a12      	subs	r2, r2, r0
 8003bf8:	445a      	add	r2, fp
 8003bfa:	f8de 0000 	ldr.w	r0, [lr]
 8003bfe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8003c08:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8003c0c:	b292      	uxth	r2, r2
 8003c0e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8003c12:	45e1      	cmp	r9, ip
 8003c14:	f84e 2b04 	str.w	r2, [lr], #4
 8003c18:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8003c1c:	d2de      	bcs.n	8003bdc <quorem+0x42>
 8003c1e:	9b00      	ldr	r3, [sp, #0]
 8003c20:	58eb      	ldr	r3, [r5, r3]
 8003c22:	b92b      	cbnz	r3, 8003c30 <quorem+0x96>
 8003c24:	9b01      	ldr	r3, [sp, #4]
 8003c26:	3b04      	subs	r3, #4
 8003c28:	429d      	cmp	r5, r3
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	d32f      	bcc.n	8003c8e <quorem+0xf4>
 8003c2e:	613c      	str	r4, [r7, #16]
 8003c30:	4638      	mov	r0, r7
 8003c32:	f001 f97b 	bl	8004f2c <__mcmp>
 8003c36:	2800      	cmp	r0, #0
 8003c38:	db25      	blt.n	8003c86 <quorem+0xec>
 8003c3a:	4629      	mov	r1, r5
 8003c3c:	2000      	movs	r0, #0
 8003c3e:	f858 2b04 	ldr.w	r2, [r8], #4
 8003c42:	f8d1 c000 	ldr.w	ip, [r1]
 8003c46:	fa1f fe82 	uxth.w	lr, r2
 8003c4a:	fa1f f38c 	uxth.w	r3, ip
 8003c4e:	eba3 030e 	sub.w	r3, r3, lr
 8003c52:	4403      	add	r3, r0
 8003c54:	0c12      	lsrs	r2, r2, #16
 8003c56:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8003c5a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003c64:	45c1      	cmp	r9, r8
 8003c66:	f841 3b04 	str.w	r3, [r1], #4
 8003c6a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8003c6e:	d2e6      	bcs.n	8003c3e <quorem+0xa4>
 8003c70:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003c74:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003c78:	b922      	cbnz	r2, 8003c84 <quorem+0xea>
 8003c7a:	3b04      	subs	r3, #4
 8003c7c:	429d      	cmp	r5, r3
 8003c7e:	461a      	mov	r2, r3
 8003c80:	d30b      	bcc.n	8003c9a <quorem+0x100>
 8003c82:	613c      	str	r4, [r7, #16]
 8003c84:	3601      	adds	r6, #1
 8003c86:	4630      	mov	r0, r6
 8003c88:	b003      	add	sp, #12
 8003c8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c8e:	6812      	ldr	r2, [r2, #0]
 8003c90:	3b04      	subs	r3, #4
 8003c92:	2a00      	cmp	r2, #0
 8003c94:	d1cb      	bne.n	8003c2e <quorem+0x94>
 8003c96:	3c01      	subs	r4, #1
 8003c98:	e7c6      	b.n	8003c28 <quorem+0x8e>
 8003c9a:	6812      	ldr	r2, [r2, #0]
 8003c9c:	3b04      	subs	r3, #4
 8003c9e:	2a00      	cmp	r2, #0
 8003ca0:	d1ef      	bne.n	8003c82 <quorem+0xe8>
 8003ca2:	3c01      	subs	r4, #1
 8003ca4:	e7ea      	b.n	8003c7c <quorem+0xe2>
 8003ca6:	2000      	movs	r0, #0
 8003ca8:	e7ee      	b.n	8003c88 <quorem+0xee>
 8003caa:	0000      	movs	r0, r0
 8003cac:	0000      	movs	r0, r0
	...

08003cb0 <_dtoa_r>:
 8003cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cb4:	69c7      	ldr	r7, [r0, #28]
 8003cb6:	b099      	sub	sp, #100	@ 0x64
 8003cb8:	ed8d 0b02 	vstr	d0, [sp, #8]
 8003cbc:	ec55 4b10 	vmov	r4, r5, d0
 8003cc0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8003cc2:	9109      	str	r1, [sp, #36]	@ 0x24
 8003cc4:	4683      	mov	fp, r0
 8003cc6:	920e      	str	r2, [sp, #56]	@ 0x38
 8003cc8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8003cca:	b97f      	cbnz	r7, 8003cec <_dtoa_r+0x3c>
 8003ccc:	2010      	movs	r0, #16
 8003cce:	f000 fdfd 	bl	80048cc <malloc>
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	f8cb 001c 	str.w	r0, [fp, #28]
 8003cd8:	b920      	cbnz	r0, 8003ce4 <_dtoa_r+0x34>
 8003cda:	4ba7      	ldr	r3, [pc, #668]	@ (8003f78 <_dtoa_r+0x2c8>)
 8003cdc:	21ef      	movs	r1, #239	@ 0xef
 8003cde:	48a7      	ldr	r0, [pc, #668]	@ (8003f7c <_dtoa_r+0x2cc>)
 8003ce0:	f001 fc68 	bl	80055b4 <__assert_func>
 8003ce4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8003ce8:	6007      	str	r7, [r0, #0]
 8003cea:	60c7      	str	r7, [r0, #12]
 8003cec:	f8db 301c 	ldr.w	r3, [fp, #28]
 8003cf0:	6819      	ldr	r1, [r3, #0]
 8003cf2:	b159      	cbz	r1, 8003d0c <_dtoa_r+0x5c>
 8003cf4:	685a      	ldr	r2, [r3, #4]
 8003cf6:	604a      	str	r2, [r1, #4]
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	4093      	lsls	r3, r2
 8003cfc:	608b      	str	r3, [r1, #8]
 8003cfe:	4658      	mov	r0, fp
 8003d00:	f000 feda 	bl	8004ab8 <_Bfree>
 8003d04:	f8db 301c 	ldr.w	r3, [fp, #28]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	601a      	str	r2, [r3, #0]
 8003d0c:	1e2b      	subs	r3, r5, #0
 8003d0e:	bfb9      	ittee	lt
 8003d10:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8003d14:	9303      	strlt	r3, [sp, #12]
 8003d16:	2300      	movge	r3, #0
 8003d18:	6033      	strge	r3, [r6, #0]
 8003d1a:	9f03      	ldr	r7, [sp, #12]
 8003d1c:	4b98      	ldr	r3, [pc, #608]	@ (8003f80 <_dtoa_r+0x2d0>)
 8003d1e:	bfbc      	itt	lt
 8003d20:	2201      	movlt	r2, #1
 8003d22:	6032      	strlt	r2, [r6, #0]
 8003d24:	43bb      	bics	r3, r7
 8003d26:	d112      	bne.n	8003d4e <_dtoa_r+0x9e>
 8003d28:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8003d2a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8003d2e:	6013      	str	r3, [r2, #0]
 8003d30:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8003d34:	4323      	orrs	r3, r4
 8003d36:	f000 854d 	beq.w	80047d4 <_dtoa_r+0xb24>
 8003d3a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8003d3c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8003f94 <_dtoa_r+0x2e4>
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	f000 854f 	beq.w	80047e4 <_dtoa_r+0xb34>
 8003d46:	f10a 0303 	add.w	r3, sl, #3
 8003d4a:	f000 bd49 	b.w	80047e0 <_dtoa_r+0xb30>
 8003d4e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8003d52:	2200      	movs	r2, #0
 8003d54:	ec51 0b17 	vmov	r0, r1, d7
 8003d58:	2300      	movs	r3, #0
 8003d5a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8003d5e:	f7fc fec3 	bl	8000ae8 <__aeabi_dcmpeq>
 8003d62:	4680      	mov	r8, r0
 8003d64:	b158      	cbz	r0, 8003d7e <_dtoa_r+0xce>
 8003d66:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8003d68:	2301      	movs	r3, #1
 8003d6a:	6013      	str	r3, [r2, #0]
 8003d6c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8003d6e:	b113      	cbz	r3, 8003d76 <_dtoa_r+0xc6>
 8003d70:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8003d72:	4b84      	ldr	r3, [pc, #528]	@ (8003f84 <_dtoa_r+0x2d4>)
 8003d74:	6013      	str	r3, [r2, #0]
 8003d76:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8003f98 <_dtoa_r+0x2e8>
 8003d7a:	f000 bd33 	b.w	80047e4 <_dtoa_r+0xb34>
 8003d7e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8003d82:	aa16      	add	r2, sp, #88	@ 0x58
 8003d84:	a917      	add	r1, sp, #92	@ 0x5c
 8003d86:	4658      	mov	r0, fp
 8003d88:	f001 f980 	bl	800508c <__d2b>
 8003d8c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8003d90:	4681      	mov	r9, r0
 8003d92:	2e00      	cmp	r6, #0
 8003d94:	d077      	beq.n	8003e86 <_dtoa_r+0x1d6>
 8003d96:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003d98:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8003d9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003da0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003da4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8003da8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8003dac:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8003db0:	4619      	mov	r1, r3
 8003db2:	2200      	movs	r2, #0
 8003db4:	4b74      	ldr	r3, [pc, #464]	@ (8003f88 <_dtoa_r+0x2d8>)
 8003db6:	f7fc fa77 	bl	80002a8 <__aeabi_dsub>
 8003dba:	a369      	add	r3, pc, #420	@ (adr r3, 8003f60 <_dtoa_r+0x2b0>)
 8003dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dc0:	f7fc fc2a 	bl	8000618 <__aeabi_dmul>
 8003dc4:	a368      	add	r3, pc, #416	@ (adr r3, 8003f68 <_dtoa_r+0x2b8>)
 8003dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dca:	f7fc fa6f 	bl	80002ac <__adddf3>
 8003dce:	4604      	mov	r4, r0
 8003dd0:	4630      	mov	r0, r6
 8003dd2:	460d      	mov	r5, r1
 8003dd4:	f7fc fbb6 	bl	8000544 <__aeabi_i2d>
 8003dd8:	a365      	add	r3, pc, #404	@ (adr r3, 8003f70 <_dtoa_r+0x2c0>)
 8003dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dde:	f7fc fc1b 	bl	8000618 <__aeabi_dmul>
 8003de2:	4602      	mov	r2, r0
 8003de4:	460b      	mov	r3, r1
 8003de6:	4620      	mov	r0, r4
 8003de8:	4629      	mov	r1, r5
 8003dea:	f7fc fa5f 	bl	80002ac <__adddf3>
 8003dee:	4604      	mov	r4, r0
 8003df0:	460d      	mov	r5, r1
 8003df2:	f7fc fec1 	bl	8000b78 <__aeabi_d2iz>
 8003df6:	2200      	movs	r2, #0
 8003df8:	4607      	mov	r7, r0
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	4620      	mov	r0, r4
 8003dfe:	4629      	mov	r1, r5
 8003e00:	f7fc fe7c 	bl	8000afc <__aeabi_dcmplt>
 8003e04:	b140      	cbz	r0, 8003e18 <_dtoa_r+0x168>
 8003e06:	4638      	mov	r0, r7
 8003e08:	f7fc fb9c 	bl	8000544 <__aeabi_i2d>
 8003e0c:	4622      	mov	r2, r4
 8003e0e:	462b      	mov	r3, r5
 8003e10:	f7fc fe6a 	bl	8000ae8 <__aeabi_dcmpeq>
 8003e14:	b900      	cbnz	r0, 8003e18 <_dtoa_r+0x168>
 8003e16:	3f01      	subs	r7, #1
 8003e18:	2f16      	cmp	r7, #22
 8003e1a:	d851      	bhi.n	8003ec0 <_dtoa_r+0x210>
 8003e1c:	4b5b      	ldr	r3, [pc, #364]	@ (8003f8c <_dtoa_r+0x2dc>)
 8003e1e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8003e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e26:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003e2a:	f7fc fe67 	bl	8000afc <__aeabi_dcmplt>
 8003e2e:	2800      	cmp	r0, #0
 8003e30:	d048      	beq.n	8003ec4 <_dtoa_r+0x214>
 8003e32:	3f01      	subs	r7, #1
 8003e34:	2300      	movs	r3, #0
 8003e36:	9312      	str	r3, [sp, #72]	@ 0x48
 8003e38:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8003e3a:	1b9b      	subs	r3, r3, r6
 8003e3c:	1e5a      	subs	r2, r3, #1
 8003e3e:	bf44      	itt	mi
 8003e40:	f1c3 0801 	rsbmi	r8, r3, #1
 8003e44:	2300      	movmi	r3, #0
 8003e46:	9208      	str	r2, [sp, #32]
 8003e48:	bf54      	ite	pl
 8003e4a:	f04f 0800 	movpl.w	r8, #0
 8003e4e:	9308      	strmi	r3, [sp, #32]
 8003e50:	2f00      	cmp	r7, #0
 8003e52:	db39      	blt.n	8003ec8 <_dtoa_r+0x218>
 8003e54:	9b08      	ldr	r3, [sp, #32]
 8003e56:	970f      	str	r7, [sp, #60]	@ 0x3c
 8003e58:	443b      	add	r3, r7
 8003e5a:	9308      	str	r3, [sp, #32]
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	930a      	str	r3, [sp, #40]	@ 0x28
 8003e60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003e62:	2b09      	cmp	r3, #9
 8003e64:	d864      	bhi.n	8003f30 <_dtoa_r+0x280>
 8003e66:	2b05      	cmp	r3, #5
 8003e68:	bfc4      	itt	gt
 8003e6a:	3b04      	subgt	r3, #4
 8003e6c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8003e6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003e70:	f1a3 0302 	sub.w	r3, r3, #2
 8003e74:	bfcc      	ite	gt
 8003e76:	2400      	movgt	r4, #0
 8003e78:	2401      	movle	r4, #1
 8003e7a:	2b03      	cmp	r3, #3
 8003e7c:	d863      	bhi.n	8003f46 <_dtoa_r+0x296>
 8003e7e:	e8df f003 	tbb	[pc, r3]
 8003e82:	372a      	.short	0x372a
 8003e84:	5535      	.short	0x5535
 8003e86:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8003e8a:	441e      	add	r6, r3
 8003e8c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8003e90:	2b20      	cmp	r3, #32
 8003e92:	bfc1      	itttt	gt
 8003e94:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8003e98:	409f      	lslgt	r7, r3
 8003e9a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8003e9e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8003ea2:	bfd6      	itet	le
 8003ea4:	f1c3 0320 	rsble	r3, r3, #32
 8003ea8:	ea47 0003 	orrgt.w	r0, r7, r3
 8003eac:	fa04 f003 	lslle.w	r0, r4, r3
 8003eb0:	f7fc fb38 	bl	8000524 <__aeabi_ui2d>
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8003eba:	3e01      	subs	r6, #1
 8003ebc:	9214      	str	r2, [sp, #80]	@ 0x50
 8003ebe:	e777      	b.n	8003db0 <_dtoa_r+0x100>
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e7b8      	b.n	8003e36 <_dtoa_r+0x186>
 8003ec4:	9012      	str	r0, [sp, #72]	@ 0x48
 8003ec6:	e7b7      	b.n	8003e38 <_dtoa_r+0x188>
 8003ec8:	427b      	negs	r3, r7
 8003eca:	930a      	str	r3, [sp, #40]	@ 0x28
 8003ecc:	2300      	movs	r3, #0
 8003ece:	eba8 0807 	sub.w	r8, r8, r7
 8003ed2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8003ed4:	e7c4      	b.n	8003e60 <_dtoa_r+0x1b0>
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003eda:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	dc35      	bgt.n	8003f4c <_dtoa_r+0x29c>
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	9300      	str	r3, [sp, #0]
 8003ee4:	9307      	str	r3, [sp, #28]
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	920e      	str	r2, [sp, #56]	@ 0x38
 8003eea:	e00b      	b.n	8003f04 <_dtoa_r+0x254>
 8003eec:	2301      	movs	r3, #1
 8003eee:	e7f3      	b.n	8003ed8 <_dtoa_r+0x228>
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003ef4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003ef6:	18fb      	adds	r3, r7, r3
 8003ef8:	9300      	str	r3, [sp, #0]
 8003efa:	3301      	adds	r3, #1
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	9307      	str	r3, [sp, #28]
 8003f00:	bfb8      	it	lt
 8003f02:	2301      	movlt	r3, #1
 8003f04:	f8db 001c 	ldr.w	r0, [fp, #28]
 8003f08:	2100      	movs	r1, #0
 8003f0a:	2204      	movs	r2, #4
 8003f0c:	f102 0514 	add.w	r5, r2, #20
 8003f10:	429d      	cmp	r5, r3
 8003f12:	d91f      	bls.n	8003f54 <_dtoa_r+0x2a4>
 8003f14:	6041      	str	r1, [r0, #4]
 8003f16:	4658      	mov	r0, fp
 8003f18:	f000 fd8e 	bl	8004a38 <_Balloc>
 8003f1c:	4682      	mov	sl, r0
 8003f1e:	2800      	cmp	r0, #0
 8003f20:	d13c      	bne.n	8003f9c <_dtoa_r+0x2ec>
 8003f22:	4b1b      	ldr	r3, [pc, #108]	@ (8003f90 <_dtoa_r+0x2e0>)
 8003f24:	4602      	mov	r2, r0
 8003f26:	f240 11af 	movw	r1, #431	@ 0x1af
 8003f2a:	e6d8      	b.n	8003cde <_dtoa_r+0x2e>
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e7e0      	b.n	8003ef2 <_dtoa_r+0x242>
 8003f30:	2401      	movs	r4, #1
 8003f32:	2300      	movs	r3, #0
 8003f34:	9309      	str	r3, [sp, #36]	@ 0x24
 8003f36:	940b      	str	r4, [sp, #44]	@ 0x2c
 8003f38:	f04f 33ff 	mov.w	r3, #4294967295
 8003f3c:	9300      	str	r3, [sp, #0]
 8003f3e:	9307      	str	r3, [sp, #28]
 8003f40:	2200      	movs	r2, #0
 8003f42:	2312      	movs	r3, #18
 8003f44:	e7d0      	b.n	8003ee8 <_dtoa_r+0x238>
 8003f46:	2301      	movs	r3, #1
 8003f48:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003f4a:	e7f5      	b.n	8003f38 <_dtoa_r+0x288>
 8003f4c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003f4e:	9300      	str	r3, [sp, #0]
 8003f50:	9307      	str	r3, [sp, #28]
 8003f52:	e7d7      	b.n	8003f04 <_dtoa_r+0x254>
 8003f54:	3101      	adds	r1, #1
 8003f56:	0052      	lsls	r2, r2, #1
 8003f58:	e7d8      	b.n	8003f0c <_dtoa_r+0x25c>
 8003f5a:	bf00      	nop
 8003f5c:	f3af 8000 	nop.w
 8003f60:	636f4361 	.word	0x636f4361
 8003f64:	3fd287a7 	.word	0x3fd287a7
 8003f68:	8b60c8b3 	.word	0x8b60c8b3
 8003f6c:	3fc68a28 	.word	0x3fc68a28
 8003f70:	509f79fb 	.word	0x509f79fb
 8003f74:	3fd34413 	.word	0x3fd34413
 8003f78:	08005db5 	.word	0x08005db5
 8003f7c:	08005dcc 	.word	0x08005dcc
 8003f80:	7ff00000 	.word	0x7ff00000
 8003f84:	08005d85 	.word	0x08005d85
 8003f88:	3ff80000 	.word	0x3ff80000
 8003f8c:	08005ec8 	.word	0x08005ec8
 8003f90:	08005e24 	.word	0x08005e24
 8003f94:	08005db1 	.word	0x08005db1
 8003f98:	08005d84 	.word	0x08005d84
 8003f9c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8003fa0:	6018      	str	r0, [r3, #0]
 8003fa2:	9b07      	ldr	r3, [sp, #28]
 8003fa4:	2b0e      	cmp	r3, #14
 8003fa6:	f200 80a4 	bhi.w	80040f2 <_dtoa_r+0x442>
 8003faa:	2c00      	cmp	r4, #0
 8003fac:	f000 80a1 	beq.w	80040f2 <_dtoa_r+0x442>
 8003fb0:	2f00      	cmp	r7, #0
 8003fb2:	dd33      	ble.n	800401c <_dtoa_r+0x36c>
 8003fb4:	4bad      	ldr	r3, [pc, #692]	@ (800426c <_dtoa_r+0x5bc>)
 8003fb6:	f007 020f 	and.w	r2, r7, #15
 8003fba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003fbe:	ed93 7b00 	vldr	d7, [r3]
 8003fc2:	05f8      	lsls	r0, r7, #23
 8003fc4:	ed8d 7b04 	vstr	d7, [sp, #16]
 8003fc8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8003fcc:	d516      	bpl.n	8003ffc <_dtoa_r+0x34c>
 8003fce:	4ba8      	ldr	r3, [pc, #672]	@ (8004270 <_dtoa_r+0x5c0>)
 8003fd0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003fd4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003fd8:	f7fc fc48 	bl	800086c <__aeabi_ddiv>
 8003fdc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003fe0:	f004 040f 	and.w	r4, r4, #15
 8003fe4:	2603      	movs	r6, #3
 8003fe6:	4da2      	ldr	r5, [pc, #648]	@ (8004270 <_dtoa_r+0x5c0>)
 8003fe8:	b954      	cbnz	r4, 8004000 <_dtoa_r+0x350>
 8003fea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003fee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003ff2:	f7fc fc3b 	bl	800086c <__aeabi_ddiv>
 8003ff6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003ffa:	e028      	b.n	800404e <_dtoa_r+0x39e>
 8003ffc:	2602      	movs	r6, #2
 8003ffe:	e7f2      	b.n	8003fe6 <_dtoa_r+0x336>
 8004000:	07e1      	lsls	r1, r4, #31
 8004002:	d508      	bpl.n	8004016 <_dtoa_r+0x366>
 8004004:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004008:	e9d5 2300 	ldrd	r2, r3, [r5]
 800400c:	f7fc fb04 	bl	8000618 <__aeabi_dmul>
 8004010:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004014:	3601      	adds	r6, #1
 8004016:	1064      	asrs	r4, r4, #1
 8004018:	3508      	adds	r5, #8
 800401a:	e7e5      	b.n	8003fe8 <_dtoa_r+0x338>
 800401c:	f000 80d2 	beq.w	80041c4 <_dtoa_r+0x514>
 8004020:	427c      	negs	r4, r7
 8004022:	4b92      	ldr	r3, [pc, #584]	@ (800426c <_dtoa_r+0x5bc>)
 8004024:	4d92      	ldr	r5, [pc, #584]	@ (8004270 <_dtoa_r+0x5c0>)
 8004026:	f004 020f 	and.w	r2, r4, #15
 800402a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800402e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004032:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004036:	f7fc faef 	bl	8000618 <__aeabi_dmul>
 800403a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800403e:	1124      	asrs	r4, r4, #4
 8004040:	2300      	movs	r3, #0
 8004042:	2602      	movs	r6, #2
 8004044:	2c00      	cmp	r4, #0
 8004046:	f040 80b2 	bne.w	80041ae <_dtoa_r+0x4fe>
 800404a:	2b00      	cmp	r3, #0
 800404c:	d1d3      	bne.n	8003ff6 <_dtoa_r+0x346>
 800404e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8004050:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004054:	2b00      	cmp	r3, #0
 8004056:	f000 80b7 	beq.w	80041c8 <_dtoa_r+0x518>
 800405a:	4b86      	ldr	r3, [pc, #536]	@ (8004274 <_dtoa_r+0x5c4>)
 800405c:	2200      	movs	r2, #0
 800405e:	4620      	mov	r0, r4
 8004060:	4629      	mov	r1, r5
 8004062:	f7fc fd4b 	bl	8000afc <__aeabi_dcmplt>
 8004066:	2800      	cmp	r0, #0
 8004068:	f000 80ae 	beq.w	80041c8 <_dtoa_r+0x518>
 800406c:	9b07      	ldr	r3, [sp, #28]
 800406e:	2b00      	cmp	r3, #0
 8004070:	f000 80aa 	beq.w	80041c8 <_dtoa_r+0x518>
 8004074:	9b00      	ldr	r3, [sp, #0]
 8004076:	2b00      	cmp	r3, #0
 8004078:	dd37      	ble.n	80040ea <_dtoa_r+0x43a>
 800407a:	1e7b      	subs	r3, r7, #1
 800407c:	9304      	str	r3, [sp, #16]
 800407e:	4620      	mov	r0, r4
 8004080:	4b7d      	ldr	r3, [pc, #500]	@ (8004278 <_dtoa_r+0x5c8>)
 8004082:	2200      	movs	r2, #0
 8004084:	4629      	mov	r1, r5
 8004086:	f7fc fac7 	bl	8000618 <__aeabi_dmul>
 800408a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800408e:	9c00      	ldr	r4, [sp, #0]
 8004090:	3601      	adds	r6, #1
 8004092:	4630      	mov	r0, r6
 8004094:	f7fc fa56 	bl	8000544 <__aeabi_i2d>
 8004098:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800409c:	f7fc fabc 	bl	8000618 <__aeabi_dmul>
 80040a0:	4b76      	ldr	r3, [pc, #472]	@ (800427c <_dtoa_r+0x5cc>)
 80040a2:	2200      	movs	r2, #0
 80040a4:	f7fc f902 	bl	80002ac <__adddf3>
 80040a8:	4605      	mov	r5, r0
 80040aa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80040ae:	2c00      	cmp	r4, #0
 80040b0:	f040 808d 	bne.w	80041ce <_dtoa_r+0x51e>
 80040b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80040b8:	4b71      	ldr	r3, [pc, #452]	@ (8004280 <_dtoa_r+0x5d0>)
 80040ba:	2200      	movs	r2, #0
 80040bc:	f7fc f8f4 	bl	80002a8 <__aeabi_dsub>
 80040c0:	4602      	mov	r2, r0
 80040c2:	460b      	mov	r3, r1
 80040c4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80040c8:	462a      	mov	r2, r5
 80040ca:	4633      	mov	r3, r6
 80040cc:	f7fc fd34 	bl	8000b38 <__aeabi_dcmpgt>
 80040d0:	2800      	cmp	r0, #0
 80040d2:	f040 828b 	bne.w	80045ec <_dtoa_r+0x93c>
 80040d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80040da:	462a      	mov	r2, r5
 80040dc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80040e0:	f7fc fd0c 	bl	8000afc <__aeabi_dcmplt>
 80040e4:	2800      	cmp	r0, #0
 80040e6:	f040 8128 	bne.w	800433a <_dtoa_r+0x68a>
 80040ea:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80040ee:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80040f2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	f2c0 815a 	blt.w	80043ae <_dtoa_r+0x6fe>
 80040fa:	2f0e      	cmp	r7, #14
 80040fc:	f300 8157 	bgt.w	80043ae <_dtoa_r+0x6fe>
 8004100:	4b5a      	ldr	r3, [pc, #360]	@ (800426c <_dtoa_r+0x5bc>)
 8004102:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004106:	ed93 7b00 	vldr	d7, [r3]
 800410a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800410c:	2b00      	cmp	r3, #0
 800410e:	ed8d 7b00 	vstr	d7, [sp]
 8004112:	da03      	bge.n	800411c <_dtoa_r+0x46c>
 8004114:	9b07      	ldr	r3, [sp, #28]
 8004116:	2b00      	cmp	r3, #0
 8004118:	f340 8101 	ble.w	800431e <_dtoa_r+0x66e>
 800411c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004120:	4656      	mov	r6, sl
 8004122:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004126:	4620      	mov	r0, r4
 8004128:	4629      	mov	r1, r5
 800412a:	f7fc fb9f 	bl	800086c <__aeabi_ddiv>
 800412e:	f7fc fd23 	bl	8000b78 <__aeabi_d2iz>
 8004132:	4680      	mov	r8, r0
 8004134:	f7fc fa06 	bl	8000544 <__aeabi_i2d>
 8004138:	e9dd 2300 	ldrd	r2, r3, [sp]
 800413c:	f7fc fa6c 	bl	8000618 <__aeabi_dmul>
 8004140:	4602      	mov	r2, r0
 8004142:	460b      	mov	r3, r1
 8004144:	4620      	mov	r0, r4
 8004146:	4629      	mov	r1, r5
 8004148:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800414c:	f7fc f8ac 	bl	80002a8 <__aeabi_dsub>
 8004150:	f806 4b01 	strb.w	r4, [r6], #1
 8004154:	9d07      	ldr	r5, [sp, #28]
 8004156:	eba6 040a 	sub.w	r4, r6, sl
 800415a:	42a5      	cmp	r5, r4
 800415c:	4602      	mov	r2, r0
 800415e:	460b      	mov	r3, r1
 8004160:	f040 8117 	bne.w	8004392 <_dtoa_r+0x6e2>
 8004164:	f7fc f8a2 	bl	80002ac <__adddf3>
 8004168:	e9dd 2300 	ldrd	r2, r3, [sp]
 800416c:	4604      	mov	r4, r0
 800416e:	460d      	mov	r5, r1
 8004170:	f7fc fce2 	bl	8000b38 <__aeabi_dcmpgt>
 8004174:	2800      	cmp	r0, #0
 8004176:	f040 80f9 	bne.w	800436c <_dtoa_r+0x6bc>
 800417a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800417e:	4620      	mov	r0, r4
 8004180:	4629      	mov	r1, r5
 8004182:	f7fc fcb1 	bl	8000ae8 <__aeabi_dcmpeq>
 8004186:	b118      	cbz	r0, 8004190 <_dtoa_r+0x4e0>
 8004188:	f018 0f01 	tst.w	r8, #1
 800418c:	f040 80ee 	bne.w	800436c <_dtoa_r+0x6bc>
 8004190:	4649      	mov	r1, r9
 8004192:	4658      	mov	r0, fp
 8004194:	f000 fc90 	bl	8004ab8 <_Bfree>
 8004198:	2300      	movs	r3, #0
 800419a:	7033      	strb	r3, [r6, #0]
 800419c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800419e:	3701      	adds	r7, #1
 80041a0:	601f      	str	r7, [r3, #0]
 80041a2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	f000 831d 	beq.w	80047e4 <_dtoa_r+0xb34>
 80041aa:	601e      	str	r6, [r3, #0]
 80041ac:	e31a      	b.n	80047e4 <_dtoa_r+0xb34>
 80041ae:	07e2      	lsls	r2, r4, #31
 80041b0:	d505      	bpl.n	80041be <_dtoa_r+0x50e>
 80041b2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80041b6:	f7fc fa2f 	bl	8000618 <__aeabi_dmul>
 80041ba:	3601      	adds	r6, #1
 80041bc:	2301      	movs	r3, #1
 80041be:	1064      	asrs	r4, r4, #1
 80041c0:	3508      	adds	r5, #8
 80041c2:	e73f      	b.n	8004044 <_dtoa_r+0x394>
 80041c4:	2602      	movs	r6, #2
 80041c6:	e742      	b.n	800404e <_dtoa_r+0x39e>
 80041c8:	9c07      	ldr	r4, [sp, #28]
 80041ca:	9704      	str	r7, [sp, #16]
 80041cc:	e761      	b.n	8004092 <_dtoa_r+0x3e2>
 80041ce:	4b27      	ldr	r3, [pc, #156]	@ (800426c <_dtoa_r+0x5bc>)
 80041d0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80041d2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80041d6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80041da:	4454      	add	r4, sl
 80041dc:	2900      	cmp	r1, #0
 80041de:	d053      	beq.n	8004288 <_dtoa_r+0x5d8>
 80041e0:	4928      	ldr	r1, [pc, #160]	@ (8004284 <_dtoa_r+0x5d4>)
 80041e2:	2000      	movs	r0, #0
 80041e4:	f7fc fb42 	bl	800086c <__aeabi_ddiv>
 80041e8:	4633      	mov	r3, r6
 80041ea:	462a      	mov	r2, r5
 80041ec:	f7fc f85c 	bl	80002a8 <__aeabi_dsub>
 80041f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80041f4:	4656      	mov	r6, sl
 80041f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80041fa:	f7fc fcbd 	bl	8000b78 <__aeabi_d2iz>
 80041fe:	4605      	mov	r5, r0
 8004200:	f7fc f9a0 	bl	8000544 <__aeabi_i2d>
 8004204:	4602      	mov	r2, r0
 8004206:	460b      	mov	r3, r1
 8004208:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800420c:	f7fc f84c 	bl	80002a8 <__aeabi_dsub>
 8004210:	3530      	adds	r5, #48	@ 0x30
 8004212:	4602      	mov	r2, r0
 8004214:	460b      	mov	r3, r1
 8004216:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800421a:	f806 5b01 	strb.w	r5, [r6], #1
 800421e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004222:	f7fc fc6b 	bl	8000afc <__aeabi_dcmplt>
 8004226:	2800      	cmp	r0, #0
 8004228:	d171      	bne.n	800430e <_dtoa_r+0x65e>
 800422a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800422e:	4911      	ldr	r1, [pc, #68]	@ (8004274 <_dtoa_r+0x5c4>)
 8004230:	2000      	movs	r0, #0
 8004232:	f7fc f839 	bl	80002a8 <__aeabi_dsub>
 8004236:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800423a:	f7fc fc5f 	bl	8000afc <__aeabi_dcmplt>
 800423e:	2800      	cmp	r0, #0
 8004240:	f040 8095 	bne.w	800436e <_dtoa_r+0x6be>
 8004244:	42a6      	cmp	r6, r4
 8004246:	f43f af50 	beq.w	80040ea <_dtoa_r+0x43a>
 800424a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800424e:	4b0a      	ldr	r3, [pc, #40]	@ (8004278 <_dtoa_r+0x5c8>)
 8004250:	2200      	movs	r2, #0
 8004252:	f7fc f9e1 	bl	8000618 <__aeabi_dmul>
 8004256:	4b08      	ldr	r3, [pc, #32]	@ (8004278 <_dtoa_r+0x5c8>)
 8004258:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800425c:	2200      	movs	r2, #0
 800425e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004262:	f7fc f9d9 	bl	8000618 <__aeabi_dmul>
 8004266:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800426a:	e7c4      	b.n	80041f6 <_dtoa_r+0x546>
 800426c:	08005ec8 	.word	0x08005ec8
 8004270:	08005ea0 	.word	0x08005ea0
 8004274:	3ff00000 	.word	0x3ff00000
 8004278:	40240000 	.word	0x40240000
 800427c:	401c0000 	.word	0x401c0000
 8004280:	40140000 	.word	0x40140000
 8004284:	3fe00000 	.word	0x3fe00000
 8004288:	4631      	mov	r1, r6
 800428a:	4628      	mov	r0, r5
 800428c:	f7fc f9c4 	bl	8000618 <__aeabi_dmul>
 8004290:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004294:	9415      	str	r4, [sp, #84]	@ 0x54
 8004296:	4656      	mov	r6, sl
 8004298:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800429c:	f7fc fc6c 	bl	8000b78 <__aeabi_d2iz>
 80042a0:	4605      	mov	r5, r0
 80042a2:	f7fc f94f 	bl	8000544 <__aeabi_i2d>
 80042a6:	4602      	mov	r2, r0
 80042a8:	460b      	mov	r3, r1
 80042aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80042ae:	f7fb fffb 	bl	80002a8 <__aeabi_dsub>
 80042b2:	3530      	adds	r5, #48	@ 0x30
 80042b4:	f806 5b01 	strb.w	r5, [r6], #1
 80042b8:	4602      	mov	r2, r0
 80042ba:	460b      	mov	r3, r1
 80042bc:	42a6      	cmp	r6, r4
 80042be:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80042c2:	f04f 0200 	mov.w	r2, #0
 80042c6:	d124      	bne.n	8004312 <_dtoa_r+0x662>
 80042c8:	4bac      	ldr	r3, [pc, #688]	@ (800457c <_dtoa_r+0x8cc>)
 80042ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80042ce:	f7fb ffed 	bl	80002ac <__adddf3>
 80042d2:	4602      	mov	r2, r0
 80042d4:	460b      	mov	r3, r1
 80042d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80042da:	f7fc fc2d 	bl	8000b38 <__aeabi_dcmpgt>
 80042de:	2800      	cmp	r0, #0
 80042e0:	d145      	bne.n	800436e <_dtoa_r+0x6be>
 80042e2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80042e6:	49a5      	ldr	r1, [pc, #660]	@ (800457c <_dtoa_r+0x8cc>)
 80042e8:	2000      	movs	r0, #0
 80042ea:	f7fb ffdd 	bl	80002a8 <__aeabi_dsub>
 80042ee:	4602      	mov	r2, r0
 80042f0:	460b      	mov	r3, r1
 80042f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80042f6:	f7fc fc01 	bl	8000afc <__aeabi_dcmplt>
 80042fa:	2800      	cmp	r0, #0
 80042fc:	f43f aef5 	beq.w	80040ea <_dtoa_r+0x43a>
 8004300:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8004302:	1e73      	subs	r3, r6, #1
 8004304:	9315      	str	r3, [sp, #84]	@ 0x54
 8004306:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800430a:	2b30      	cmp	r3, #48	@ 0x30
 800430c:	d0f8      	beq.n	8004300 <_dtoa_r+0x650>
 800430e:	9f04      	ldr	r7, [sp, #16]
 8004310:	e73e      	b.n	8004190 <_dtoa_r+0x4e0>
 8004312:	4b9b      	ldr	r3, [pc, #620]	@ (8004580 <_dtoa_r+0x8d0>)
 8004314:	f7fc f980 	bl	8000618 <__aeabi_dmul>
 8004318:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800431c:	e7bc      	b.n	8004298 <_dtoa_r+0x5e8>
 800431e:	d10c      	bne.n	800433a <_dtoa_r+0x68a>
 8004320:	4b98      	ldr	r3, [pc, #608]	@ (8004584 <_dtoa_r+0x8d4>)
 8004322:	2200      	movs	r2, #0
 8004324:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004328:	f7fc f976 	bl	8000618 <__aeabi_dmul>
 800432c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004330:	f7fc fbf8 	bl	8000b24 <__aeabi_dcmpge>
 8004334:	2800      	cmp	r0, #0
 8004336:	f000 8157 	beq.w	80045e8 <_dtoa_r+0x938>
 800433a:	2400      	movs	r4, #0
 800433c:	4625      	mov	r5, r4
 800433e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004340:	43db      	mvns	r3, r3
 8004342:	9304      	str	r3, [sp, #16]
 8004344:	4656      	mov	r6, sl
 8004346:	2700      	movs	r7, #0
 8004348:	4621      	mov	r1, r4
 800434a:	4658      	mov	r0, fp
 800434c:	f000 fbb4 	bl	8004ab8 <_Bfree>
 8004350:	2d00      	cmp	r5, #0
 8004352:	d0dc      	beq.n	800430e <_dtoa_r+0x65e>
 8004354:	b12f      	cbz	r7, 8004362 <_dtoa_r+0x6b2>
 8004356:	42af      	cmp	r7, r5
 8004358:	d003      	beq.n	8004362 <_dtoa_r+0x6b2>
 800435a:	4639      	mov	r1, r7
 800435c:	4658      	mov	r0, fp
 800435e:	f000 fbab 	bl	8004ab8 <_Bfree>
 8004362:	4629      	mov	r1, r5
 8004364:	4658      	mov	r0, fp
 8004366:	f000 fba7 	bl	8004ab8 <_Bfree>
 800436a:	e7d0      	b.n	800430e <_dtoa_r+0x65e>
 800436c:	9704      	str	r7, [sp, #16]
 800436e:	4633      	mov	r3, r6
 8004370:	461e      	mov	r6, r3
 8004372:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004376:	2a39      	cmp	r2, #57	@ 0x39
 8004378:	d107      	bne.n	800438a <_dtoa_r+0x6da>
 800437a:	459a      	cmp	sl, r3
 800437c:	d1f8      	bne.n	8004370 <_dtoa_r+0x6c0>
 800437e:	9a04      	ldr	r2, [sp, #16]
 8004380:	3201      	adds	r2, #1
 8004382:	9204      	str	r2, [sp, #16]
 8004384:	2230      	movs	r2, #48	@ 0x30
 8004386:	f88a 2000 	strb.w	r2, [sl]
 800438a:	781a      	ldrb	r2, [r3, #0]
 800438c:	3201      	adds	r2, #1
 800438e:	701a      	strb	r2, [r3, #0]
 8004390:	e7bd      	b.n	800430e <_dtoa_r+0x65e>
 8004392:	4b7b      	ldr	r3, [pc, #492]	@ (8004580 <_dtoa_r+0x8d0>)
 8004394:	2200      	movs	r2, #0
 8004396:	f7fc f93f 	bl	8000618 <__aeabi_dmul>
 800439a:	2200      	movs	r2, #0
 800439c:	2300      	movs	r3, #0
 800439e:	4604      	mov	r4, r0
 80043a0:	460d      	mov	r5, r1
 80043a2:	f7fc fba1 	bl	8000ae8 <__aeabi_dcmpeq>
 80043a6:	2800      	cmp	r0, #0
 80043a8:	f43f aebb 	beq.w	8004122 <_dtoa_r+0x472>
 80043ac:	e6f0      	b.n	8004190 <_dtoa_r+0x4e0>
 80043ae:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80043b0:	2a00      	cmp	r2, #0
 80043b2:	f000 80db 	beq.w	800456c <_dtoa_r+0x8bc>
 80043b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80043b8:	2a01      	cmp	r2, #1
 80043ba:	f300 80bf 	bgt.w	800453c <_dtoa_r+0x88c>
 80043be:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80043c0:	2a00      	cmp	r2, #0
 80043c2:	f000 80b7 	beq.w	8004534 <_dtoa_r+0x884>
 80043c6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80043ca:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80043cc:	4646      	mov	r6, r8
 80043ce:	9a08      	ldr	r2, [sp, #32]
 80043d0:	2101      	movs	r1, #1
 80043d2:	441a      	add	r2, r3
 80043d4:	4658      	mov	r0, fp
 80043d6:	4498      	add	r8, r3
 80043d8:	9208      	str	r2, [sp, #32]
 80043da:	f000 fc21 	bl	8004c20 <__i2b>
 80043de:	4605      	mov	r5, r0
 80043e0:	b15e      	cbz	r6, 80043fa <_dtoa_r+0x74a>
 80043e2:	9b08      	ldr	r3, [sp, #32]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	dd08      	ble.n	80043fa <_dtoa_r+0x74a>
 80043e8:	42b3      	cmp	r3, r6
 80043ea:	9a08      	ldr	r2, [sp, #32]
 80043ec:	bfa8      	it	ge
 80043ee:	4633      	movge	r3, r6
 80043f0:	eba8 0803 	sub.w	r8, r8, r3
 80043f4:	1af6      	subs	r6, r6, r3
 80043f6:	1ad3      	subs	r3, r2, r3
 80043f8:	9308      	str	r3, [sp, #32]
 80043fa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80043fc:	b1f3      	cbz	r3, 800443c <_dtoa_r+0x78c>
 80043fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004400:	2b00      	cmp	r3, #0
 8004402:	f000 80b7 	beq.w	8004574 <_dtoa_r+0x8c4>
 8004406:	b18c      	cbz	r4, 800442c <_dtoa_r+0x77c>
 8004408:	4629      	mov	r1, r5
 800440a:	4622      	mov	r2, r4
 800440c:	4658      	mov	r0, fp
 800440e:	f000 fcc7 	bl	8004da0 <__pow5mult>
 8004412:	464a      	mov	r2, r9
 8004414:	4601      	mov	r1, r0
 8004416:	4605      	mov	r5, r0
 8004418:	4658      	mov	r0, fp
 800441a:	f000 fc17 	bl	8004c4c <__multiply>
 800441e:	4649      	mov	r1, r9
 8004420:	9004      	str	r0, [sp, #16]
 8004422:	4658      	mov	r0, fp
 8004424:	f000 fb48 	bl	8004ab8 <_Bfree>
 8004428:	9b04      	ldr	r3, [sp, #16]
 800442a:	4699      	mov	r9, r3
 800442c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800442e:	1b1a      	subs	r2, r3, r4
 8004430:	d004      	beq.n	800443c <_dtoa_r+0x78c>
 8004432:	4649      	mov	r1, r9
 8004434:	4658      	mov	r0, fp
 8004436:	f000 fcb3 	bl	8004da0 <__pow5mult>
 800443a:	4681      	mov	r9, r0
 800443c:	2101      	movs	r1, #1
 800443e:	4658      	mov	r0, fp
 8004440:	f000 fbee 	bl	8004c20 <__i2b>
 8004444:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004446:	4604      	mov	r4, r0
 8004448:	2b00      	cmp	r3, #0
 800444a:	f000 81cf 	beq.w	80047ec <_dtoa_r+0xb3c>
 800444e:	461a      	mov	r2, r3
 8004450:	4601      	mov	r1, r0
 8004452:	4658      	mov	r0, fp
 8004454:	f000 fca4 	bl	8004da0 <__pow5mult>
 8004458:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800445a:	2b01      	cmp	r3, #1
 800445c:	4604      	mov	r4, r0
 800445e:	f300 8095 	bgt.w	800458c <_dtoa_r+0x8dc>
 8004462:	9b02      	ldr	r3, [sp, #8]
 8004464:	2b00      	cmp	r3, #0
 8004466:	f040 8087 	bne.w	8004578 <_dtoa_r+0x8c8>
 800446a:	9b03      	ldr	r3, [sp, #12]
 800446c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004470:	2b00      	cmp	r3, #0
 8004472:	f040 8089 	bne.w	8004588 <_dtoa_r+0x8d8>
 8004476:	9b03      	ldr	r3, [sp, #12]
 8004478:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800447c:	0d1b      	lsrs	r3, r3, #20
 800447e:	051b      	lsls	r3, r3, #20
 8004480:	b12b      	cbz	r3, 800448e <_dtoa_r+0x7de>
 8004482:	9b08      	ldr	r3, [sp, #32]
 8004484:	3301      	adds	r3, #1
 8004486:	9308      	str	r3, [sp, #32]
 8004488:	f108 0801 	add.w	r8, r8, #1
 800448c:	2301      	movs	r3, #1
 800448e:	930a      	str	r3, [sp, #40]	@ 0x28
 8004490:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004492:	2b00      	cmp	r3, #0
 8004494:	f000 81b0 	beq.w	80047f8 <_dtoa_r+0xb48>
 8004498:	6923      	ldr	r3, [r4, #16]
 800449a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800449e:	6918      	ldr	r0, [r3, #16]
 80044a0:	f000 fb72 	bl	8004b88 <__hi0bits>
 80044a4:	f1c0 0020 	rsb	r0, r0, #32
 80044a8:	9b08      	ldr	r3, [sp, #32]
 80044aa:	4418      	add	r0, r3
 80044ac:	f010 001f 	ands.w	r0, r0, #31
 80044b0:	d077      	beq.n	80045a2 <_dtoa_r+0x8f2>
 80044b2:	f1c0 0320 	rsb	r3, r0, #32
 80044b6:	2b04      	cmp	r3, #4
 80044b8:	dd6b      	ble.n	8004592 <_dtoa_r+0x8e2>
 80044ba:	9b08      	ldr	r3, [sp, #32]
 80044bc:	f1c0 001c 	rsb	r0, r0, #28
 80044c0:	4403      	add	r3, r0
 80044c2:	4480      	add	r8, r0
 80044c4:	4406      	add	r6, r0
 80044c6:	9308      	str	r3, [sp, #32]
 80044c8:	f1b8 0f00 	cmp.w	r8, #0
 80044cc:	dd05      	ble.n	80044da <_dtoa_r+0x82a>
 80044ce:	4649      	mov	r1, r9
 80044d0:	4642      	mov	r2, r8
 80044d2:	4658      	mov	r0, fp
 80044d4:	f000 fcbe 	bl	8004e54 <__lshift>
 80044d8:	4681      	mov	r9, r0
 80044da:	9b08      	ldr	r3, [sp, #32]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	dd05      	ble.n	80044ec <_dtoa_r+0x83c>
 80044e0:	4621      	mov	r1, r4
 80044e2:	461a      	mov	r2, r3
 80044e4:	4658      	mov	r0, fp
 80044e6:	f000 fcb5 	bl	8004e54 <__lshift>
 80044ea:	4604      	mov	r4, r0
 80044ec:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d059      	beq.n	80045a6 <_dtoa_r+0x8f6>
 80044f2:	4621      	mov	r1, r4
 80044f4:	4648      	mov	r0, r9
 80044f6:	f000 fd19 	bl	8004f2c <__mcmp>
 80044fa:	2800      	cmp	r0, #0
 80044fc:	da53      	bge.n	80045a6 <_dtoa_r+0x8f6>
 80044fe:	1e7b      	subs	r3, r7, #1
 8004500:	9304      	str	r3, [sp, #16]
 8004502:	4649      	mov	r1, r9
 8004504:	2300      	movs	r3, #0
 8004506:	220a      	movs	r2, #10
 8004508:	4658      	mov	r0, fp
 800450a:	f000 faf7 	bl	8004afc <__multadd>
 800450e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004510:	4681      	mov	r9, r0
 8004512:	2b00      	cmp	r3, #0
 8004514:	f000 8172 	beq.w	80047fc <_dtoa_r+0xb4c>
 8004518:	2300      	movs	r3, #0
 800451a:	4629      	mov	r1, r5
 800451c:	220a      	movs	r2, #10
 800451e:	4658      	mov	r0, fp
 8004520:	f000 faec 	bl	8004afc <__multadd>
 8004524:	9b00      	ldr	r3, [sp, #0]
 8004526:	2b00      	cmp	r3, #0
 8004528:	4605      	mov	r5, r0
 800452a:	dc67      	bgt.n	80045fc <_dtoa_r+0x94c>
 800452c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800452e:	2b02      	cmp	r3, #2
 8004530:	dc41      	bgt.n	80045b6 <_dtoa_r+0x906>
 8004532:	e063      	b.n	80045fc <_dtoa_r+0x94c>
 8004534:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8004536:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800453a:	e746      	b.n	80043ca <_dtoa_r+0x71a>
 800453c:	9b07      	ldr	r3, [sp, #28]
 800453e:	1e5c      	subs	r4, r3, #1
 8004540:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004542:	42a3      	cmp	r3, r4
 8004544:	bfbf      	itttt	lt
 8004546:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8004548:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800454a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800454c:	1ae3      	sublt	r3, r4, r3
 800454e:	bfb4      	ite	lt
 8004550:	18d2      	addlt	r2, r2, r3
 8004552:	1b1c      	subge	r4, r3, r4
 8004554:	9b07      	ldr	r3, [sp, #28]
 8004556:	bfbc      	itt	lt
 8004558:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800455a:	2400      	movlt	r4, #0
 800455c:	2b00      	cmp	r3, #0
 800455e:	bfb5      	itete	lt
 8004560:	eba8 0603 	sublt.w	r6, r8, r3
 8004564:	9b07      	ldrge	r3, [sp, #28]
 8004566:	2300      	movlt	r3, #0
 8004568:	4646      	movge	r6, r8
 800456a:	e730      	b.n	80043ce <_dtoa_r+0x71e>
 800456c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800456e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8004570:	4646      	mov	r6, r8
 8004572:	e735      	b.n	80043e0 <_dtoa_r+0x730>
 8004574:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004576:	e75c      	b.n	8004432 <_dtoa_r+0x782>
 8004578:	2300      	movs	r3, #0
 800457a:	e788      	b.n	800448e <_dtoa_r+0x7de>
 800457c:	3fe00000 	.word	0x3fe00000
 8004580:	40240000 	.word	0x40240000
 8004584:	40140000 	.word	0x40140000
 8004588:	9b02      	ldr	r3, [sp, #8]
 800458a:	e780      	b.n	800448e <_dtoa_r+0x7de>
 800458c:	2300      	movs	r3, #0
 800458e:	930a      	str	r3, [sp, #40]	@ 0x28
 8004590:	e782      	b.n	8004498 <_dtoa_r+0x7e8>
 8004592:	d099      	beq.n	80044c8 <_dtoa_r+0x818>
 8004594:	9a08      	ldr	r2, [sp, #32]
 8004596:	331c      	adds	r3, #28
 8004598:	441a      	add	r2, r3
 800459a:	4498      	add	r8, r3
 800459c:	441e      	add	r6, r3
 800459e:	9208      	str	r2, [sp, #32]
 80045a0:	e792      	b.n	80044c8 <_dtoa_r+0x818>
 80045a2:	4603      	mov	r3, r0
 80045a4:	e7f6      	b.n	8004594 <_dtoa_r+0x8e4>
 80045a6:	9b07      	ldr	r3, [sp, #28]
 80045a8:	9704      	str	r7, [sp, #16]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	dc20      	bgt.n	80045f0 <_dtoa_r+0x940>
 80045ae:	9300      	str	r3, [sp, #0]
 80045b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80045b2:	2b02      	cmp	r3, #2
 80045b4:	dd1e      	ble.n	80045f4 <_dtoa_r+0x944>
 80045b6:	9b00      	ldr	r3, [sp, #0]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	f47f aec0 	bne.w	800433e <_dtoa_r+0x68e>
 80045be:	4621      	mov	r1, r4
 80045c0:	2205      	movs	r2, #5
 80045c2:	4658      	mov	r0, fp
 80045c4:	f000 fa9a 	bl	8004afc <__multadd>
 80045c8:	4601      	mov	r1, r0
 80045ca:	4604      	mov	r4, r0
 80045cc:	4648      	mov	r0, r9
 80045ce:	f000 fcad 	bl	8004f2c <__mcmp>
 80045d2:	2800      	cmp	r0, #0
 80045d4:	f77f aeb3 	ble.w	800433e <_dtoa_r+0x68e>
 80045d8:	4656      	mov	r6, sl
 80045da:	2331      	movs	r3, #49	@ 0x31
 80045dc:	f806 3b01 	strb.w	r3, [r6], #1
 80045e0:	9b04      	ldr	r3, [sp, #16]
 80045e2:	3301      	adds	r3, #1
 80045e4:	9304      	str	r3, [sp, #16]
 80045e6:	e6ae      	b.n	8004346 <_dtoa_r+0x696>
 80045e8:	9c07      	ldr	r4, [sp, #28]
 80045ea:	9704      	str	r7, [sp, #16]
 80045ec:	4625      	mov	r5, r4
 80045ee:	e7f3      	b.n	80045d8 <_dtoa_r+0x928>
 80045f0:	9b07      	ldr	r3, [sp, #28]
 80045f2:	9300      	str	r3, [sp, #0]
 80045f4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	f000 8104 	beq.w	8004804 <_dtoa_r+0xb54>
 80045fc:	2e00      	cmp	r6, #0
 80045fe:	dd05      	ble.n	800460c <_dtoa_r+0x95c>
 8004600:	4629      	mov	r1, r5
 8004602:	4632      	mov	r2, r6
 8004604:	4658      	mov	r0, fp
 8004606:	f000 fc25 	bl	8004e54 <__lshift>
 800460a:	4605      	mov	r5, r0
 800460c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800460e:	2b00      	cmp	r3, #0
 8004610:	d05a      	beq.n	80046c8 <_dtoa_r+0xa18>
 8004612:	6869      	ldr	r1, [r5, #4]
 8004614:	4658      	mov	r0, fp
 8004616:	f000 fa0f 	bl	8004a38 <_Balloc>
 800461a:	4606      	mov	r6, r0
 800461c:	b928      	cbnz	r0, 800462a <_dtoa_r+0x97a>
 800461e:	4b84      	ldr	r3, [pc, #528]	@ (8004830 <_dtoa_r+0xb80>)
 8004620:	4602      	mov	r2, r0
 8004622:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8004626:	f7ff bb5a 	b.w	8003cde <_dtoa_r+0x2e>
 800462a:	692a      	ldr	r2, [r5, #16]
 800462c:	3202      	adds	r2, #2
 800462e:	0092      	lsls	r2, r2, #2
 8004630:	f105 010c 	add.w	r1, r5, #12
 8004634:	300c      	adds	r0, #12
 8004636:	f000 ffaf 	bl	8005598 <memcpy>
 800463a:	2201      	movs	r2, #1
 800463c:	4631      	mov	r1, r6
 800463e:	4658      	mov	r0, fp
 8004640:	f000 fc08 	bl	8004e54 <__lshift>
 8004644:	f10a 0301 	add.w	r3, sl, #1
 8004648:	9307      	str	r3, [sp, #28]
 800464a:	9b00      	ldr	r3, [sp, #0]
 800464c:	4453      	add	r3, sl
 800464e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004650:	9b02      	ldr	r3, [sp, #8]
 8004652:	f003 0301 	and.w	r3, r3, #1
 8004656:	462f      	mov	r7, r5
 8004658:	930a      	str	r3, [sp, #40]	@ 0x28
 800465a:	4605      	mov	r5, r0
 800465c:	9b07      	ldr	r3, [sp, #28]
 800465e:	4621      	mov	r1, r4
 8004660:	3b01      	subs	r3, #1
 8004662:	4648      	mov	r0, r9
 8004664:	9300      	str	r3, [sp, #0]
 8004666:	f7ff fa98 	bl	8003b9a <quorem>
 800466a:	4639      	mov	r1, r7
 800466c:	9002      	str	r0, [sp, #8]
 800466e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8004672:	4648      	mov	r0, r9
 8004674:	f000 fc5a 	bl	8004f2c <__mcmp>
 8004678:	462a      	mov	r2, r5
 800467a:	9008      	str	r0, [sp, #32]
 800467c:	4621      	mov	r1, r4
 800467e:	4658      	mov	r0, fp
 8004680:	f000 fc70 	bl	8004f64 <__mdiff>
 8004684:	68c2      	ldr	r2, [r0, #12]
 8004686:	4606      	mov	r6, r0
 8004688:	bb02      	cbnz	r2, 80046cc <_dtoa_r+0xa1c>
 800468a:	4601      	mov	r1, r0
 800468c:	4648      	mov	r0, r9
 800468e:	f000 fc4d 	bl	8004f2c <__mcmp>
 8004692:	4602      	mov	r2, r0
 8004694:	4631      	mov	r1, r6
 8004696:	4658      	mov	r0, fp
 8004698:	920e      	str	r2, [sp, #56]	@ 0x38
 800469a:	f000 fa0d 	bl	8004ab8 <_Bfree>
 800469e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80046a0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80046a2:	9e07      	ldr	r6, [sp, #28]
 80046a4:	ea43 0102 	orr.w	r1, r3, r2
 80046a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80046aa:	4319      	orrs	r1, r3
 80046ac:	d110      	bne.n	80046d0 <_dtoa_r+0xa20>
 80046ae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80046b2:	d029      	beq.n	8004708 <_dtoa_r+0xa58>
 80046b4:	9b08      	ldr	r3, [sp, #32]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	dd02      	ble.n	80046c0 <_dtoa_r+0xa10>
 80046ba:	9b02      	ldr	r3, [sp, #8]
 80046bc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80046c0:	9b00      	ldr	r3, [sp, #0]
 80046c2:	f883 8000 	strb.w	r8, [r3]
 80046c6:	e63f      	b.n	8004348 <_dtoa_r+0x698>
 80046c8:	4628      	mov	r0, r5
 80046ca:	e7bb      	b.n	8004644 <_dtoa_r+0x994>
 80046cc:	2201      	movs	r2, #1
 80046ce:	e7e1      	b.n	8004694 <_dtoa_r+0x9e4>
 80046d0:	9b08      	ldr	r3, [sp, #32]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	db04      	blt.n	80046e0 <_dtoa_r+0xa30>
 80046d6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80046d8:	430b      	orrs	r3, r1
 80046da:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80046dc:	430b      	orrs	r3, r1
 80046de:	d120      	bne.n	8004722 <_dtoa_r+0xa72>
 80046e0:	2a00      	cmp	r2, #0
 80046e2:	dded      	ble.n	80046c0 <_dtoa_r+0xa10>
 80046e4:	4649      	mov	r1, r9
 80046e6:	2201      	movs	r2, #1
 80046e8:	4658      	mov	r0, fp
 80046ea:	f000 fbb3 	bl	8004e54 <__lshift>
 80046ee:	4621      	mov	r1, r4
 80046f0:	4681      	mov	r9, r0
 80046f2:	f000 fc1b 	bl	8004f2c <__mcmp>
 80046f6:	2800      	cmp	r0, #0
 80046f8:	dc03      	bgt.n	8004702 <_dtoa_r+0xa52>
 80046fa:	d1e1      	bne.n	80046c0 <_dtoa_r+0xa10>
 80046fc:	f018 0f01 	tst.w	r8, #1
 8004700:	d0de      	beq.n	80046c0 <_dtoa_r+0xa10>
 8004702:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004706:	d1d8      	bne.n	80046ba <_dtoa_r+0xa0a>
 8004708:	9a00      	ldr	r2, [sp, #0]
 800470a:	2339      	movs	r3, #57	@ 0x39
 800470c:	7013      	strb	r3, [r2, #0]
 800470e:	4633      	mov	r3, r6
 8004710:	461e      	mov	r6, r3
 8004712:	3b01      	subs	r3, #1
 8004714:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8004718:	2a39      	cmp	r2, #57	@ 0x39
 800471a:	d052      	beq.n	80047c2 <_dtoa_r+0xb12>
 800471c:	3201      	adds	r2, #1
 800471e:	701a      	strb	r2, [r3, #0]
 8004720:	e612      	b.n	8004348 <_dtoa_r+0x698>
 8004722:	2a00      	cmp	r2, #0
 8004724:	dd07      	ble.n	8004736 <_dtoa_r+0xa86>
 8004726:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800472a:	d0ed      	beq.n	8004708 <_dtoa_r+0xa58>
 800472c:	9a00      	ldr	r2, [sp, #0]
 800472e:	f108 0301 	add.w	r3, r8, #1
 8004732:	7013      	strb	r3, [r2, #0]
 8004734:	e608      	b.n	8004348 <_dtoa_r+0x698>
 8004736:	9b07      	ldr	r3, [sp, #28]
 8004738:	9a07      	ldr	r2, [sp, #28]
 800473a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800473e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004740:	4293      	cmp	r3, r2
 8004742:	d028      	beq.n	8004796 <_dtoa_r+0xae6>
 8004744:	4649      	mov	r1, r9
 8004746:	2300      	movs	r3, #0
 8004748:	220a      	movs	r2, #10
 800474a:	4658      	mov	r0, fp
 800474c:	f000 f9d6 	bl	8004afc <__multadd>
 8004750:	42af      	cmp	r7, r5
 8004752:	4681      	mov	r9, r0
 8004754:	f04f 0300 	mov.w	r3, #0
 8004758:	f04f 020a 	mov.w	r2, #10
 800475c:	4639      	mov	r1, r7
 800475e:	4658      	mov	r0, fp
 8004760:	d107      	bne.n	8004772 <_dtoa_r+0xac2>
 8004762:	f000 f9cb 	bl	8004afc <__multadd>
 8004766:	4607      	mov	r7, r0
 8004768:	4605      	mov	r5, r0
 800476a:	9b07      	ldr	r3, [sp, #28]
 800476c:	3301      	adds	r3, #1
 800476e:	9307      	str	r3, [sp, #28]
 8004770:	e774      	b.n	800465c <_dtoa_r+0x9ac>
 8004772:	f000 f9c3 	bl	8004afc <__multadd>
 8004776:	4629      	mov	r1, r5
 8004778:	4607      	mov	r7, r0
 800477a:	2300      	movs	r3, #0
 800477c:	220a      	movs	r2, #10
 800477e:	4658      	mov	r0, fp
 8004780:	f000 f9bc 	bl	8004afc <__multadd>
 8004784:	4605      	mov	r5, r0
 8004786:	e7f0      	b.n	800476a <_dtoa_r+0xaba>
 8004788:	9b00      	ldr	r3, [sp, #0]
 800478a:	2b00      	cmp	r3, #0
 800478c:	bfcc      	ite	gt
 800478e:	461e      	movgt	r6, r3
 8004790:	2601      	movle	r6, #1
 8004792:	4456      	add	r6, sl
 8004794:	2700      	movs	r7, #0
 8004796:	4649      	mov	r1, r9
 8004798:	2201      	movs	r2, #1
 800479a:	4658      	mov	r0, fp
 800479c:	f000 fb5a 	bl	8004e54 <__lshift>
 80047a0:	4621      	mov	r1, r4
 80047a2:	4681      	mov	r9, r0
 80047a4:	f000 fbc2 	bl	8004f2c <__mcmp>
 80047a8:	2800      	cmp	r0, #0
 80047aa:	dcb0      	bgt.n	800470e <_dtoa_r+0xa5e>
 80047ac:	d102      	bne.n	80047b4 <_dtoa_r+0xb04>
 80047ae:	f018 0f01 	tst.w	r8, #1
 80047b2:	d1ac      	bne.n	800470e <_dtoa_r+0xa5e>
 80047b4:	4633      	mov	r3, r6
 80047b6:	461e      	mov	r6, r3
 80047b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80047bc:	2a30      	cmp	r2, #48	@ 0x30
 80047be:	d0fa      	beq.n	80047b6 <_dtoa_r+0xb06>
 80047c0:	e5c2      	b.n	8004348 <_dtoa_r+0x698>
 80047c2:	459a      	cmp	sl, r3
 80047c4:	d1a4      	bne.n	8004710 <_dtoa_r+0xa60>
 80047c6:	9b04      	ldr	r3, [sp, #16]
 80047c8:	3301      	adds	r3, #1
 80047ca:	9304      	str	r3, [sp, #16]
 80047cc:	2331      	movs	r3, #49	@ 0x31
 80047ce:	f88a 3000 	strb.w	r3, [sl]
 80047d2:	e5b9      	b.n	8004348 <_dtoa_r+0x698>
 80047d4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80047d6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8004834 <_dtoa_r+0xb84>
 80047da:	b11b      	cbz	r3, 80047e4 <_dtoa_r+0xb34>
 80047dc:	f10a 0308 	add.w	r3, sl, #8
 80047e0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80047e2:	6013      	str	r3, [r2, #0]
 80047e4:	4650      	mov	r0, sl
 80047e6:	b019      	add	sp, #100	@ 0x64
 80047e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	f77f ae37 	ble.w	8004462 <_dtoa_r+0x7b2>
 80047f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80047f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80047f8:	2001      	movs	r0, #1
 80047fa:	e655      	b.n	80044a8 <_dtoa_r+0x7f8>
 80047fc:	9b00      	ldr	r3, [sp, #0]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	f77f aed6 	ble.w	80045b0 <_dtoa_r+0x900>
 8004804:	4656      	mov	r6, sl
 8004806:	4621      	mov	r1, r4
 8004808:	4648      	mov	r0, r9
 800480a:	f7ff f9c6 	bl	8003b9a <quorem>
 800480e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8004812:	f806 8b01 	strb.w	r8, [r6], #1
 8004816:	9b00      	ldr	r3, [sp, #0]
 8004818:	eba6 020a 	sub.w	r2, r6, sl
 800481c:	4293      	cmp	r3, r2
 800481e:	ddb3      	ble.n	8004788 <_dtoa_r+0xad8>
 8004820:	4649      	mov	r1, r9
 8004822:	2300      	movs	r3, #0
 8004824:	220a      	movs	r2, #10
 8004826:	4658      	mov	r0, fp
 8004828:	f000 f968 	bl	8004afc <__multadd>
 800482c:	4681      	mov	r9, r0
 800482e:	e7ea      	b.n	8004806 <_dtoa_r+0xb56>
 8004830:	08005e24 	.word	0x08005e24
 8004834:	08005da8 	.word	0x08005da8

08004838 <_free_r>:
 8004838:	b538      	push	{r3, r4, r5, lr}
 800483a:	4605      	mov	r5, r0
 800483c:	2900      	cmp	r1, #0
 800483e:	d041      	beq.n	80048c4 <_free_r+0x8c>
 8004840:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004844:	1f0c      	subs	r4, r1, #4
 8004846:	2b00      	cmp	r3, #0
 8004848:	bfb8      	it	lt
 800484a:	18e4      	addlt	r4, r4, r3
 800484c:	f000 f8e8 	bl	8004a20 <__malloc_lock>
 8004850:	4a1d      	ldr	r2, [pc, #116]	@ (80048c8 <_free_r+0x90>)
 8004852:	6813      	ldr	r3, [r2, #0]
 8004854:	b933      	cbnz	r3, 8004864 <_free_r+0x2c>
 8004856:	6063      	str	r3, [r4, #4]
 8004858:	6014      	str	r4, [r2, #0]
 800485a:	4628      	mov	r0, r5
 800485c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004860:	f000 b8e4 	b.w	8004a2c <__malloc_unlock>
 8004864:	42a3      	cmp	r3, r4
 8004866:	d908      	bls.n	800487a <_free_r+0x42>
 8004868:	6820      	ldr	r0, [r4, #0]
 800486a:	1821      	adds	r1, r4, r0
 800486c:	428b      	cmp	r3, r1
 800486e:	bf01      	itttt	eq
 8004870:	6819      	ldreq	r1, [r3, #0]
 8004872:	685b      	ldreq	r3, [r3, #4]
 8004874:	1809      	addeq	r1, r1, r0
 8004876:	6021      	streq	r1, [r4, #0]
 8004878:	e7ed      	b.n	8004856 <_free_r+0x1e>
 800487a:	461a      	mov	r2, r3
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	b10b      	cbz	r3, 8004884 <_free_r+0x4c>
 8004880:	42a3      	cmp	r3, r4
 8004882:	d9fa      	bls.n	800487a <_free_r+0x42>
 8004884:	6811      	ldr	r1, [r2, #0]
 8004886:	1850      	adds	r0, r2, r1
 8004888:	42a0      	cmp	r0, r4
 800488a:	d10b      	bne.n	80048a4 <_free_r+0x6c>
 800488c:	6820      	ldr	r0, [r4, #0]
 800488e:	4401      	add	r1, r0
 8004890:	1850      	adds	r0, r2, r1
 8004892:	4283      	cmp	r3, r0
 8004894:	6011      	str	r1, [r2, #0]
 8004896:	d1e0      	bne.n	800485a <_free_r+0x22>
 8004898:	6818      	ldr	r0, [r3, #0]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	6053      	str	r3, [r2, #4]
 800489e:	4408      	add	r0, r1
 80048a0:	6010      	str	r0, [r2, #0]
 80048a2:	e7da      	b.n	800485a <_free_r+0x22>
 80048a4:	d902      	bls.n	80048ac <_free_r+0x74>
 80048a6:	230c      	movs	r3, #12
 80048a8:	602b      	str	r3, [r5, #0]
 80048aa:	e7d6      	b.n	800485a <_free_r+0x22>
 80048ac:	6820      	ldr	r0, [r4, #0]
 80048ae:	1821      	adds	r1, r4, r0
 80048b0:	428b      	cmp	r3, r1
 80048b2:	bf04      	itt	eq
 80048b4:	6819      	ldreq	r1, [r3, #0]
 80048b6:	685b      	ldreq	r3, [r3, #4]
 80048b8:	6063      	str	r3, [r4, #4]
 80048ba:	bf04      	itt	eq
 80048bc:	1809      	addeq	r1, r1, r0
 80048be:	6021      	streq	r1, [r4, #0]
 80048c0:	6054      	str	r4, [r2, #4]
 80048c2:	e7ca      	b.n	800485a <_free_r+0x22>
 80048c4:	bd38      	pop	{r3, r4, r5, pc}
 80048c6:	bf00      	nop
 80048c8:	200003f0 	.word	0x200003f0

080048cc <malloc>:
 80048cc:	4b02      	ldr	r3, [pc, #8]	@ (80048d8 <malloc+0xc>)
 80048ce:	4601      	mov	r1, r0
 80048d0:	6818      	ldr	r0, [r3, #0]
 80048d2:	f000 b825 	b.w	8004920 <_malloc_r>
 80048d6:	bf00      	nop
 80048d8:	20000010 	.word	0x20000010

080048dc <sbrk_aligned>:
 80048dc:	b570      	push	{r4, r5, r6, lr}
 80048de:	4e0f      	ldr	r6, [pc, #60]	@ (800491c <sbrk_aligned+0x40>)
 80048e0:	460c      	mov	r4, r1
 80048e2:	6831      	ldr	r1, [r6, #0]
 80048e4:	4605      	mov	r5, r0
 80048e6:	b911      	cbnz	r1, 80048ee <sbrk_aligned+0x12>
 80048e8:	f000 fe46 	bl	8005578 <_sbrk_r>
 80048ec:	6030      	str	r0, [r6, #0]
 80048ee:	4621      	mov	r1, r4
 80048f0:	4628      	mov	r0, r5
 80048f2:	f000 fe41 	bl	8005578 <_sbrk_r>
 80048f6:	1c43      	adds	r3, r0, #1
 80048f8:	d103      	bne.n	8004902 <sbrk_aligned+0x26>
 80048fa:	f04f 34ff 	mov.w	r4, #4294967295
 80048fe:	4620      	mov	r0, r4
 8004900:	bd70      	pop	{r4, r5, r6, pc}
 8004902:	1cc4      	adds	r4, r0, #3
 8004904:	f024 0403 	bic.w	r4, r4, #3
 8004908:	42a0      	cmp	r0, r4
 800490a:	d0f8      	beq.n	80048fe <sbrk_aligned+0x22>
 800490c:	1a21      	subs	r1, r4, r0
 800490e:	4628      	mov	r0, r5
 8004910:	f000 fe32 	bl	8005578 <_sbrk_r>
 8004914:	3001      	adds	r0, #1
 8004916:	d1f2      	bne.n	80048fe <sbrk_aligned+0x22>
 8004918:	e7ef      	b.n	80048fa <sbrk_aligned+0x1e>
 800491a:	bf00      	nop
 800491c:	200003ec 	.word	0x200003ec

08004920 <_malloc_r>:
 8004920:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004924:	1ccd      	adds	r5, r1, #3
 8004926:	f025 0503 	bic.w	r5, r5, #3
 800492a:	3508      	adds	r5, #8
 800492c:	2d0c      	cmp	r5, #12
 800492e:	bf38      	it	cc
 8004930:	250c      	movcc	r5, #12
 8004932:	2d00      	cmp	r5, #0
 8004934:	4606      	mov	r6, r0
 8004936:	db01      	blt.n	800493c <_malloc_r+0x1c>
 8004938:	42a9      	cmp	r1, r5
 800493a:	d904      	bls.n	8004946 <_malloc_r+0x26>
 800493c:	230c      	movs	r3, #12
 800493e:	6033      	str	r3, [r6, #0]
 8004940:	2000      	movs	r0, #0
 8004942:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004946:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004a1c <_malloc_r+0xfc>
 800494a:	f000 f869 	bl	8004a20 <__malloc_lock>
 800494e:	f8d8 3000 	ldr.w	r3, [r8]
 8004952:	461c      	mov	r4, r3
 8004954:	bb44      	cbnz	r4, 80049a8 <_malloc_r+0x88>
 8004956:	4629      	mov	r1, r5
 8004958:	4630      	mov	r0, r6
 800495a:	f7ff ffbf 	bl	80048dc <sbrk_aligned>
 800495e:	1c43      	adds	r3, r0, #1
 8004960:	4604      	mov	r4, r0
 8004962:	d158      	bne.n	8004a16 <_malloc_r+0xf6>
 8004964:	f8d8 4000 	ldr.w	r4, [r8]
 8004968:	4627      	mov	r7, r4
 800496a:	2f00      	cmp	r7, #0
 800496c:	d143      	bne.n	80049f6 <_malloc_r+0xd6>
 800496e:	2c00      	cmp	r4, #0
 8004970:	d04b      	beq.n	8004a0a <_malloc_r+0xea>
 8004972:	6823      	ldr	r3, [r4, #0]
 8004974:	4639      	mov	r1, r7
 8004976:	4630      	mov	r0, r6
 8004978:	eb04 0903 	add.w	r9, r4, r3
 800497c:	f000 fdfc 	bl	8005578 <_sbrk_r>
 8004980:	4581      	cmp	r9, r0
 8004982:	d142      	bne.n	8004a0a <_malloc_r+0xea>
 8004984:	6821      	ldr	r1, [r4, #0]
 8004986:	1a6d      	subs	r5, r5, r1
 8004988:	4629      	mov	r1, r5
 800498a:	4630      	mov	r0, r6
 800498c:	f7ff ffa6 	bl	80048dc <sbrk_aligned>
 8004990:	3001      	adds	r0, #1
 8004992:	d03a      	beq.n	8004a0a <_malloc_r+0xea>
 8004994:	6823      	ldr	r3, [r4, #0]
 8004996:	442b      	add	r3, r5
 8004998:	6023      	str	r3, [r4, #0]
 800499a:	f8d8 3000 	ldr.w	r3, [r8]
 800499e:	685a      	ldr	r2, [r3, #4]
 80049a0:	bb62      	cbnz	r2, 80049fc <_malloc_r+0xdc>
 80049a2:	f8c8 7000 	str.w	r7, [r8]
 80049a6:	e00f      	b.n	80049c8 <_malloc_r+0xa8>
 80049a8:	6822      	ldr	r2, [r4, #0]
 80049aa:	1b52      	subs	r2, r2, r5
 80049ac:	d420      	bmi.n	80049f0 <_malloc_r+0xd0>
 80049ae:	2a0b      	cmp	r2, #11
 80049b0:	d917      	bls.n	80049e2 <_malloc_r+0xc2>
 80049b2:	1961      	adds	r1, r4, r5
 80049b4:	42a3      	cmp	r3, r4
 80049b6:	6025      	str	r5, [r4, #0]
 80049b8:	bf18      	it	ne
 80049ba:	6059      	strne	r1, [r3, #4]
 80049bc:	6863      	ldr	r3, [r4, #4]
 80049be:	bf08      	it	eq
 80049c0:	f8c8 1000 	streq.w	r1, [r8]
 80049c4:	5162      	str	r2, [r4, r5]
 80049c6:	604b      	str	r3, [r1, #4]
 80049c8:	4630      	mov	r0, r6
 80049ca:	f000 f82f 	bl	8004a2c <__malloc_unlock>
 80049ce:	f104 000b 	add.w	r0, r4, #11
 80049d2:	1d23      	adds	r3, r4, #4
 80049d4:	f020 0007 	bic.w	r0, r0, #7
 80049d8:	1ac2      	subs	r2, r0, r3
 80049da:	bf1c      	itt	ne
 80049dc:	1a1b      	subne	r3, r3, r0
 80049de:	50a3      	strne	r3, [r4, r2]
 80049e0:	e7af      	b.n	8004942 <_malloc_r+0x22>
 80049e2:	6862      	ldr	r2, [r4, #4]
 80049e4:	42a3      	cmp	r3, r4
 80049e6:	bf0c      	ite	eq
 80049e8:	f8c8 2000 	streq.w	r2, [r8]
 80049ec:	605a      	strne	r2, [r3, #4]
 80049ee:	e7eb      	b.n	80049c8 <_malloc_r+0xa8>
 80049f0:	4623      	mov	r3, r4
 80049f2:	6864      	ldr	r4, [r4, #4]
 80049f4:	e7ae      	b.n	8004954 <_malloc_r+0x34>
 80049f6:	463c      	mov	r4, r7
 80049f8:	687f      	ldr	r7, [r7, #4]
 80049fa:	e7b6      	b.n	800496a <_malloc_r+0x4a>
 80049fc:	461a      	mov	r2, r3
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	42a3      	cmp	r3, r4
 8004a02:	d1fb      	bne.n	80049fc <_malloc_r+0xdc>
 8004a04:	2300      	movs	r3, #0
 8004a06:	6053      	str	r3, [r2, #4]
 8004a08:	e7de      	b.n	80049c8 <_malloc_r+0xa8>
 8004a0a:	230c      	movs	r3, #12
 8004a0c:	6033      	str	r3, [r6, #0]
 8004a0e:	4630      	mov	r0, r6
 8004a10:	f000 f80c 	bl	8004a2c <__malloc_unlock>
 8004a14:	e794      	b.n	8004940 <_malloc_r+0x20>
 8004a16:	6005      	str	r5, [r0, #0]
 8004a18:	e7d6      	b.n	80049c8 <_malloc_r+0xa8>
 8004a1a:	bf00      	nop
 8004a1c:	200003f0 	.word	0x200003f0

08004a20 <__malloc_lock>:
 8004a20:	4801      	ldr	r0, [pc, #4]	@ (8004a28 <__malloc_lock+0x8>)
 8004a22:	f7ff b8b8 	b.w	8003b96 <__retarget_lock_acquire_recursive>
 8004a26:	bf00      	nop
 8004a28:	200003e8 	.word	0x200003e8

08004a2c <__malloc_unlock>:
 8004a2c:	4801      	ldr	r0, [pc, #4]	@ (8004a34 <__malloc_unlock+0x8>)
 8004a2e:	f7ff b8b3 	b.w	8003b98 <__retarget_lock_release_recursive>
 8004a32:	bf00      	nop
 8004a34:	200003e8 	.word	0x200003e8

08004a38 <_Balloc>:
 8004a38:	b570      	push	{r4, r5, r6, lr}
 8004a3a:	69c6      	ldr	r6, [r0, #28]
 8004a3c:	4604      	mov	r4, r0
 8004a3e:	460d      	mov	r5, r1
 8004a40:	b976      	cbnz	r6, 8004a60 <_Balloc+0x28>
 8004a42:	2010      	movs	r0, #16
 8004a44:	f7ff ff42 	bl	80048cc <malloc>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	61e0      	str	r0, [r4, #28]
 8004a4c:	b920      	cbnz	r0, 8004a58 <_Balloc+0x20>
 8004a4e:	4b18      	ldr	r3, [pc, #96]	@ (8004ab0 <_Balloc+0x78>)
 8004a50:	4818      	ldr	r0, [pc, #96]	@ (8004ab4 <_Balloc+0x7c>)
 8004a52:	216b      	movs	r1, #107	@ 0x6b
 8004a54:	f000 fdae 	bl	80055b4 <__assert_func>
 8004a58:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004a5c:	6006      	str	r6, [r0, #0]
 8004a5e:	60c6      	str	r6, [r0, #12]
 8004a60:	69e6      	ldr	r6, [r4, #28]
 8004a62:	68f3      	ldr	r3, [r6, #12]
 8004a64:	b183      	cbz	r3, 8004a88 <_Balloc+0x50>
 8004a66:	69e3      	ldr	r3, [r4, #28]
 8004a68:	68db      	ldr	r3, [r3, #12]
 8004a6a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004a6e:	b9b8      	cbnz	r0, 8004aa0 <_Balloc+0x68>
 8004a70:	2101      	movs	r1, #1
 8004a72:	fa01 f605 	lsl.w	r6, r1, r5
 8004a76:	1d72      	adds	r2, r6, #5
 8004a78:	0092      	lsls	r2, r2, #2
 8004a7a:	4620      	mov	r0, r4
 8004a7c:	f000 fdb8 	bl	80055f0 <_calloc_r>
 8004a80:	b160      	cbz	r0, 8004a9c <_Balloc+0x64>
 8004a82:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004a86:	e00e      	b.n	8004aa6 <_Balloc+0x6e>
 8004a88:	2221      	movs	r2, #33	@ 0x21
 8004a8a:	2104      	movs	r1, #4
 8004a8c:	4620      	mov	r0, r4
 8004a8e:	f000 fdaf 	bl	80055f0 <_calloc_r>
 8004a92:	69e3      	ldr	r3, [r4, #28]
 8004a94:	60f0      	str	r0, [r6, #12]
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d1e4      	bne.n	8004a66 <_Balloc+0x2e>
 8004a9c:	2000      	movs	r0, #0
 8004a9e:	bd70      	pop	{r4, r5, r6, pc}
 8004aa0:	6802      	ldr	r2, [r0, #0]
 8004aa2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004aac:	e7f7      	b.n	8004a9e <_Balloc+0x66>
 8004aae:	bf00      	nop
 8004ab0:	08005db5 	.word	0x08005db5
 8004ab4:	08005e35 	.word	0x08005e35

08004ab8 <_Bfree>:
 8004ab8:	b570      	push	{r4, r5, r6, lr}
 8004aba:	69c6      	ldr	r6, [r0, #28]
 8004abc:	4605      	mov	r5, r0
 8004abe:	460c      	mov	r4, r1
 8004ac0:	b976      	cbnz	r6, 8004ae0 <_Bfree+0x28>
 8004ac2:	2010      	movs	r0, #16
 8004ac4:	f7ff ff02 	bl	80048cc <malloc>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	61e8      	str	r0, [r5, #28]
 8004acc:	b920      	cbnz	r0, 8004ad8 <_Bfree+0x20>
 8004ace:	4b09      	ldr	r3, [pc, #36]	@ (8004af4 <_Bfree+0x3c>)
 8004ad0:	4809      	ldr	r0, [pc, #36]	@ (8004af8 <_Bfree+0x40>)
 8004ad2:	218f      	movs	r1, #143	@ 0x8f
 8004ad4:	f000 fd6e 	bl	80055b4 <__assert_func>
 8004ad8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004adc:	6006      	str	r6, [r0, #0]
 8004ade:	60c6      	str	r6, [r0, #12]
 8004ae0:	b13c      	cbz	r4, 8004af2 <_Bfree+0x3a>
 8004ae2:	69eb      	ldr	r3, [r5, #28]
 8004ae4:	6862      	ldr	r2, [r4, #4]
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004aec:	6021      	str	r1, [r4, #0]
 8004aee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004af2:	bd70      	pop	{r4, r5, r6, pc}
 8004af4:	08005db5 	.word	0x08005db5
 8004af8:	08005e35 	.word	0x08005e35

08004afc <__multadd>:
 8004afc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b00:	690d      	ldr	r5, [r1, #16]
 8004b02:	4607      	mov	r7, r0
 8004b04:	460c      	mov	r4, r1
 8004b06:	461e      	mov	r6, r3
 8004b08:	f101 0c14 	add.w	ip, r1, #20
 8004b0c:	2000      	movs	r0, #0
 8004b0e:	f8dc 3000 	ldr.w	r3, [ip]
 8004b12:	b299      	uxth	r1, r3
 8004b14:	fb02 6101 	mla	r1, r2, r1, r6
 8004b18:	0c1e      	lsrs	r6, r3, #16
 8004b1a:	0c0b      	lsrs	r3, r1, #16
 8004b1c:	fb02 3306 	mla	r3, r2, r6, r3
 8004b20:	b289      	uxth	r1, r1
 8004b22:	3001      	adds	r0, #1
 8004b24:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004b28:	4285      	cmp	r5, r0
 8004b2a:	f84c 1b04 	str.w	r1, [ip], #4
 8004b2e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004b32:	dcec      	bgt.n	8004b0e <__multadd+0x12>
 8004b34:	b30e      	cbz	r6, 8004b7a <__multadd+0x7e>
 8004b36:	68a3      	ldr	r3, [r4, #8]
 8004b38:	42ab      	cmp	r3, r5
 8004b3a:	dc19      	bgt.n	8004b70 <__multadd+0x74>
 8004b3c:	6861      	ldr	r1, [r4, #4]
 8004b3e:	4638      	mov	r0, r7
 8004b40:	3101      	adds	r1, #1
 8004b42:	f7ff ff79 	bl	8004a38 <_Balloc>
 8004b46:	4680      	mov	r8, r0
 8004b48:	b928      	cbnz	r0, 8004b56 <__multadd+0x5a>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	4b0c      	ldr	r3, [pc, #48]	@ (8004b80 <__multadd+0x84>)
 8004b4e:	480d      	ldr	r0, [pc, #52]	@ (8004b84 <__multadd+0x88>)
 8004b50:	21ba      	movs	r1, #186	@ 0xba
 8004b52:	f000 fd2f 	bl	80055b4 <__assert_func>
 8004b56:	6922      	ldr	r2, [r4, #16]
 8004b58:	3202      	adds	r2, #2
 8004b5a:	f104 010c 	add.w	r1, r4, #12
 8004b5e:	0092      	lsls	r2, r2, #2
 8004b60:	300c      	adds	r0, #12
 8004b62:	f000 fd19 	bl	8005598 <memcpy>
 8004b66:	4621      	mov	r1, r4
 8004b68:	4638      	mov	r0, r7
 8004b6a:	f7ff ffa5 	bl	8004ab8 <_Bfree>
 8004b6e:	4644      	mov	r4, r8
 8004b70:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004b74:	3501      	adds	r5, #1
 8004b76:	615e      	str	r6, [r3, #20]
 8004b78:	6125      	str	r5, [r4, #16]
 8004b7a:	4620      	mov	r0, r4
 8004b7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b80:	08005e24 	.word	0x08005e24
 8004b84:	08005e35 	.word	0x08005e35

08004b88 <__hi0bits>:
 8004b88:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	bf36      	itet	cc
 8004b90:	0403      	lslcc	r3, r0, #16
 8004b92:	2000      	movcs	r0, #0
 8004b94:	2010      	movcc	r0, #16
 8004b96:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004b9a:	bf3c      	itt	cc
 8004b9c:	021b      	lslcc	r3, r3, #8
 8004b9e:	3008      	addcc	r0, #8
 8004ba0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004ba4:	bf3c      	itt	cc
 8004ba6:	011b      	lslcc	r3, r3, #4
 8004ba8:	3004      	addcc	r0, #4
 8004baa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bae:	bf3c      	itt	cc
 8004bb0:	009b      	lslcc	r3, r3, #2
 8004bb2:	3002      	addcc	r0, #2
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	db05      	blt.n	8004bc4 <__hi0bits+0x3c>
 8004bb8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8004bbc:	f100 0001 	add.w	r0, r0, #1
 8004bc0:	bf08      	it	eq
 8004bc2:	2020      	moveq	r0, #32
 8004bc4:	4770      	bx	lr

08004bc6 <__lo0bits>:
 8004bc6:	6803      	ldr	r3, [r0, #0]
 8004bc8:	4602      	mov	r2, r0
 8004bca:	f013 0007 	ands.w	r0, r3, #7
 8004bce:	d00b      	beq.n	8004be8 <__lo0bits+0x22>
 8004bd0:	07d9      	lsls	r1, r3, #31
 8004bd2:	d421      	bmi.n	8004c18 <__lo0bits+0x52>
 8004bd4:	0798      	lsls	r0, r3, #30
 8004bd6:	bf49      	itett	mi
 8004bd8:	085b      	lsrmi	r3, r3, #1
 8004bda:	089b      	lsrpl	r3, r3, #2
 8004bdc:	2001      	movmi	r0, #1
 8004bde:	6013      	strmi	r3, [r2, #0]
 8004be0:	bf5c      	itt	pl
 8004be2:	6013      	strpl	r3, [r2, #0]
 8004be4:	2002      	movpl	r0, #2
 8004be6:	4770      	bx	lr
 8004be8:	b299      	uxth	r1, r3
 8004bea:	b909      	cbnz	r1, 8004bf0 <__lo0bits+0x2a>
 8004bec:	0c1b      	lsrs	r3, r3, #16
 8004bee:	2010      	movs	r0, #16
 8004bf0:	b2d9      	uxtb	r1, r3
 8004bf2:	b909      	cbnz	r1, 8004bf8 <__lo0bits+0x32>
 8004bf4:	3008      	adds	r0, #8
 8004bf6:	0a1b      	lsrs	r3, r3, #8
 8004bf8:	0719      	lsls	r1, r3, #28
 8004bfa:	bf04      	itt	eq
 8004bfc:	091b      	lsreq	r3, r3, #4
 8004bfe:	3004      	addeq	r0, #4
 8004c00:	0799      	lsls	r1, r3, #30
 8004c02:	bf04      	itt	eq
 8004c04:	089b      	lsreq	r3, r3, #2
 8004c06:	3002      	addeq	r0, #2
 8004c08:	07d9      	lsls	r1, r3, #31
 8004c0a:	d403      	bmi.n	8004c14 <__lo0bits+0x4e>
 8004c0c:	085b      	lsrs	r3, r3, #1
 8004c0e:	f100 0001 	add.w	r0, r0, #1
 8004c12:	d003      	beq.n	8004c1c <__lo0bits+0x56>
 8004c14:	6013      	str	r3, [r2, #0]
 8004c16:	4770      	bx	lr
 8004c18:	2000      	movs	r0, #0
 8004c1a:	4770      	bx	lr
 8004c1c:	2020      	movs	r0, #32
 8004c1e:	4770      	bx	lr

08004c20 <__i2b>:
 8004c20:	b510      	push	{r4, lr}
 8004c22:	460c      	mov	r4, r1
 8004c24:	2101      	movs	r1, #1
 8004c26:	f7ff ff07 	bl	8004a38 <_Balloc>
 8004c2a:	4602      	mov	r2, r0
 8004c2c:	b928      	cbnz	r0, 8004c3a <__i2b+0x1a>
 8004c2e:	4b05      	ldr	r3, [pc, #20]	@ (8004c44 <__i2b+0x24>)
 8004c30:	4805      	ldr	r0, [pc, #20]	@ (8004c48 <__i2b+0x28>)
 8004c32:	f240 1145 	movw	r1, #325	@ 0x145
 8004c36:	f000 fcbd 	bl	80055b4 <__assert_func>
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	6144      	str	r4, [r0, #20]
 8004c3e:	6103      	str	r3, [r0, #16]
 8004c40:	bd10      	pop	{r4, pc}
 8004c42:	bf00      	nop
 8004c44:	08005e24 	.word	0x08005e24
 8004c48:	08005e35 	.word	0x08005e35

08004c4c <__multiply>:
 8004c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c50:	4614      	mov	r4, r2
 8004c52:	690a      	ldr	r2, [r1, #16]
 8004c54:	6923      	ldr	r3, [r4, #16]
 8004c56:	429a      	cmp	r2, r3
 8004c58:	bfa8      	it	ge
 8004c5a:	4623      	movge	r3, r4
 8004c5c:	460f      	mov	r7, r1
 8004c5e:	bfa4      	itt	ge
 8004c60:	460c      	movge	r4, r1
 8004c62:	461f      	movge	r7, r3
 8004c64:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8004c68:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8004c6c:	68a3      	ldr	r3, [r4, #8]
 8004c6e:	6861      	ldr	r1, [r4, #4]
 8004c70:	eb0a 0609 	add.w	r6, sl, r9
 8004c74:	42b3      	cmp	r3, r6
 8004c76:	b085      	sub	sp, #20
 8004c78:	bfb8      	it	lt
 8004c7a:	3101      	addlt	r1, #1
 8004c7c:	f7ff fedc 	bl	8004a38 <_Balloc>
 8004c80:	b930      	cbnz	r0, 8004c90 <__multiply+0x44>
 8004c82:	4602      	mov	r2, r0
 8004c84:	4b44      	ldr	r3, [pc, #272]	@ (8004d98 <__multiply+0x14c>)
 8004c86:	4845      	ldr	r0, [pc, #276]	@ (8004d9c <__multiply+0x150>)
 8004c88:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8004c8c:	f000 fc92 	bl	80055b4 <__assert_func>
 8004c90:	f100 0514 	add.w	r5, r0, #20
 8004c94:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004c98:	462b      	mov	r3, r5
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	4543      	cmp	r3, r8
 8004c9e:	d321      	bcc.n	8004ce4 <__multiply+0x98>
 8004ca0:	f107 0114 	add.w	r1, r7, #20
 8004ca4:	f104 0214 	add.w	r2, r4, #20
 8004ca8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8004cac:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8004cb0:	9302      	str	r3, [sp, #8]
 8004cb2:	1b13      	subs	r3, r2, r4
 8004cb4:	3b15      	subs	r3, #21
 8004cb6:	f023 0303 	bic.w	r3, r3, #3
 8004cba:	3304      	adds	r3, #4
 8004cbc:	f104 0715 	add.w	r7, r4, #21
 8004cc0:	42ba      	cmp	r2, r7
 8004cc2:	bf38      	it	cc
 8004cc4:	2304      	movcc	r3, #4
 8004cc6:	9301      	str	r3, [sp, #4]
 8004cc8:	9b02      	ldr	r3, [sp, #8]
 8004cca:	9103      	str	r1, [sp, #12]
 8004ccc:	428b      	cmp	r3, r1
 8004cce:	d80c      	bhi.n	8004cea <__multiply+0x9e>
 8004cd0:	2e00      	cmp	r6, #0
 8004cd2:	dd03      	ble.n	8004cdc <__multiply+0x90>
 8004cd4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d05b      	beq.n	8004d94 <__multiply+0x148>
 8004cdc:	6106      	str	r6, [r0, #16]
 8004cde:	b005      	add	sp, #20
 8004ce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ce4:	f843 2b04 	str.w	r2, [r3], #4
 8004ce8:	e7d8      	b.n	8004c9c <__multiply+0x50>
 8004cea:	f8b1 a000 	ldrh.w	sl, [r1]
 8004cee:	f1ba 0f00 	cmp.w	sl, #0
 8004cf2:	d024      	beq.n	8004d3e <__multiply+0xf2>
 8004cf4:	f104 0e14 	add.w	lr, r4, #20
 8004cf8:	46a9      	mov	r9, r5
 8004cfa:	f04f 0c00 	mov.w	ip, #0
 8004cfe:	f85e 7b04 	ldr.w	r7, [lr], #4
 8004d02:	f8d9 3000 	ldr.w	r3, [r9]
 8004d06:	fa1f fb87 	uxth.w	fp, r7
 8004d0a:	b29b      	uxth	r3, r3
 8004d0c:	fb0a 330b 	mla	r3, sl, fp, r3
 8004d10:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8004d14:	f8d9 7000 	ldr.w	r7, [r9]
 8004d18:	4463      	add	r3, ip
 8004d1a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8004d1e:	fb0a c70b 	mla	r7, sl, fp, ip
 8004d22:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8004d2c:	4572      	cmp	r2, lr
 8004d2e:	f849 3b04 	str.w	r3, [r9], #4
 8004d32:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8004d36:	d8e2      	bhi.n	8004cfe <__multiply+0xb2>
 8004d38:	9b01      	ldr	r3, [sp, #4]
 8004d3a:	f845 c003 	str.w	ip, [r5, r3]
 8004d3e:	9b03      	ldr	r3, [sp, #12]
 8004d40:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8004d44:	3104      	adds	r1, #4
 8004d46:	f1b9 0f00 	cmp.w	r9, #0
 8004d4a:	d021      	beq.n	8004d90 <__multiply+0x144>
 8004d4c:	682b      	ldr	r3, [r5, #0]
 8004d4e:	f104 0c14 	add.w	ip, r4, #20
 8004d52:	46ae      	mov	lr, r5
 8004d54:	f04f 0a00 	mov.w	sl, #0
 8004d58:	f8bc b000 	ldrh.w	fp, [ip]
 8004d5c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8004d60:	fb09 770b 	mla	r7, r9, fp, r7
 8004d64:	4457      	add	r7, sl
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8004d6c:	f84e 3b04 	str.w	r3, [lr], #4
 8004d70:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004d74:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004d78:	f8be 3000 	ldrh.w	r3, [lr]
 8004d7c:	fb09 330a 	mla	r3, r9, sl, r3
 8004d80:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8004d84:	4562      	cmp	r2, ip
 8004d86:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004d8a:	d8e5      	bhi.n	8004d58 <__multiply+0x10c>
 8004d8c:	9f01      	ldr	r7, [sp, #4]
 8004d8e:	51eb      	str	r3, [r5, r7]
 8004d90:	3504      	adds	r5, #4
 8004d92:	e799      	b.n	8004cc8 <__multiply+0x7c>
 8004d94:	3e01      	subs	r6, #1
 8004d96:	e79b      	b.n	8004cd0 <__multiply+0x84>
 8004d98:	08005e24 	.word	0x08005e24
 8004d9c:	08005e35 	.word	0x08005e35

08004da0 <__pow5mult>:
 8004da0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004da4:	4615      	mov	r5, r2
 8004da6:	f012 0203 	ands.w	r2, r2, #3
 8004daa:	4607      	mov	r7, r0
 8004dac:	460e      	mov	r6, r1
 8004dae:	d007      	beq.n	8004dc0 <__pow5mult+0x20>
 8004db0:	4c25      	ldr	r4, [pc, #148]	@ (8004e48 <__pow5mult+0xa8>)
 8004db2:	3a01      	subs	r2, #1
 8004db4:	2300      	movs	r3, #0
 8004db6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004dba:	f7ff fe9f 	bl	8004afc <__multadd>
 8004dbe:	4606      	mov	r6, r0
 8004dc0:	10ad      	asrs	r5, r5, #2
 8004dc2:	d03d      	beq.n	8004e40 <__pow5mult+0xa0>
 8004dc4:	69fc      	ldr	r4, [r7, #28]
 8004dc6:	b97c      	cbnz	r4, 8004de8 <__pow5mult+0x48>
 8004dc8:	2010      	movs	r0, #16
 8004dca:	f7ff fd7f 	bl	80048cc <malloc>
 8004dce:	4602      	mov	r2, r0
 8004dd0:	61f8      	str	r0, [r7, #28]
 8004dd2:	b928      	cbnz	r0, 8004de0 <__pow5mult+0x40>
 8004dd4:	4b1d      	ldr	r3, [pc, #116]	@ (8004e4c <__pow5mult+0xac>)
 8004dd6:	481e      	ldr	r0, [pc, #120]	@ (8004e50 <__pow5mult+0xb0>)
 8004dd8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8004ddc:	f000 fbea 	bl	80055b4 <__assert_func>
 8004de0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004de4:	6004      	str	r4, [r0, #0]
 8004de6:	60c4      	str	r4, [r0, #12]
 8004de8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8004dec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004df0:	b94c      	cbnz	r4, 8004e06 <__pow5mult+0x66>
 8004df2:	f240 2171 	movw	r1, #625	@ 0x271
 8004df6:	4638      	mov	r0, r7
 8004df8:	f7ff ff12 	bl	8004c20 <__i2b>
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	f8c8 0008 	str.w	r0, [r8, #8]
 8004e02:	4604      	mov	r4, r0
 8004e04:	6003      	str	r3, [r0, #0]
 8004e06:	f04f 0900 	mov.w	r9, #0
 8004e0a:	07eb      	lsls	r3, r5, #31
 8004e0c:	d50a      	bpl.n	8004e24 <__pow5mult+0x84>
 8004e0e:	4631      	mov	r1, r6
 8004e10:	4622      	mov	r2, r4
 8004e12:	4638      	mov	r0, r7
 8004e14:	f7ff ff1a 	bl	8004c4c <__multiply>
 8004e18:	4631      	mov	r1, r6
 8004e1a:	4680      	mov	r8, r0
 8004e1c:	4638      	mov	r0, r7
 8004e1e:	f7ff fe4b 	bl	8004ab8 <_Bfree>
 8004e22:	4646      	mov	r6, r8
 8004e24:	106d      	asrs	r5, r5, #1
 8004e26:	d00b      	beq.n	8004e40 <__pow5mult+0xa0>
 8004e28:	6820      	ldr	r0, [r4, #0]
 8004e2a:	b938      	cbnz	r0, 8004e3c <__pow5mult+0x9c>
 8004e2c:	4622      	mov	r2, r4
 8004e2e:	4621      	mov	r1, r4
 8004e30:	4638      	mov	r0, r7
 8004e32:	f7ff ff0b 	bl	8004c4c <__multiply>
 8004e36:	6020      	str	r0, [r4, #0]
 8004e38:	f8c0 9000 	str.w	r9, [r0]
 8004e3c:	4604      	mov	r4, r0
 8004e3e:	e7e4      	b.n	8004e0a <__pow5mult+0x6a>
 8004e40:	4630      	mov	r0, r6
 8004e42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e46:	bf00      	nop
 8004e48:	08005e90 	.word	0x08005e90
 8004e4c:	08005db5 	.word	0x08005db5
 8004e50:	08005e35 	.word	0x08005e35

08004e54 <__lshift>:
 8004e54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e58:	460c      	mov	r4, r1
 8004e5a:	6849      	ldr	r1, [r1, #4]
 8004e5c:	6923      	ldr	r3, [r4, #16]
 8004e5e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004e62:	68a3      	ldr	r3, [r4, #8]
 8004e64:	4607      	mov	r7, r0
 8004e66:	4691      	mov	r9, r2
 8004e68:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004e6c:	f108 0601 	add.w	r6, r8, #1
 8004e70:	42b3      	cmp	r3, r6
 8004e72:	db0b      	blt.n	8004e8c <__lshift+0x38>
 8004e74:	4638      	mov	r0, r7
 8004e76:	f7ff fddf 	bl	8004a38 <_Balloc>
 8004e7a:	4605      	mov	r5, r0
 8004e7c:	b948      	cbnz	r0, 8004e92 <__lshift+0x3e>
 8004e7e:	4602      	mov	r2, r0
 8004e80:	4b28      	ldr	r3, [pc, #160]	@ (8004f24 <__lshift+0xd0>)
 8004e82:	4829      	ldr	r0, [pc, #164]	@ (8004f28 <__lshift+0xd4>)
 8004e84:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8004e88:	f000 fb94 	bl	80055b4 <__assert_func>
 8004e8c:	3101      	adds	r1, #1
 8004e8e:	005b      	lsls	r3, r3, #1
 8004e90:	e7ee      	b.n	8004e70 <__lshift+0x1c>
 8004e92:	2300      	movs	r3, #0
 8004e94:	f100 0114 	add.w	r1, r0, #20
 8004e98:	f100 0210 	add.w	r2, r0, #16
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	4553      	cmp	r3, sl
 8004ea0:	db33      	blt.n	8004f0a <__lshift+0xb6>
 8004ea2:	6920      	ldr	r0, [r4, #16]
 8004ea4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004ea8:	f104 0314 	add.w	r3, r4, #20
 8004eac:	f019 091f 	ands.w	r9, r9, #31
 8004eb0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004eb4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004eb8:	d02b      	beq.n	8004f12 <__lshift+0xbe>
 8004eba:	f1c9 0e20 	rsb	lr, r9, #32
 8004ebe:	468a      	mov	sl, r1
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	6818      	ldr	r0, [r3, #0]
 8004ec4:	fa00 f009 	lsl.w	r0, r0, r9
 8004ec8:	4310      	orrs	r0, r2
 8004eca:	f84a 0b04 	str.w	r0, [sl], #4
 8004ece:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ed2:	459c      	cmp	ip, r3
 8004ed4:	fa22 f20e 	lsr.w	r2, r2, lr
 8004ed8:	d8f3      	bhi.n	8004ec2 <__lshift+0x6e>
 8004eda:	ebac 0304 	sub.w	r3, ip, r4
 8004ede:	3b15      	subs	r3, #21
 8004ee0:	f023 0303 	bic.w	r3, r3, #3
 8004ee4:	3304      	adds	r3, #4
 8004ee6:	f104 0015 	add.w	r0, r4, #21
 8004eea:	4584      	cmp	ip, r0
 8004eec:	bf38      	it	cc
 8004eee:	2304      	movcc	r3, #4
 8004ef0:	50ca      	str	r2, [r1, r3]
 8004ef2:	b10a      	cbz	r2, 8004ef8 <__lshift+0xa4>
 8004ef4:	f108 0602 	add.w	r6, r8, #2
 8004ef8:	3e01      	subs	r6, #1
 8004efa:	4638      	mov	r0, r7
 8004efc:	612e      	str	r6, [r5, #16]
 8004efe:	4621      	mov	r1, r4
 8004f00:	f7ff fdda 	bl	8004ab8 <_Bfree>
 8004f04:	4628      	mov	r0, r5
 8004f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f0a:	f842 0f04 	str.w	r0, [r2, #4]!
 8004f0e:	3301      	adds	r3, #1
 8004f10:	e7c5      	b.n	8004e9e <__lshift+0x4a>
 8004f12:	3904      	subs	r1, #4
 8004f14:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f18:	f841 2f04 	str.w	r2, [r1, #4]!
 8004f1c:	459c      	cmp	ip, r3
 8004f1e:	d8f9      	bhi.n	8004f14 <__lshift+0xc0>
 8004f20:	e7ea      	b.n	8004ef8 <__lshift+0xa4>
 8004f22:	bf00      	nop
 8004f24:	08005e24 	.word	0x08005e24
 8004f28:	08005e35 	.word	0x08005e35

08004f2c <__mcmp>:
 8004f2c:	690a      	ldr	r2, [r1, #16]
 8004f2e:	4603      	mov	r3, r0
 8004f30:	6900      	ldr	r0, [r0, #16]
 8004f32:	1a80      	subs	r0, r0, r2
 8004f34:	b530      	push	{r4, r5, lr}
 8004f36:	d10e      	bne.n	8004f56 <__mcmp+0x2a>
 8004f38:	3314      	adds	r3, #20
 8004f3a:	3114      	adds	r1, #20
 8004f3c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8004f40:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8004f44:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004f48:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004f4c:	4295      	cmp	r5, r2
 8004f4e:	d003      	beq.n	8004f58 <__mcmp+0x2c>
 8004f50:	d205      	bcs.n	8004f5e <__mcmp+0x32>
 8004f52:	f04f 30ff 	mov.w	r0, #4294967295
 8004f56:	bd30      	pop	{r4, r5, pc}
 8004f58:	42a3      	cmp	r3, r4
 8004f5a:	d3f3      	bcc.n	8004f44 <__mcmp+0x18>
 8004f5c:	e7fb      	b.n	8004f56 <__mcmp+0x2a>
 8004f5e:	2001      	movs	r0, #1
 8004f60:	e7f9      	b.n	8004f56 <__mcmp+0x2a>
	...

08004f64 <__mdiff>:
 8004f64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f68:	4689      	mov	r9, r1
 8004f6a:	4606      	mov	r6, r0
 8004f6c:	4611      	mov	r1, r2
 8004f6e:	4648      	mov	r0, r9
 8004f70:	4614      	mov	r4, r2
 8004f72:	f7ff ffdb 	bl	8004f2c <__mcmp>
 8004f76:	1e05      	subs	r5, r0, #0
 8004f78:	d112      	bne.n	8004fa0 <__mdiff+0x3c>
 8004f7a:	4629      	mov	r1, r5
 8004f7c:	4630      	mov	r0, r6
 8004f7e:	f7ff fd5b 	bl	8004a38 <_Balloc>
 8004f82:	4602      	mov	r2, r0
 8004f84:	b928      	cbnz	r0, 8004f92 <__mdiff+0x2e>
 8004f86:	4b3f      	ldr	r3, [pc, #252]	@ (8005084 <__mdiff+0x120>)
 8004f88:	f240 2137 	movw	r1, #567	@ 0x237
 8004f8c:	483e      	ldr	r0, [pc, #248]	@ (8005088 <__mdiff+0x124>)
 8004f8e:	f000 fb11 	bl	80055b4 <__assert_func>
 8004f92:	2301      	movs	r3, #1
 8004f94:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004f98:	4610      	mov	r0, r2
 8004f9a:	b003      	add	sp, #12
 8004f9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fa0:	bfbc      	itt	lt
 8004fa2:	464b      	movlt	r3, r9
 8004fa4:	46a1      	movlt	r9, r4
 8004fa6:	4630      	mov	r0, r6
 8004fa8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8004fac:	bfba      	itte	lt
 8004fae:	461c      	movlt	r4, r3
 8004fb0:	2501      	movlt	r5, #1
 8004fb2:	2500      	movge	r5, #0
 8004fb4:	f7ff fd40 	bl	8004a38 <_Balloc>
 8004fb8:	4602      	mov	r2, r0
 8004fba:	b918      	cbnz	r0, 8004fc4 <__mdiff+0x60>
 8004fbc:	4b31      	ldr	r3, [pc, #196]	@ (8005084 <__mdiff+0x120>)
 8004fbe:	f240 2145 	movw	r1, #581	@ 0x245
 8004fc2:	e7e3      	b.n	8004f8c <__mdiff+0x28>
 8004fc4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8004fc8:	6926      	ldr	r6, [r4, #16]
 8004fca:	60c5      	str	r5, [r0, #12]
 8004fcc:	f109 0310 	add.w	r3, r9, #16
 8004fd0:	f109 0514 	add.w	r5, r9, #20
 8004fd4:	f104 0e14 	add.w	lr, r4, #20
 8004fd8:	f100 0b14 	add.w	fp, r0, #20
 8004fdc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8004fe0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8004fe4:	9301      	str	r3, [sp, #4]
 8004fe6:	46d9      	mov	r9, fp
 8004fe8:	f04f 0c00 	mov.w	ip, #0
 8004fec:	9b01      	ldr	r3, [sp, #4]
 8004fee:	f85e 0b04 	ldr.w	r0, [lr], #4
 8004ff2:	f853 af04 	ldr.w	sl, [r3, #4]!
 8004ff6:	9301      	str	r3, [sp, #4]
 8004ff8:	fa1f f38a 	uxth.w	r3, sl
 8004ffc:	4619      	mov	r1, r3
 8004ffe:	b283      	uxth	r3, r0
 8005000:	1acb      	subs	r3, r1, r3
 8005002:	0c00      	lsrs	r0, r0, #16
 8005004:	4463      	add	r3, ip
 8005006:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800500a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800500e:	b29b      	uxth	r3, r3
 8005010:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005014:	4576      	cmp	r6, lr
 8005016:	f849 3b04 	str.w	r3, [r9], #4
 800501a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800501e:	d8e5      	bhi.n	8004fec <__mdiff+0x88>
 8005020:	1b33      	subs	r3, r6, r4
 8005022:	3b15      	subs	r3, #21
 8005024:	f023 0303 	bic.w	r3, r3, #3
 8005028:	3415      	adds	r4, #21
 800502a:	3304      	adds	r3, #4
 800502c:	42a6      	cmp	r6, r4
 800502e:	bf38      	it	cc
 8005030:	2304      	movcc	r3, #4
 8005032:	441d      	add	r5, r3
 8005034:	445b      	add	r3, fp
 8005036:	461e      	mov	r6, r3
 8005038:	462c      	mov	r4, r5
 800503a:	4544      	cmp	r4, r8
 800503c:	d30e      	bcc.n	800505c <__mdiff+0xf8>
 800503e:	f108 0103 	add.w	r1, r8, #3
 8005042:	1b49      	subs	r1, r1, r5
 8005044:	f021 0103 	bic.w	r1, r1, #3
 8005048:	3d03      	subs	r5, #3
 800504a:	45a8      	cmp	r8, r5
 800504c:	bf38      	it	cc
 800504e:	2100      	movcc	r1, #0
 8005050:	440b      	add	r3, r1
 8005052:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005056:	b191      	cbz	r1, 800507e <__mdiff+0x11a>
 8005058:	6117      	str	r7, [r2, #16]
 800505a:	e79d      	b.n	8004f98 <__mdiff+0x34>
 800505c:	f854 1b04 	ldr.w	r1, [r4], #4
 8005060:	46e6      	mov	lr, ip
 8005062:	0c08      	lsrs	r0, r1, #16
 8005064:	fa1c fc81 	uxtah	ip, ip, r1
 8005068:	4471      	add	r1, lr
 800506a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800506e:	b289      	uxth	r1, r1
 8005070:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005074:	f846 1b04 	str.w	r1, [r6], #4
 8005078:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800507c:	e7dd      	b.n	800503a <__mdiff+0xd6>
 800507e:	3f01      	subs	r7, #1
 8005080:	e7e7      	b.n	8005052 <__mdiff+0xee>
 8005082:	bf00      	nop
 8005084:	08005e24 	.word	0x08005e24
 8005088:	08005e35 	.word	0x08005e35

0800508c <__d2b>:
 800508c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005090:	460f      	mov	r7, r1
 8005092:	2101      	movs	r1, #1
 8005094:	ec59 8b10 	vmov	r8, r9, d0
 8005098:	4616      	mov	r6, r2
 800509a:	f7ff fccd 	bl	8004a38 <_Balloc>
 800509e:	4604      	mov	r4, r0
 80050a0:	b930      	cbnz	r0, 80050b0 <__d2b+0x24>
 80050a2:	4602      	mov	r2, r0
 80050a4:	4b23      	ldr	r3, [pc, #140]	@ (8005134 <__d2b+0xa8>)
 80050a6:	4824      	ldr	r0, [pc, #144]	@ (8005138 <__d2b+0xac>)
 80050a8:	f240 310f 	movw	r1, #783	@ 0x30f
 80050ac:	f000 fa82 	bl	80055b4 <__assert_func>
 80050b0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80050b4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80050b8:	b10d      	cbz	r5, 80050be <__d2b+0x32>
 80050ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80050be:	9301      	str	r3, [sp, #4]
 80050c0:	f1b8 0300 	subs.w	r3, r8, #0
 80050c4:	d023      	beq.n	800510e <__d2b+0x82>
 80050c6:	4668      	mov	r0, sp
 80050c8:	9300      	str	r3, [sp, #0]
 80050ca:	f7ff fd7c 	bl	8004bc6 <__lo0bits>
 80050ce:	e9dd 1200 	ldrd	r1, r2, [sp]
 80050d2:	b1d0      	cbz	r0, 800510a <__d2b+0x7e>
 80050d4:	f1c0 0320 	rsb	r3, r0, #32
 80050d8:	fa02 f303 	lsl.w	r3, r2, r3
 80050dc:	430b      	orrs	r3, r1
 80050de:	40c2      	lsrs	r2, r0
 80050e0:	6163      	str	r3, [r4, #20]
 80050e2:	9201      	str	r2, [sp, #4]
 80050e4:	9b01      	ldr	r3, [sp, #4]
 80050e6:	61a3      	str	r3, [r4, #24]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	bf0c      	ite	eq
 80050ec:	2201      	moveq	r2, #1
 80050ee:	2202      	movne	r2, #2
 80050f0:	6122      	str	r2, [r4, #16]
 80050f2:	b1a5      	cbz	r5, 800511e <__d2b+0x92>
 80050f4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80050f8:	4405      	add	r5, r0
 80050fa:	603d      	str	r5, [r7, #0]
 80050fc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005100:	6030      	str	r0, [r6, #0]
 8005102:	4620      	mov	r0, r4
 8005104:	b003      	add	sp, #12
 8005106:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800510a:	6161      	str	r1, [r4, #20]
 800510c:	e7ea      	b.n	80050e4 <__d2b+0x58>
 800510e:	a801      	add	r0, sp, #4
 8005110:	f7ff fd59 	bl	8004bc6 <__lo0bits>
 8005114:	9b01      	ldr	r3, [sp, #4]
 8005116:	6163      	str	r3, [r4, #20]
 8005118:	3020      	adds	r0, #32
 800511a:	2201      	movs	r2, #1
 800511c:	e7e8      	b.n	80050f0 <__d2b+0x64>
 800511e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005122:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8005126:	6038      	str	r0, [r7, #0]
 8005128:	6918      	ldr	r0, [r3, #16]
 800512a:	f7ff fd2d 	bl	8004b88 <__hi0bits>
 800512e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005132:	e7e5      	b.n	8005100 <__d2b+0x74>
 8005134:	08005e24 	.word	0x08005e24
 8005138:	08005e35 	.word	0x08005e35

0800513c <__ssputs_r>:
 800513c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005140:	688e      	ldr	r6, [r1, #8]
 8005142:	461f      	mov	r7, r3
 8005144:	42be      	cmp	r6, r7
 8005146:	680b      	ldr	r3, [r1, #0]
 8005148:	4682      	mov	sl, r0
 800514a:	460c      	mov	r4, r1
 800514c:	4690      	mov	r8, r2
 800514e:	d82d      	bhi.n	80051ac <__ssputs_r+0x70>
 8005150:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005154:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005158:	d026      	beq.n	80051a8 <__ssputs_r+0x6c>
 800515a:	6965      	ldr	r5, [r4, #20]
 800515c:	6909      	ldr	r1, [r1, #16]
 800515e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005162:	eba3 0901 	sub.w	r9, r3, r1
 8005166:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800516a:	1c7b      	adds	r3, r7, #1
 800516c:	444b      	add	r3, r9
 800516e:	106d      	asrs	r5, r5, #1
 8005170:	429d      	cmp	r5, r3
 8005172:	bf38      	it	cc
 8005174:	461d      	movcc	r5, r3
 8005176:	0553      	lsls	r3, r2, #21
 8005178:	d527      	bpl.n	80051ca <__ssputs_r+0x8e>
 800517a:	4629      	mov	r1, r5
 800517c:	f7ff fbd0 	bl	8004920 <_malloc_r>
 8005180:	4606      	mov	r6, r0
 8005182:	b360      	cbz	r0, 80051de <__ssputs_r+0xa2>
 8005184:	6921      	ldr	r1, [r4, #16]
 8005186:	464a      	mov	r2, r9
 8005188:	f000 fa06 	bl	8005598 <memcpy>
 800518c:	89a3      	ldrh	r3, [r4, #12]
 800518e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005192:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005196:	81a3      	strh	r3, [r4, #12]
 8005198:	6126      	str	r6, [r4, #16]
 800519a:	6165      	str	r5, [r4, #20]
 800519c:	444e      	add	r6, r9
 800519e:	eba5 0509 	sub.w	r5, r5, r9
 80051a2:	6026      	str	r6, [r4, #0]
 80051a4:	60a5      	str	r5, [r4, #8]
 80051a6:	463e      	mov	r6, r7
 80051a8:	42be      	cmp	r6, r7
 80051aa:	d900      	bls.n	80051ae <__ssputs_r+0x72>
 80051ac:	463e      	mov	r6, r7
 80051ae:	6820      	ldr	r0, [r4, #0]
 80051b0:	4632      	mov	r2, r6
 80051b2:	4641      	mov	r1, r8
 80051b4:	f000 f9c6 	bl	8005544 <memmove>
 80051b8:	68a3      	ldr	r3, [r4, #8]
 80051ba:	1b9b      	subs	r3, r3, r6
 80051bc:	60a3      	str	r3, [r4, #8]
 80051be:	6823      	ldr	r3, [r4, #0]
 80051c0:	4433      	add	r3, r6
 80051c2:	6023      	str	r3, [r4, #0]
 80051c4:	2000      	movs	r0, #0
 80051c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051ca:	462a      	mov	r2, r5
 80051cc:	f000 fa36 	bl	800563c <_realloc_r>
 80051d0:	4606      	mov	r6, r0
 80051d2:	2800      	cmp	r0, #0
 80051d4:	d1e0      	bne.n	8005198 <__ssputs_r+0x5c>
 80051d6:	6921      	ldr	r1, [r4, #16]
 80051d8:	4650      	mov	r0, sl
 80051da:	f7ff fb2d 	bl	8004838 <_free_r>
 80051de:	230c      	movs	r3, #12
 80051e0:	f8ca 3000 	str.w	r3, [sl]
 80051e4:	89a3      	ldrh	r3, [r4, #12]
 80051e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80051ea:	81a3      	strh	r3, [r4, #12]
 80051ec:	f04f 30ff 	mov.w	r0, #4294967295
 80051f0:	e7e9      	b.n	80051c6 <__ssputs_r+0x8a>
	...

080051f4 <_svfiprintf_r>:
 80051f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051f8:	4698      	mov	r8, r3
 80051fa:	898b      	ldrh	r3, [r1, #12]
 80051fc:	061b      	lsls	r3, r3, #24
 80051fe:	b09d      	sub	sp, #116	@ 0x74
 8005200:	4607      	mov	r7, r0
 8005202:	460d      	mov	r5, r1
 8005204:	4614      	mov	r4, r2
 8005206:	d510      	bpl.n	800522a <_svfiprintf_r+0x36>
 8005208:	690b      	ldr	r3, [r1, #16]
 800520a:	b973      	cbnz	r3, 800522a <_svfiprintf_r+0x36>
 800520c:	2140      	movs	r1, #64	@ 0x40
 800520e:	f7ff fb87 	bl	8004920 <_malloc_r>
 8005212:	6028      	str	r0, [r5, #0]
 8005214:	6128      	str	r0, [r5, #16]
 8005216:	b930      	cbnz	r0, 8005226 <_svfiprintf_r+0x32>
 8005218:	230c      	movs	r3, #12
 800521a:	603b      	str	r3, [r7, #0]
 800521c:	f04f 30ff 	mov.w	r0, #4294967295
 8005220:	b01d      	add	sp, #116	@ 0x74
 8005222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005226:	2340      	movs	r3, #64	@ 0x40
 8005228:	616b      	str	r3, [r5, #20]
 800522a:	2300      	movs	r3, #0
 800522c:	9309      	str	r3, [sp, #36]	@ 0x24
 800522e:	2320      	movs	r3, #32
 8005230:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005234:	f8cd 800c 	str.w	r8, [sp, #12]
 8005238:	2330      	movs	r3, #48	@ 0x30
 800523a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80053d8 <_svfiprintf_r+0x1e4>
 800523e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005242:	f04f 0901 	mov.w	r9, #1
 8005246:	4623      	mov	r3, r4
 8005248:	469a      	mov	sl, r3
 800524a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800524e:	b10a      	cbz	r2, 8005254 <_svfiprintf_r+0x60>
 8005250:	2a25      	cmp	r2, #37	@ 0x25
 8005252:	d1f9      	bne.n	8005248 <_svfiprintf_r+0x54>
 8005254:	ebba 0b04 	subs.w	fp, sl, r4
 8005258:	d00b      	beq.n	8005272 <_svfiprintf_r+0x7e>
 800525a:	465b      	mov	r3, fp
 800525c:	4622      	mov	r2, r4
 800525e:	4629      	mov	r1, r5
 8005260:	4638      	mov	r0, r7
 8005262:	f7ff ff6b 	bl	800513c <__ssputs_r>
 8005266:	3001      	adds	r0, #1
 8005268:	f000 80a7 	beq.w	80053ba <_svfiprintf_r+0x1c6>
 800526c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800526e:	445a      	add	r2, fp
 8005270:	9209      	str	r2, [sp, #36]	@ 0x24
 8005272:	f89a 3000 	ldrb.w	r3, [sl]
 8005276:	2b00      	cmp	r3, #0
 8005278:	f000 809f 	beq.w	80053ba <_svfiprintf_r+0x1c6>
 800527c:	2300      	movs	r3, #0
 800527e:	f04f 32ff 	mov.w	r2, #4294967295
 8005282:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005286:	f10a 0a01 	add.w	sl, sl, #1
 800528a:	9304      	str	r3, [sp, #16]
 800528c:	9307      	str	r3, [sp, #28]
 800528e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005292:	931a      	str	r3, [sp, #104]	@ 0x68
 8005294:	4654      	mov	r4, sl
 8005296:	2205      	movs	r2, #5
 8005298:	f814 1b01 	ldrb.w	r1, [r4], #1
 800529c:	484e      	ldr	r0, [pc, #312]	@ (80053d8 <_svfiprintf_r+0x1e4>)
 800529e:	f7fa ffa7 	bl	80001f0 <memchr>
 80052a2:	9a04      	ldr	r2, [sp, #16]
 80052a4:	b9d8      	cbnz	r0, 80052de <_svfiprintf_r+0xea>
 80052a6:	06d0      	lsls	r0, r2, #27
 80052a8:	bf44      	itt	mi
 80052aa:	2320      	movmi	r3, #32
 80052ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80052b0:	0711      	lsls	r1, r2, #28
 80052b2:	bf44      	itt	mi
 80052b4:	232b      	movmi	r3, #43	@ 0x2b
 80052b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80052ba:	f89a 3000 	ldrb.w	r3, [sl]
 80052be:	2b2a      	cmp	r3, #42	@ 0x2a
 80052c0:	d015      	beq.n	80052ee <_svfiprintf_r+0xfa>
 80052c2:	9a07      	ldr	r2, [sp, #28]
 80052c4:	4654      	mov	r4, sl
 80052c6:	2000      	movs	r0, #0
 80052c8:	f04f 0c0a 	mov.w	ip, #10
 80052cc:	4621      	mov	r1, r4
 80052ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80052d2:	3b30      	subs	r3, #48	@ 0x30
 80052d4:	2b09      	cmp	r3, #9
 80052d6:	d94b      	bls.n	8005370 <_svfiprintf_r+0x17c>
 80052d8:	b1b0      	cbz	r0, 8005308 <_svfiprintf_r+0x114>
 80052da:	9207      	str	r2, [sp, #28]
 80052dc:	e014      	b.n	8005308 <_svfiprintf_r+0x114>
 80052de:	eba0 0308 	sub.w	r3, r0, r8
 80052e2:	fa09 f303 	lsl.w	r3, r9, r3
 80052e6:	4313      	orrs	r3, r2
 80052e8:	9304      	str	r3, [sp, #16]
 80052ea:	46a2      	mov	sl, r4
 80052ec:	e7d2      	b.n	8005294 <_svfiprintf_r+0xa0>
 80052ee:	9b03      	ldr	r3, [sp, #12]
 80052f0:	1d19      	adds	r1, r3, #4
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	9103      	str	r1, [sp, #12]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	bfbb      	ittet	lt
 80052fa:	425b      	neglt	r3, r3
 80052fc:	f042 0202 	orrlt.w	r2, r2, #2
 8005300:	9307      	strge	r3, [sp, #28]
 8005302:	9307      	strlt	r3, [sp, #28]
 8005304:	bfb8      	it	lt
 8005306:	9204      	strlt	r2, [sp, #16]
 8005308:	7823      	ldrb	r3, [r4, #0]
 800530a:	2b2e      	cmp	r3, #46	@ 0x2e
 800530c:	d10a      	bne.n	8005324 <_svfiprintf_r+0x130>
 800530e:	7863      	ldrb	r3, [r4, #1]
 8005310:	2b2a      	cmp	r3, #42	@ 0x2a
 8005312:	d132      	bne.n	800537a <_svfiprintf_r+0x186>
 8005314:	9b03      	ldr	r3, [sp, #12]
 8005316:	1d1a      	adds	r2, r3, #4
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	9203      	str	r2, [sp, #12]
 800531c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005320:	3402      	adds	r4, #2
 8005322:	9305      	str	r3, [sp, #20]
 8005324:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80053e8 <_svfiprintf_r+0x1f4>
 8005328:	7821      	ldrb	r1, [r4, #0]
 800532a:	2203      	movs	r2, #3
 800532c:	4650      	mov	r0, sl
 800532e:	f7fa ff5f 	bl	80001f0 <memchr>
 8005332:	b138      	cbz	r0, 8005344 <_svfiprintf_r+0x150>
 8005334:	9b04      	ldr	r3, [sp, #16]
 8005336:	eba0 000a 	sub.w	r0, r0, sl
 800533a:	2240      	movs	r2, #64	@ 0x40
 800533c:	4082      	lsls	r2, r0
 800533e:	4313      	orrs	r3, r2
 8005340:	3401      	adds	r4, #1
 8005342:	9304      	str	r3, [sp, #16]
 8005344:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005348:	4824      	ldr	r0, [pc, #144]	@ (80053dc <_svfiprintf_r+0x1e8>)
 800534a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800534e:	2206      	movs	r2, #6
 8005350:	f7fa ff4e 	bl	80001f0 <memchr>
 8005354:	2800      	cmp	r0, #0
 8005356:	d036      	beq.n	80053c6 <_svfiprintf_r+0x1d2>
 8005358:	4b21      	ldr	r3, [pc, #132]	@ (80053e0 <_svfiprintf_r+0x1ec>)
 800535a:	bb1b      	cbnz	r3, 80053a4 <_svfiprintf_r+0x1b0>
 800535c:	9b03      	ldr	r3, [sp, #12]
 800535e:	3307      	adds	r3, #7
 8005360:	f023 0307 	bic.w	r3, r3, #7
 8005364:	3308      	adds	r3, #8
 8005366:	9303      	str	r3, [sp, #12]
 8005368:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800536a:	4433      	add	r3, r6
 800536c:	9309      	str	r3, [sp, #36]	@ 0x24
 800536e:	e76a      	b.n	8005246 <_svfiprintf_r+0x52>
 8005370:	fb0c 3202 	mla	r2, ip, r2, r3
 8005374:	460c      	mov	r4, r1
 8005376:	2001      	movs	r0, #1
 8005378:	e7a8      	b.n	80052cc <_svfiprintf_r+0xd8>
 800537a:	2300      	movs	r3, #0
 800537c:	3401      	adds	r4, #1
 800537e:	9305      	str	r3, [sp, #20]
 8005380:	4619      	mov	r1, r3
 8005382:	f04f 0c0a 	mov.w	ip, #10
 8005386:	4620      	mov	r0, r4
 8005388:	f810 2b01 	ldrb.w	r2, [r0], #1
 800538c:	3a30      	subs	r2, #48	@ 0x30
 800538e:	2a09      	cmp	r2, #9
 8005390:	d903      	bls.n	800539a <_svfiprintf_r+0x1a6>
 8005392:	2b00      	cmp	r3, #0
 8005394:	d0c6      	beq.n	8005324 <_svfiprintf_r+0x130>
 8005396:	9105      	str	r1, [sp, #20]
 8005398:	e7c4      	b.n	8005324 <_svfiprintf_r+0x130>
 800539a:	fb0c 2101 	mla	r1, ip, r1, r2
 800539e:	4604      	mov	r4, r0
 80053a0:	2301      	movs	r3, #1
 80053a2:	e7f0      	b.n	8005386 <_svfiprintf_r+0x192>
 80053a4:	ab03      	add	r3, sp, #12
 80053a6:	9300      	str	r3, [sp, #0]
 80053a8:	462a      	mov	r2, r5
 80053aa:	4b0e      	ldr	r3, [pc, #56]	@ (80053e4 <_svfiprintf_r+0x1f0>)
 80053ac:	a904      	add	r1, sp, #16
 80053ae:	4638      	mov	r0, r7
 80053b0:	f7fd fe96 	bl	80030e0 <_printf_float>
 80053b4:	1c42      	adds	r2, r0, #1
 80053b6:	4606      	mov	r6, r0
 80053b8:	d1d6      	bne.n	8005368 <_svfiprintf_r+0x174>
 80053ba:	89ab      	ldrh	r3, [r5, #12]
 80053bc:	065b      	lsls	r3, r3, #25
 80053be:	f53f af2d 	bmi.w	800521c <_svfiprintf_r+0x28>
 80053c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80053c4:	e72c      	b.n	8005220 <_svfiprintf_r+0x2c>
 80053c6:	ab03      	add	r3, sp, #12
 80053c8:	9300      	str	r3, [sp, #0]
 80053ca:	462a      	mov	r2, r5
 80053cc:	4b05      	ldr	r3, [pc, #20]	@ (80053e4 <_svfiprintf_r+0x1f0>)
 80053ce:	a904      	add	r1, sp, #16
 80053d0:	4638      	mov	r0, r7
 80053d2:	f7fe f91d 	bl	8003610 <_printf_i>
 80053d6:	e7ed      	b.n	80053b4 <_svfiprintf_r+0x1c0>
 80053d8:	08005f90 	.word	0x08005f90
 80053dc:	08005f9a 	.word	0x08005f9a
 80053e0:	080030e1 	.word	0x080030e1
 80053e4:	0800513d 	.word	0x0800513d
 80053e8:	08005f96 	.word	0x08005f96

080053ec <__sflush_r>:
 80053ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80053f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053f4:	0716      	lsls	r6, r2, #28
 80053f6:	4605      	mov	r5, r0
 80053f8:	460c      	mov	r4, r1
 80053fa:	d454      	bmi.n	80054a6 <__sflush_r+0xba>
 80053fc:	684b      	ldr	r3, [r1, #4]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	dc02      	bgt.n	8005408 <__sflush_r+0x1c>
 8005402:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005404:	2b00      	cmp	r3, #0
 8005406:	dd48      	ble.n	800549a <__sflush_r+0xae>
 8005408:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800540a:	2e00      	cmp	r6, #0
 800540c:	d045      	beq.n	800549a <__sflush_r+0xae>
 800540e:	2300      	movs	r3, #0
 8005410:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005414:	682f      	ldr	r7, [r5, #0]
 8005416:	6a21      	ldr	r1, [r4, #32]
 8005418:	602b      	str	r3, [r5, #0]
 800541a:	d030      	beq.n	800547e <__sflush_r+0x92>
 800541c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800541e:	89a3      	ldrh	r3, [r4, #12]
 8005420:	0759      	lsls	r1, r3, #29
 8005422:	d505      	bpl.n	8005430 <__sflush_r+0x44>
 8005424:	6863      	ldr	r3, [r4, #4]
 8005426:	1ad2      	subs	r2, r2, r3
 8005428:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800542a:	b10b      	cbz	r3, 8005430 <__sflush_r+0x44>
 800542c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800542e:	1ad2      	subs	r2, r2, r3
 8005430:	2300      	movs	r3, #0
 8005432:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005434:	6a21      	ldr	r1, [r4, #32]
 8005436:	4628      	mov	r0, r5
 8005438:	47b0      	blx	r6
 800543a:	1c43      	adds	r3, r0, #1
 800543c:	89a3      	ldrh	r3, [r4, #12]
 800543e:	d106      	bne.n	800544e <__sflush_r+0x62>
 8005440:	6829      	ldr	r1, [r5, #0]
 8005442:	291d      	cmp	r1, #29
 8005444:	d82b      	bhi.n	800549e <__sflush_r+0xb2>
 8005446:	4a2a      	ldr	r2, [pc, #168]	@ (80054f0 <__sflush_r+0x104>)
 8005448:	410a      	asrs	r2, r1
 800544a:	07d6      	lsls	r6, r2, #31
 800544c:	d427      	bmi.n	800549e <__sflush_r+0xb2>
 800544e:	2200      	movs	r2, #0
 8005450:	6062      	str	r2, [r4, #4]
 8005452:	04d9      	lsls	r1, r3, #19
 8005454:	6922      	ldr	r2, [r4, #16]
 8005456:	6022      	str	r2, [r4, #0]
 8005458:	d504      	bpl.n	8005464 <__sflush_r+0x78>
 800545a:	1c42      	adds	r2, r0, #1
 800545c:	d101      	bne.n	8005462 <__sflush_r+0x76>
 800545e:	682b      	ldr	r3, [r5, #0]
 8005460:	b903      	cbnz	r3, 8005464 <__sflush_r+0x78>
 8005462:	6560      	str	r0, [r4, #84]	@ 0x54
 8005464:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005466:	602f      	str	r7, [r5, #0]
 8005468:	b1b9      	cbz	r1, 800549a <__sflush_r+0xae>
 800546a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800546e:	4299      	cmp	r1, r3
 8005470:	d002      	beq.n	8005478 <__sflush_r+0x8c>
 8005472:	4628      	mov	r0, r5
 8005474:	f7ff f9e0 	bl	8004838 <_free_r>
 8005478:	2300      	movs	r3, #0
 800547a:	6363      	str	r3, [r4, #52]	@ 0x34
 800547c:	e00d      	b.n	800549a <__sflush_r+0xae>
 800547e:	2301      	movs	r3, #1
 8005480:	4628      	mov	r0, r5
 8005482:	47b0      	blx	r6
 8005484:	4602      	mov	r2, r0
 8005486:	1c50      	adds	r0, r2, #1
 8005488:	d1c9      	bne.n	800541e <__sflush_r+0x32>
 800548a:	682b      	ldr	r3, [r5, #0]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d0c6      	beq.n	800541e <__sflush_r+0x32>
 8005490:	2b1d      	cmp	r3, #29
 8005492:	d001      	beq.n	8005498 <__sflush_r+0xac>
 8005494:	2b16      	cmp	r3, #22
 8005496:	d11e      	bne.n	80054d6 <__sflush_r+0xea>
 8005498:	602f      	str	r7, [r5, #0]
 800549a:	2000      	movs	r0, #0
 800549c:	e022      	b.n	80054e4 <__sflush_r+0xf8>
 800549e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80054a2:	b21b      	sxth	r3, r3
 80054a4:	e01b      	b.n	80054de <__sflush_r+0xf2>
 80054a6:	690f      	ldr	r7, [r1, #16]
 80054a8:	2f00      	cmp	r7, #0
 80054aa:	d0f6      	beq.n	800549a <__sflush_r+0xae>
 80054ac:	0793      	lsls	r3, r2, #30
 80054ae:	680e      	ldr	r6, [r1, #0]
 80054b0:	bf08      	it	eq
 80054b2:	694b      	ldreq	r3, [r1, #20]
 80054b4:	600f      	str	r7, [r1, #0]
 80054b6:	bf18      	it	ne
 80054b8:	2300      	movne	r3, #0
 80054ba:	eba6 0807 	sub.w	r8, r6, r7
 80054be:	608b      	str	r3, [r1, #8]
 80054c0:	f1b8 0f00 	cmp.w	r8, #0
 80054c4:	dde9      	ble.n	800549a <__sflush_r+0xae>
 80054c6:	6a21      	ldr	r1, [r4, #32]
 80054c8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80054ca:	4643      	mov	r3, r8
 80054cc:	463a      	mov	r2, r7
 80054ce:	4628      	mov	r0, r5
 80054d0:	47b0      	blx	r6
 80054d2:	2800      	cmp	r0, #0
 80054d4:	dc08      	bgt.n	80054e8 <__sflush_r+0xfc>
 80054d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80054da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80054de:	81a3      	strh	r3, [r4, #12]
 80054e0:	f04f 30ff 	mov.w	r0, #4294967295
 80054e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054e8:	4407      	add	r7, r0
 80054ea:	eba8 0800 	sub.w	r8, r8, r0
 80054ee:	e7e7      	b.n	80054c0 <__sflush_r+0xd4>
 80054f0:	dfbffffe 	.word	0xdfbffffe

080054f4 <_fflush_r>:
 80054f4:	b538      	push	{r3, r4, r5, lr}
 80054f6:	690b      	ldr	r3, [r1, #16]
 80054f8:	4605      	mov	r5, r0
 80054fa:	460c      	mov	r4, r1
 80054fc:	b913      	cbnz	r3, 8005504 <_fflush_r+0x10>
 80054fe:	2500      	movs	r5, #0
 8005500:	4628      	mov	r0, r5
 8005502:	bd38      	pop	{r3, r4, r5, pc}
 8005504:	b118      	cbz	r0, 800550e <_fflush_r+0x1a>
 8005506:	6a03      	ldr	r3, [r0, #32]
 8005508:	b90b      	cbnz	r3, 800550e <_fflush_r+0x1a>
 800550a:	f7fe fa2d 	bl	8003968 <__sinit>
 800550e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d0f3      	beq.n	80054fe <_fflush_r+0xa>
 8005516:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005518:	07d0      	lsls	r0, r2, #31
 800551a:	d404      	bmi.n	8005526 <_fflush_r+0x32>
 800551c:	0599      	lsls	r1, r3, #22
 800551e:	d402      	bmi.n	8005526 <_fflush_r+0x32>
 8005520:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005522:	f7fe fb38 	bl	8003b96 <__retarget_lock_acquire_recursive>
 8005526:	4628      	mov	r0, r5
 8005528:	4621      	mov	r1, r4
 800552a:	f7ff ff5f 	bl	80053ec <__sflush_r>
 800552e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005530:	07da      	lsls	r2, r3, #31
 8005532:	4605      	mov	r5, r0
 8005534:	d4e4      	bmi.n	8005500 <_fflush_r+0xc>
 8005536:	89a3      	ldrh	r3, [r4, #12]
 8005538:	059b      	lsls	r3, r3, #22
 800553a:	d4e1      	bmi.n	8005500 <_fflush_r+0xc>
 800553c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800553e:	f7fe fb2b 	bl	8003b98 <__retarget_lock_release_recursive>
 8005542:	e7dd      	b.n	8005500 <_fflush_r+0xc>

08005544 <memmove>:
 8005544:	4288      	cmp	r0, r1
 8005546:	b510      	push	{r4, lr}
 8005548:	eb01 0402 	add.w	r4, r1, r2
 800554c:	d902      	bls.n	8005554 <memmove+0x10>
 800554e:	4284      	cmp	r4, r0
 8005550:	4623      	mov	r3, r4
 8005552:	d807      	bhi.n	8005564 <memmove+0x20>
 8005554:	1e43      	subs	r3, r0, #1
 8005556:	42a1      	cmp	r1, r4
 8005558:	d008      	beq.n	800556c <memmove+0x28>
 800555a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800555e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005562:	e7f8      	b.n	8005556 <memmove+0x12>
 8005564:	4402      	add	r2, r0
 8005566:	4601      	mov	r1, r0
 8005568:	428a      	cmp	r2, r1
 800556a:	d100      	bne.n	800556e <memmove+0x2a>
 800556c:	bd10      	pop	{r4, pc}
 800556e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005572:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005576:	e7f7      	b.n	8005568 <memmove+0x24>

08005578 <_sbrk_r>:
 8005578:	b538      	push	{r3, r4, r5, lr}
 800557a:	4d06      	ldr	r5, [pc, #24]	@ (8005594 <_sbrk_r+0x1c>)
 800557c:	2300      	movs	r3, #0
 800557e:	4604      	mov	r4, r0
 8005580:	4608      	mov	r0, r1
 8005582:	602b      	str	r3, [r5, #0]
 8005584:	f7fc fe26 	bl	80021d4 <_sbrk>
 8005588:	1c43      	adds	r3, r0, #1
 800558a:	d102      	bne.n	8005592 <_sbrk_r+0x1a>
 800558c:	682b      	ldr	r3, [r5, #0]
 800558e:	b103      	cbz	r3, 8005592 <_sbrk_r+0x1a>
 8005590:	6023      	str	r3, [r4, #0]
 8005592:	bd38      	pop	{r3, r4, r5, pc}
 8005594:	200003e4 	.word	0x200003e4

08005598 <memcpy>:
 8005598:	440a      	add	r2, r1
 800559a:	4291      	cmp	r1, r2
 800559c:	f100 33ff 	add.w	r3, r0, #4294967295
 80055a0:	d100      	bne.n	80055a4 <memcpy+0xc>
 80055a2:	4770      	bx	lr
 80055a4:	b510      	push	{r4, lr}
 80055a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80055aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80055ae:	4291      	cmp	r1, r2
 80055b0:	d1f9      	bne.n	80055a6 <memcpy+0xe>
 80055b2:	bd10      	pop	{r4, pc}

080055b4 <__assert_func>:
 80055b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80055b6:	4614      	mov	r4, r2
 80055b8:	461a      	mov	r2, r3
 80055ba:	4b09      	ldr	r3, [pc, #36]	@ (80055e0 <__assert_func+0x2c>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4605      	mov	r5, r0
 80055c0:	68d8      	ldr	r0, [r3, #12]
 80055c2:	b954      	cbnz	r4, 80055da <__assert_func+0x26>
 80055c4:	4b07      	ldr	r3, [pc, #28]	@ (80055e4 <__assert_func+0x30>)
 80055c6:	461c      	mov	r4, r3
 80055c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80055cc:	9100      	str	r1, [sp, #0]
 80055ce:	462b      	mov	r3, r5
 80055d0:	4905      	ldr	r1, [pc, #20]	@ (80055e8 <__assert_func+0x34>)
 80055d2:	f000 f86f 	bl	80056b4 <fiprintf>
 80055d6:	f000 f87f 	bl	80056d8 <abort>
 80055da:	4b04      	ldr	r3, [pc, #16]	@ (80055ec <__assert_func+0x38>)
 80055dc:	e7f4      	b.n	80055c8 <__assert_func+0x14>
 80055de:	bf00      	nop
 80055e0:	20000010 	.word	0x20000010
 80055e4:	08005fe6 	.word	0x08005fe6
 80055e8:	08005fb8 	.word	0x08005fb8
 80055ec:	08005fab 	.word	0x08005fab

080055f0 <_calloc_r>:
 80055f0:	b570      	push	{r4, r5, r6, lr}
 80055f2:	fba1 5402 	umull	r5, r4, r1, r2
 80055f6:	b93c      	cbnz	r4, 8005608 <_calloc_r+0x18>
 80055f8:	4629      	mov	r1, r5
 80055fa:	f7ff f991 	bl	8004920 <_malloc_r>
 80055fe:	4606      	mov	r6, r0
 8005600:	b928      	cbnz	r0, 800560e <_calloc_r+0x1e>
 8005602:	2600      	movs	r6, #0
 8005604:	4630      	mov	r0, r6
 8005606:	bd70      	pop	{r4, r5, r6, pc}
 8005608:	220c      	movs	r2, #12
 800560a:	6002      	str	r2, [r0, #0]
 800560c:	e7f9      	b.n	8005602 <_calloc_r+0x12>
 800560e:	462a      	mov	r2, r5
 8005610:	4621      	mov	r1, r4
 8005612:	f7fe fa43 	bl	8003a9c <memset>
 8005616:	e7f5      	b.n	8005604 <_calloc_r+0x14>

08005618 <__ascii_mbtowc>:
 8005618:	b082      	sub	sp, #8
 800561a:	b901      	cbnz	r1, 800561e <__ascii_mbtowc+0x6>
 800561c:	a901      	add	r1, sp, #4
 800561e:	b142      	cbz	r2, 8005632 <__ascii_mbtowc+0x1a>
 8005620:	b14b      	cbz	r3, 8005636 <__ascii_mbtowc+0x1e>
 8005622:	7813      	ldrb	r3, [r2, #0]
 8005624:	600b      	str	r3, [r1, #0]
 8005626:	7812      	ldrb	r2, [r2, #0]
 8005628:	1e10      	subs	r0, r2, #0
 800562a:	bf18      	it	ne
 800562c:	2001      	movne	r0, #1
 800562e:	b002      	add	sp, #8
 8005630:	4770      	bx	lr
 8005632:	4610      	mov	r0, r2
 8005634:	e7fb      	b.n	800562e <__ascii_mbtowc+0x16>
 8005636:	f06f 0001 	mvn.w	r0, #1
 800563a:	e7f8      	b.n	800562e <__ascii_mbtowc+0x16>

0800563c <_realloc_r>:
 800563c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005640:	4680      	mov	r8, r0
 8005642:	4615      	mov	r5, r2
 8005644:	460c      	mov	r4, r1
 8005646:	b921      	cbnz	r1, 8005652 <_realloc_r+0x16>
 8005648:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800564c:	4611      	mov	r1, r2
 800564e:	f7ff b967 	b.w	8004920 <_malloc_r>
 8005652:	b92a      	cbnz	r2, 8005660 <_realloc_r+0x24>
 8005654:	f7ff f8f0 	bl	8004838 <_free_r>
 8005658:	2400      	movs	r4, #0
 800565a:	4620      	mov	r0, r4
 800565c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005660:	f000 f841 	bl	80056e6 <_malloc_usable_size_r>
 8005664:	4285      	cmp	r5, r0
 8005666:	4606      	mov	r6, r0
 8005668:	d802      	bhi.n	8005670 <_realloc_r+0x34>
 800566a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800566e:	d8f4      	bhi.n	800565a <_realloc_r+0x1e>
 8005670:	4629      	mov	r1, r5
 8005672:	4640      	mov	r0, r8
 8005674:	f7ff f954 	bl	8004920 <_malloc_r>
 8005678:	4607      	mov	r7, r0
 800567a:	2800      	cmp	r0, #0
 800567c:	d0ec      	beq.n	8005658 <_realloc_r+0x1c>
 800567e:	42b5      	cmp	r5, r6
 8005680:	462a      	mov	r2, r5
 8005682:	4621      	mov	r1, r4
 8005684:	bf28      	it	cs
 8005686:	4632      	movcs	r2, r6
 8005688:	f7ff ff86 	bl	8005598 <memcpy>
 800568c:	4621      	mov	r1, r4
 800568e:	4640      	mov	r0, r8
 8005690:	f7ff f8d2 	bl	8004838 <_free_r>
 8005694:	463c      	mov	r4, r7
 8005696:	e7e0      	b.n	800565a <_realloc_r+0x1e>

08005698 <__ascii_wctomb>:
 8005698:	4603      	mov	r3, r0
 800569a:	4608      	mov	r0, r1
 800569c:	b141      	cbz	r1, 80056b0 <__ascii_wctomb+0x18>
 800569e:	2aff      	cmp	r2, #255	@ 0xff
 80056a0:	d904      	bls.n	80056ac <__ascii_wctomb+0x14>
 80056a2:	228a      	movs	r2, #138	@ 0x8a
 80056a4:	601a      	str	r2, [r3, #0]
 80056a6:	f04f 30ff 	mov.w	r0, #4294967295
 80056aa:	4770      	bx	lr
 80056ac:	700a      	strb	r2, [r1, #0]
 80056ae:	2001      	movs	r0, #1
 80056b0:	4770      	bx	lr
	...

080056b4 <fiprintf>:
 80056b4:	b40e      	push	{r1, r2, r3}
 80056b6:	b503      	push	{r0, r1, lr}
 80056b8:	4601      	mov	r1, r0
 80056ba:	ab03      	add	r3, sp, #12
 80056bc:	4805      	ldr	r0, [pc, #20]	@ (80056d4 <fiprintf+0x20>)
 80056be:	f853 2b04 	ldr.w	r2, [r3], #4
 80056c2:	6800      	ldr	r0, [r0, #0]
 80056c4:	9301      	str	r3, [sp, #4]
 80056c6:	f000 f83f 	bl	8005748 <_vfiprintf_r>
 80056ca:	b002      	add	sp, #8
 80056cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80056d0:	b003      	add	sp, #12
 80056d2:	4770      	bx	lr
 80056d4:	20000010 	.word	0x20000010

080056d8 <abort>:
 80056d8:	b508      	push	{r3, lr}
 80056da:	2006      	movs	r0, #6
 80056dc:	f000 fa08 	bl	8005af0 <raise>
 80056e0:	2001      	movs	r0, #1
 80056e2:	f7fc fcff 	bl	80020e4 <_exit>

080056e6 <_malloc_usable_size_r>:
 80056e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80056ea:	1f18      	subs	r0, r3, #4
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	bfbc      	itt	lt
 80056f0:	580b      	ldrlt	r3, [r1, r0]
 80056f2:	18c0      	addlt	r0, r0, r3
 80056f4:	4770      	bx	lr

080056f6 <__sfputc_r>:
 80056f6:	6893      	ldr	r3, [r2, #8]
 80056f8:	3b01      	subs	r3, #1
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	b410      	push	{r4}
 80056fe:	6093      	str	r3, [r2, #8]
 8005700:	da08      	bge.n	8005714 <__sfputc_r+0x1e>
 8005702:	6994      	ldr	r4, [r2, #24]
 8005704:	42a3      	cmp	r3, r4
 8005706:	db01      	blt.n	800570c <__sfputc_r+0x16>
 8005708:	290a      	cmp	r1, #10
 800570a:	d103      	bne.n	8005714 <__sfputc_r+0x1e>
 800570c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005710:	f000 b932 	b.w	8005978 <__swbuf_r>
 8005714:	6813      	ldr	r3, [r2, #0]
 8005716:	1c58      	adds	r0, r3, #1
 8005718:	6010      	str	r0, [r2, #0]
 800571a:	7019      	strb	r1, [r3, #0]
 800571c:	4608      	mov	r0, r1
 800571e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005722:	4770      	bx	lr

08005724 <__sfputs_r>:
 8005724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005726:	4606      	mov	r6, r0
 8005728:	460f      	mov	r7, r1
 800572a:	4614      	mov	r4, r2
 800572c:	18d5      	adds	r5, r2, r3
 800572e:	42ac      	cmp	r4, r5
 8005730:	d101      	bne.n	8005736 <__sfputs_r+0x12>
 8005732:	2000      	movs	r0, #0
 8005734:	e007      	b.n	8005746 <__sfputs_r+0x22>
 8005736:	f814 1b01 	ldrb.w	r1, [r4], #1
 800573a:	463a      	mov	r2, r7
 800573c:	4630      	mov	r0, r6
 800573e:	f7ff ffda 	bl	80056f6 <__sfputc_r>
 8005742:	1c43      	adds	r3, r0, #1
 8005744:	d1f3      	bne.n	800572e <__sfputs_r+0xa>
 8005746:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005748 <_vfiprintf_r>:
 8005748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800574c:	460d      	mov	r5, r1
 800574e:	b09d      	sub	sp, #116	@ 0x74
 8005750:	4614      	mov	r4, r2
 8005752:	4698      	mov	r8, r3
 8005754:	4606      	mov	r6, r0
 8005756:	b118      	cbz	r0, 8005760 <_vfiprintf_r+0x18>
 8005758:	6a03      	ldr	r3, [r0, #32]
 800575a:	b90b      	cbnz	r3, 8005760 <_vfiprintf_r+0x18>
 800575c:	f7fe f904 	bl	8003968 <__sinit>
 8005760:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005762:	07d9      	lsls	r1, r3, #31
 8005764:	d405      	bmi.n	8005772 <_vfiprintf_r+0x2a>
 8005766:	89ab      	ldrh	r3, [r5, #12]
 8005768:	059a      	lsls	r2, r3, #22
 800576a:	d402      	bmi.n	8005772 <_vfiprintf_r+0x2a>
 800576c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800576e:	f7fe fa12 	bl	8003b96 <__retarget_lock_acquire_recursive>
 8005772:	89ab      	ldrh	r3, [r5, #12]
 8005774:	071b      	lsls	r3, r3, #28
 8005776:	d501      	bpl.n	800577c <_vfiprintf_r+0x34>
 8005778:	692b      	ldr	r3, [r5, #16]
 800577a:	b99b      	cbnz	r3, 80057a4 <_vfiprintf_r+0x5c>
 800577c:	4629      	mov	r1, r5
 800577e:	4630      	mov	r0, r6
 8005780:	f000 f938 	bl	80059f4 <__swsetup_r>
 8005784:	b170      	cbz	r0, 80057a4 <_vfiprintf_r+0x5c>
 8005786:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005788:	07dc      	lsls	r4, r3, #31
 800578a:	d504      	bpl.n	8005796 <_vfiprintf_r+0x4e>
 800578c:	f04f 30ff 	mov.w	r0, #4294967295
 8005790:	b01d      	add	sp, #116	@ 0x74
 8005792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005796:	89ab      	ldrh	r3, [r5, #12]
 8005798:	0598      	lsls	r0, r3, #22
 800579a:	d4f7      	bmi.n	800578c <_vfiprintf_r+0x44>
 800579c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800579e:	f7fe f9fb 	bl	8003b98 <__retarget_lock_release_recursive>
 80057a2:	e7f3      	b.n	800578c <_vfiprintf_r+0x44>
 80057a4:	2300      	movs	r3, #0
 80057a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80057a8:	2320      	movs	r3, #32
 80057aa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80057ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80057b2:	2330      	movs	r3, #48	@ 0x30
 80057b4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005964 <_vfiprintf_r+0x21c>
 80057b8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80057bc:	f04f 0901 	mov.w	r9, #1
 80057c0:	4623      	mov	r3, r4
 80057c2:	469a      	mov	sl, r3
 80057c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80057c8:	b10a      	cbz	r2, 80057ce <_vfiprintf_r+0x86>
 80057ca:	2a25      	cmp	r2, #37	@ 0x25
 80057cc:	d1f9      	bne.n	80057c2 <_vfiprintf_r+0x7a>
 80057ce:	ebba 0b04 	subs.w	fp, sl, r4
 80057d2:	d00b      	beq.n	80057ec <_vfiprintf_r+0xa4>
 80057d4:	465b      	mov	r3, fp
 80057d6:	4622      	mov	r2, r4
 80057d8:	4629      	mov	r1, r5
 80057da:	4630      	mov	r0, r6
 80057dc:	f7ff ffa2 	bl	8005724 <__sfputs_r>
 80057e0:	3001      	adds	r0, #1
 80057e2:	f000 80a7 	beq.w	8005934 <_vfiprintf_r+0x1ec>
 80057e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80057e8:	445a      	add	r2, fp
 80057ea:	9209      	str	r2, [sp, #36]	@ 0x24
 80057ec:	f89a 3000 	ldrb.w	r3, [sl]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	f000 809f 	beq.w	8005934 <_vfiprintf_r+0x1ec>
 80057f6:	2300      	movs	r3, #0
 80057f8:	f04f 32ff 	mov.w	r2, #4294967295
 80057fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005800:	f10a 0a01 	add.w	sl, sl, #1
 8005804:	9304      	str	r3, [sp, #16]
 8005806:	9307      	str	r3, [sp, #28]
 8005808:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800580c:	931a      	str	r3, [sp, #104]	@ 0x68
 800580e:	4654      	mov	r4, sl
 8005810:	2205      	movs	r2, #5
 8005812:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005816:	4853      	ldr	r0, [pc, #332]	@ (8005964 <_vfiprintf_r+0x21c>)
 8005818:	f7fa fcea 	bl	80001f0 <memchr>
 800581c:	9a04      	ldr	r2, [sp, #16]
 800581e:	b9d8      	cbnz	r0, 8005858 <_vfiprintf_r+0x110>
 8005820:	06d1      	lsls	r1, r2, #27
 8005822:	bf44      	itt	mi
 8005824:	2320      	movmi	r3, #32
 8005826:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800582a:	0713      	lsls	r3, r2, #28
 800582c:	bf44      	itt	mi
 800582e:	232b      	movmi	r3, #43	@ 0x2b
 8005830:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005834:	f89a 3000 	ldrb.w	r3, [sl]
 8005838:	2b2a      	cmp	r3, #42	@ 0x2a
 800583a:	d015      	beq.n	8005868 <_vfiprintf_r+0x120>
 800583c:	9a07      	ldr	r2, [sp, #28]
 800583e:	4654      	mov	r4, sl
 8005840:	2000      	movs	r0, #0
 8005842:	f04f 0c0a 	mov.w	ip, #10
 8005846:	4621      	mov	r1, r4
 8005848:	f811 3b01 	ldrb.w	r3, [r1], #1
 800584c:	3b30      	subs	r3, #48	@ 0x30
 800584e:	2b09      	cmp	r3, #9
 8005850:	d94b      	bls.n	80058ea <_vfiprintf_r+0x1a2>
 8005852:	b1b0      	cbz	r0, 8005882 <_vfiprintf_r+0x13a>
 8005854:	9207      	str	r2, [sp, #28]
 8005856:	e014      	b.n	8005882 <_vfiprintf_r+0x13a>
 8005858:	eba0 0308 	sub.w	r3, r0, r8
 800585c:	fa09 f303 	lsl.w	r3, r9, r3
 8005860:	4313      	orrs	r3, r2
 8005862:	9304      	str	r3, [sp, #16]
 8005864:	46a2      	mov	sl, r4
 8005866:	e7d2      	b.n	800580e <_vfiprintf_r+0xc6>
 8005868:	9b03      	ldr	r3, [sp, #12]
 800586a:	1d19      	adds	r1, r3, #4
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	9103      	str	r1, [sp, #12]
 8005870:	2b00      	cmp	r3, #0
 8005872:	bfbb      	ittet	lt
 8005874:	425b      	neglt	r3, r3
 8005876:	f042 0202 	orrlt.w	r2, r2, #2
 800587a:	9307      	strge	r3, [sp, #28]
 800587c:	9307      	strlt	r3, [sp, #28]
 800587e:	bfb8      	it	lt
 8005880:	9204      	strlt	r2, [sp, #16]
 8005882:	7823      	ldrb	r3, [r4, #0]
 8005884:	2b2e      	cmp	r3, #46	@ 0x2e
 8005886:	d10a      	bne.n	800589e <_vfiprintf_r+0x156>
 8005888:	7863      	ldrb	r3, [r4, #1]
 800588a:	2b2a      	cmp	r3, #42	@ 0x2a
 800588c:	d132      	bne.n	80058f4 <_vfiprintf_r+0x1ac>
 800588e:	9b03      	ldr	r3, [sp, #12]
 8005890:	1d1a      	adds	r2, r3, #4
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	9203      	str	r2, [sp, #12]
 8005896:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800589a:	3402      	adds	r4, #2
 800589c:	9305      	str	r3, [sp, #20]
 800589e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005974 <_vfiprintf_r+0x22c>
 80058a2:	7821      	ldrb	r1, [r4, #0]
 80058a4:	2203      	movs	r2, #3
 80058a6:	4650      	mov	r0, sl
 80058a8:	f7fa fca2 	bl	80001f0 <memchr>
 80058ac:	b138      	cbz	r0, 80058be <_vfiprintf_r+0x176>
 80058ae:	9b04      	ldr	r3, [sp, #16]
 80058b0:	eba0 000a 	sub.w	r0, r0, sl
 80058b4:	2240      	movs	r2, #64	@ 0x40
 80058b6:	4082      	lsls	r2, r0
 80058b8:	4313      	orrs	r3, r2
 80058ba:	3401      	adds	r4, #1
 80058bc:	9304      	str	r3, [sp, #16]
 80058be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058c2:	4829      	ldr	r0, [pc, #164]	@ (8005968 <_vfiprintf_r+0x220>)
 80058c4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80058c8:	2206      	movs	r2, #6
 80058ca:	f7fa fc91 	bl	80001f0 <memchr>
 80058ce:	2800      	cmp	r0, #0
 80058d0:	d03f      	beq.n	8005952 <_vfiprintf_r+0x20a>
 80058d2:	4b26      	ldr	r3, [pc, #152]	@ (800596c <_vfiprintf_r+0x224>)
 80058d4:	bb1b      	cbnz	r3, 800591e <_vfiprintf_r+0x1d6>
 80058d6:	9b03      	ldr	r3, [sp, #12]
 80058d8:	3307      	adds	r3, #7
 80058da:	f023 0307 	bic.w	r3, r3, #7
 80058de:	3308      	adds	r3, #8
 80058e0:	9303      	str	r3, [sp, #12]
 80058e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80058e4:	443b      	add	r3, r7
 80058e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80058e8:	e76a      	b.n	80057c0 <_vfiprintf_r+0x78>
 80058ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80058ee:	460c      	mov	r4, r1
 80058f0:	2001      	movs	r0, #1
 80058f2:	e7a8      	b.n	8005846 <_vfiprintf_r+0xfe>
 80058f4:	2300      	movs	r3, #0
 80058f6:	3401      	adds	r4, #1
 80058f8:	9305      	str	r3, [sp, #20]
 80058fa:	4619      	mov	r1, r3
 80058fc:	f04f 0c0a 	mov.w	ip, #10
 8005900:	4620      	mov	r0, r4
 8005902:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005906:	3a30      	subs	r2, #48	@ 0x30
 8005908:	2a09      	cmp	r2, #9
 800590a:	d903      	bls.n	8005914 <_vfiprintf_r+0x1cc>
 800590c:	2b00      	cmp	r3, #0
 800590e:	d0c6      	beq.n	800589e <_vfiprintf_r+0x156>
 8005910:	9105      	str	r1, [sp, #20]
 8005912:	e7c4      	b.n	800589e <_vfiprintf_r+0x156>
 8005914:	fb0c 2101 	mla	r1, ip, r1, r2
 8005918:	4604      	mov	r4, r0
 800591a:	2301      	movs	r3, #1
 800591c:	e7f0      	b.n	8005900 <_vfiprintf_r+0x1b8>
 800591e:	ab03      	add	r3, sp, #12
 8005920:	9300      	str	r3, [sp, #0]
 8005922:	462a      	mov	r2, r5
 8005924:	4b12      	ldr	r3, [pc, #72]	@ (8005970 <_vfiprintf_r+0x228>)
 8005926:	a904      	add	r1, sp, #16
 8005928:	4630      	mov	r0, r6
 800592a:	f7fd fbd9 	bl	80030e0 <_printf_float>
 800592e:	4607      	mov	r7, r0
 8005930:	1c78      	adds	r0, r7, #1
 8005932:	d1d6      	bne.n	80058e2 <_vfiprintf_r+0x19a>
 8005934:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005936:	07d9      	lsls	r1, r3, #31
 8005938:	d405      	bmi.n	8005946 <_vfiprintf_r+0x1fe>
 800593a:	89ab      	ldrh	r3, [r5, #12]
 800593c:	059a      	lsls	r2, r3, #22
 800593e:	d402      	bmi.n	8005946 <_vfiprintf_r+0x1fe>
 8005940:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005942:	f7fe f929 	bl	8003b98 <__retarget_lock_release_recursive>
 8005946:	89ab      	ldrh	r3, [r5, #12]
 8005948:	065b      	lsls	r3, r3, #25
 800594a:	f53f af1f 	bmi.w	800578c <_vfiprintf_r+0x44>
 800594e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005950:	e71e      	b.n	8005790 <_vfiprintf_r+0x48>
 8005952:	ab03      	add	r3, sp, #12
 8005954:	9300      	str	r3, [sp, #0]
 8005956:	462a      	mov	r2, r5
 8005958:	4b05      	ldr	r3, [pc, #20]	@ (8005970 <_vfiprintf_r+0x228>)
 800595a:	a904      	add	r1, sp, #16
 800595c:	4630      	mov	r0, r6
 800595e:	f7fd fe57 	bl	8003610 <_printf_i>
 8005962:	e7e4      	b.n	800592e <_vfiprintf_r+0x1e6>
 8005964:	08005f90 	.word	0x08005f90
 8005968:	08005f9a 	.word	0x08005f9a
 800596c:	080030e1 	.word	0x080030e1
 8005970:	08005725 	.word	0x08005725
 8005974:	08005f96 	.word	0x08005f96

08005978 <__swbuf_r>:
 8005978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800597a:	460e      	mov	r6, r1
 800597c:	4614      	mov	r4, r2
 800597e:	4605      	mov	r5, r0
 8005980:	b118      	cbz	r0, 800598a <__swbuf_r+0x12>
 8005982:	6a03      	ldr	r3, [r0, #32]
 8005984:	b90b      	cbnz	r3, 800598a <__swbuf_r+0x12>
 8005986:	f7fd ffef 	bl	8003968 <__sinit>
 800598a:	69a3      	ldr	r3, [r4, #24]
 800598c:	60a3      	str	r3, [r4, #8]
 800598e:	89a3      	ldrh	r3, [r4, #12]
 8005990:	071a      	lsls	r2, r3, #28
 8005992:	d501      	bpl.n	8005998 <__swbuf_r+0x20>
 8005994:	6923      	ldr	r3, [r4, #16]
 8005996:	b943      	cbnz	r3, 80059aa <__swbuf_r+0x32>
 8005998:	4621      	mov	r1, r4
 800599a:	4628      	mov	r0, r5
 800599c:	f000 f82a 	bl	80059f4 <__swsetup_r>
 80059a0:	b118      	cbz	r0, 80059aa <__swbuf_r+0x32>
 80059a2:	f04f 37ff 	mov.w	r7, #4294967295
 80059a6:	4638      	mov	r0, r7
 80059a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059aa:	6823      	ldr	r3, [r4, #0]
 80059ac:	6922      	ldr	r2, [r4, #16]
 80059ae:	1a98      	subs	r0, r3, r2
 80059b0:	6963      	ldr	r3, [r4, #20]
 80059b2:	b2f6      	uxtb	r6, r6
 80059b4:	4283      	cmp	r3, r0
 80059b6:	4637      	mov	r7, r6
 80059b8:	dc05      	bgt.n	80059c6 <__swbuf_r+0x4e>
 80059ba:	4621      	mov	r1, r4
 80059bc:	4628      	mov	r0, r5
 80059be:	f7ff fd99 	bl	80054f4 <_fflush_r>
 80059c2:	2800      	cmp	r0, #0
 80059c4:	d1ed      	bne.n	80059a2 <__swbuf_r+0x2a>
 80059c6:	68a3      	ldr	r3, [r4, #8]
 80059c8:	3b01      	subs	r3, #1
 80059ca:	60a3      	str	r3, [r4, #8]
 80059cc:	6823      	ldr	r3, [r4, #0]
 80059ce:	1c5a      	adds	r2, r3, #1
 80059d0:	6022      	str	r2, [r4, #0]
 80059d2:	701e      	strb	r6, [r3, #0]
 80059d4:	6962      	ldr	r2, [r4, #20]
 80059d6:	1c43      	adds	r3, r0, #1
 80059d8:	429a      	cmp	r2, r3
 80059da:	d004      	beq.n	80059e6 <__swbuf_r+0x6e>
 80059dc:	89a3      	ldrh	r3, [r4, #12]
 80059de:	07db      	lsls	r3, r3, #31
 80059e0:	d5e1      	bpl.n	80059a6 <__swbuf_r+0x2e>
 80059e2:	2e0a      	cmp	r6, #10
 80059e4:	d1df      	bne.n	80059a6 <__swbuf_r+0x2e>
 80059e6:	4621      	mov	r1, r4
 80059e8:	4628      	mov	r0, r5
 80059ea:	f7ff fd83 	bl	80054f4 <_fflush_r>
 80059ee:	2800      	cmp	r0, #0
 80059f0:	d0d9      	beq.n	80059a6 <__swbuf_r+0x2e>
 80059f2:	e7d6      	b.n	80059a2 <__swbuf_r+0x2a>

080059f4 <__swsetup_r>:
 80059f4:	b538      	push	{r3, r4, r5, lr}
 80059f6:	4b29      	ldr	r3, [pc, #164]	@ (8005a9c <__swsetup_r+0xa8>)
 80059f8:	4605      	mov	r5, r0
 80059fa:	6818      	ldr	r0, [r3, #0]
 80059fc:	460c      	mov	r4, r1
 80059fe:	b118      	cbz	r0, 8005a08 <__swsetup_r+0x14>
 8005a00:	6a03      	ldr	r3, [r0, #32]
 8005a02:	b90b      	cbnz	r3, 8005a08 <__swsetup_r+0x14>
 8005a04:	f7fd ffb0 	bl	8003968 <__sinit>
 8005a08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a0c:	0719      	lsls	r1, r3, #28
 8005a0e:	d422      	bmi.n	8005a56 <__swsetup_r+0x62>
 8005a10:	06da      	lsls	r2, r3, #27
 8005a12:	d407      	bmi.n	8005a24 <__swsetup_r+0x30>
 8005a14:	2209      	movs	r2, #9
 8005a16:	602a      	str	r2, [r5, #0]
 8005a18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005a1c:	81a3      	strh	r3, [r4, #12]
 8005a1e:	f04f 30ff 	mov.w	r0, #4294967295
 8005a22:	e033      	b.n	8005a8c <__swsetup_r+0x98>
 8005a24:	0758      	lsls	r0, r3, #29
 8005a26:	d512      	bpl.n	8005a4e <__swsetup_r+0x5a>
 8005a28:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005a2a:	b141      	cbz	r1, 8005a3e <__swsetup_r+0x4a>
 8005a2c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005a30:	4299      	cmp	r1, r3
 8005a32:	d002      	beq.n	8005a3a <__swsetup_r+0x46>
 8005a34:	4628      	mov	r0, r5
 8005a36:	f7fe feff 	bl	8004838 <_free_r>
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	6363      	str	r3, [r4, #52]	@ 0x34
 8005a3e:	89a3      	ldrh	r3, [r4, #12]
 8005a40:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005a44:	81a3      	strh	r3, [r4, #12]
 8005a46:	2300      	movs	r3, #0
 8005a48:	6063      	str	r3, [r4, #4]
 8005a4a:	6923      	ldr	r3, [r4, #16]
 8005a4c:	6023      	str	r3, [r4, #0]
 8005a4e:	89a3      	ldrh	r3, [r4, #12]
 8005a50:	f043 0308 	orr.w	r3, r3, #8
 8005a54:	81a3      	strh	r3, [r4, #12]
 8005a56:	6923      	ldr	r3, [r4, #16]
 8005a58:	b94b      	cbnz	r3, 8005a6e <__swsetup_r+0x7a>
 8005a5a:	89a3      	ldrh	r3, [r4, #12]
 8005a5c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005a60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a64:	d003      	beq.n	8005a6e <__swsetup_r+0x7a>
 8005a66:	4621      	mov	r1, r4
 8005a68:	4628      	mov	r0, r5
 8005a6a:	f000 f883 	bl	8005b74 <__smakebuf_r>
 8005a6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a72:	f013 0201 	ands.w	r2, r3, #1
 8005a76:	d00a      	beq.n	8005a8e <__swsetup_r+0x9a>
 8005a78:	2200      	movs	r2, #0
 8005a7a:	60a2      	str	r2, [r4, #8]
 8005a7c:	6962      	ldr	r2, [r4, #20]
 8005a7e:	4252      	negs	r2, r2
 8005a80:	61a2      	str	r2, [r4, #24]
 8005a82:	6922      	ldr	r2, [r4, #16]
 8005a84:	b942      	cbnz	r2, 8005a98 <__swsetup_r+0xa4>
 8005a86:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005a8a:	d1c5      	bne.n	8005a18 <__swsetup_r+0x24>
 8005a8c:	bd38      	pop	{r3, r4, r5, pc}
 8005a8e:	0799      	lsls	r1, r3, #30
 8005a90:	bf58      	it	pl
 8005a92:	6962      	ldrpl	r2, [r4, #20]
 8005a94:	60a2      	str	r2, [r4, #8]
 8005a96:	e7f4      	b.n	8005a82 <__swsetup_r+0x8e>
 8005a98:	2000      	movs	r0, #0
 8005a9a:	e7f7      	b.n	8005a8c <__swsetup_r+0x98>
 8005a9c:	20000010 	.word	0x20000010

08005aa0 <_raise_r>:
 8005aa0:	291f      	cmp	r1, #31
 8005aa2:	b538      	push	{r3, r4, r5, lr}
 8005aa4:	4605      	mov	r5, r0
 8005aa6:	460c      	mov	r4, r1
 8005aa8:	d904      	bls.n	8005ab4 <_raise_r+0x14>
 8005aaa:	2316      	movs	r3, #22
 8005aac:	6003      	str	r3, [r0, #0]
 8005aae:	f04f 30ff 	mov.w	r0, #4294967295
 8005ab2:	bd38      	pop	{r3, r4, r5, pc}
 8005ab4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8005ab6:	b112      	cbz	r2, 8005abe <_raise_r+0x1e>
 8005ab8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005abc:	b94b      	cbnz	r3, 8005ad2 <_raise_r+0x32>
 8005abe:	4628      	mov	r0, r5
 8005ac0:	f000 f830 	bl	8005b24 <_getpid_r>
 8005ac4:	4622      	mov	r2, r4
 8005ac6:	4601      	mov	r1, r0
 8005ac8:	4628      	mov	r0, r5
 8005aca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005ace:	f000 b817 	b.w	8005b00 <_kill_r>
 8005ad2:	2b01      	cmp	r3, #1
 8005ad4:	d00a      	beq.n	8005aec <_raise_r+0x4c>
 8005ad6:	1c59      	adds	r1, r3, #1
 8005ad8:	d103      	bne.n	8005ae2 <_raise_r+0x42>
 8005ada:	2316      	movs	r3, #22
 8005adc:	6003      	str	r3, [r0, #0]
 8005ade:	2001      	movs	r0, #1
 8005ae0:	e7e7      	b.n	8005ab2 <_raise_r+0x12>
 8005ae2:	2100      	movs	r1, #0
 8005ae4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005ae8:	4620      	mov	r0, r4
 8005aea:	4798      	blx	r3
 8005aec:	2000      	movs	r0, #0
 8005aee:	e7e0      	b.n	8005ab2 <_raise_r+0x12>

08005af0 <raise>:
 8005af0:	4b02      	ldr	r3, [pc, #8]	@ (8005afc <raise+0xc>)
 8005af2:	4601      	mov	r1, r0
 8005af4:	6818      	ldr	r0, [r3, #0]
 8005af6:	f7ff bfd3 	b.w	8005aa0 <_raise_r>
 8005afa:	bf00      	nop
 8005afc:	20000010 	.word	0x20000010

08005b00 <_kill_r>:
 8005b00:	b538      	push	{r3, r4, r5, lr}
 8005b02:	4d07      	ldr	r5, [pc, #28]	@ (8005b20 <_kill_r+0x20>)
 8005b04:	2300      	movs	r3, #0
 8005b06:	4604      	mov	r4, r0
 8005b08:	4608      	mov	r0, r1
 8005b0a:	4611      	mov	r1, r2
 8005b0c:	602b      	str	r3, [r5, #0]
 8005b0e:	f7fc fad9 	bl	80020c4 <_kill>
 8005b12:	1c43      	adds	r3, r0, #1
 8005b14:	d102      	bne.n	8005b1c <_kill_r+0x1c>
 8005b16:	682b      	ldr	r3, [r5, #0]
 8005b18:	b103      	cbz	r3, 8005b1c <_kill_r+0x1c>
 8005b1a:	6023      	str	r3, [r4, #0]
 8005b1c:	bd38      	pop	{r3, r4, r5, pc}
 8005b1e:	bf00      	nop
 8005b20:	200003e4 	.word	0x200003e4

08005b24 <_getpid_r>:
 8005b24:	f7fc bac6 	b.w	80020b4 <_getpid>

08005b28 <__swhatbuf_r>:
 8005b28:	b570      	push	{r4, r5, r6, lr}
 8005b2a:	460c      	mov	r4, r1
 8005b2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b30:	2900      	cmp	r1, #0
 8005b32:	b096      	sub	sp, #88	@ 0x58
 8005b34:	4615      	mov	r5, r2
 8005b36:	461e      	mov	r6, r3
 8005b38:	da0d      	bge.n	8005b56 <__swhatbuf_r+0x2e>
 8005b3a:	89a3      	ldrh	r3, [r4, #12]
 8005b3c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005b40:	f04f 0100 	mov.w	r1, #0
 8005b44:	bf14      	ite	ne
 8005b46:	2340      	movne	r3, #64	@ 0x40
 8005b48:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005b4c:	2000      	movs	r0, #0
 8005b4e:	6031      	str	r1, [r6, #0]
 8005b50:	602b      	str	r3, [r5, #0]
 8005b52:	b016      	add	sp, #88	@ 0x58
 8005b54:	bd70      	pop	{r4, r5, r6, pc}
 8005b56:	466a      	mov	r2, sp
 8005b58:	f000 f848 	bl	8005bec <_fstat_r>
 8005b5c:	2800      	cmp	r0, #0
 8005b5e:	dbec      	blt.n	8005b3a <__swhatbuf_r+0x12>
 8005b60:	9901      	ldr	r1, [sp, #4]
 8005b62:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005b66:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005b6a:	4259      	negs	r1, r3
 8005b6c:	4159      	adcs	r1, r3
 8005b6e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005b72:	e7eb      	b.n	8005b4c <__swhatbuf_r+0x24>

08005b74 <__smakebuf_r>:
 8005b74:	898b      	ldrh	r3, [r1, #12]
 8005b76:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b78:	079d      	lsls	r5, r3, #30
 8005b7a:	4606      	mov	r6, r0
 8005b7c:	460c      	mov	r4, r1
 8005b7e:	d507      	bpl.n	8005b90 <__smakebuf_r+0x1c>
 8005b80:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005b84:	6023      	str	r3, [r4, #0]
 8005b86:	6123      	str	r3, [r4, #16]
 8005b88:	2301      	movs	r3, #1
 8005b8a:	6163      	str	r3, [r4, #20]
 8005b8c:	b003      	add	sp, #12
 8005b8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b90:	ab01      	add	r3, sp, #4
 8005b92:	466a      	mov	r2, sp
 8005b94:	f7ff ffc8 	bl	8005b28 <__swhatbuf_r>
 8005b98:	9f00      	ldr	r7, [sp, #0]
 8005b9a:	4605      	mov	r5, r0
 8005b9c:	4639      	mov	r1, r7
 8005b9e:	4630      	mov	r0, r6
 8005ba0:	f7fe febe 	bl	8004920 <_malloc_r>
 8005ba4:	b948      	cbnz	r0, 8005bba <__smakebuf_r+0x46>
 8005ba6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005baa:	059a      	lsls	r2, r3, #22
 8005bac:	d4ee      	bmi.n	8005b8c <__smakebuf_r+0x18>
 8005bae:	f023 0303 	bic.w	r3, r3, #3
 8005bb2:	f043 0302 	orr.w	r3, r3, #2
 8005bb6:	81a3      	strh	r3, [r4, #12]
 8005bb8:	e7e2      	b.n	8005b80 <__smakebuf_r+0xc>
 8005bba:	89a3      	ldrh	r3, [r4, #12]
 8005bbc:	6020      	str	r0, [r4, #0]
 8005bbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005bc2:	81a3      	strh	r3, [r4, #12]
 8005bc4:	9b01      	ldr	r3, [sp, #4]
 8005bc6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005bca:	b15b      	cbz	r3, 8005be4 <__smakebuf_r+0x70>
 8005bcc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005bd0:	4630      	mov	r0, r6
 8005bd2:	f000 f81d 	bl	8005c10 <_isatty_r>
 8005bd6:	b128      	cbz	r0, 8005be4 <__smakebuf_r+0x70>
 8005bd8:	89a3      	ldrh	r3, [r4, #12]
 8005bda:	f023 0303 	bic.w	r3, r3, #3
 8005bde:	f043 0301 	orr.w	r3, r3, #1
 8005be2:	81a3      	strh	r3, [r4, #12]
 8005be4:	89a3      	ldrh	r3, [r4, #12]
 8005be6:	431d      	orrs	r5, r3
 8005be8:	81a5      	strh	r5, [r4, #12]
 8005bea:	e7cf      	b.n	8005b8c <__smakebuf_r+0x18>

08005bec <_fstat_r>:
 8005bec:	b538      	push	{r3, r4, r5, lr}
 8005bee:	4d07      	ldr	r5, [pc, #28]	@ (8005c0c <_fstat_r+0x20>)
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	4604      	mov	r4, r0
 8005bf4:	4608      	mov	r0, r1
 8005bf6:	4611      	mov	r1, r2
 8005bf8:	602b      	str	r3, [r5, #0]
 8005bfa:	f7fc fac3 	bl	8002184 <_fstat>
 8005bfe:	1c43      	adds	r3, r0, #1
 8005c00:	d102      	bne.n	8005c08 <_fstat_r+0x1c>
 8005c02:	682b      	ldr	r3, [r5, #0]
 8005c04:	b103      	cbz	r3, 8005c08 <_fstat_r+0x1c>
 8005c06:	6023      	str	r3, [r4, #0]
 8005c08:	bd38      	pop	{r3, r4, r5, pc}
 8005c0a:	bf00      	nop
 8005c0c:	200003e4 	.word	0x200003e4

08005c10 <_isatty_r>:
 8005c10:	b538      	push	{r3, r4, r5, lr}
 8005c12:	4d06      	ldr	r5, [pc, #24]	@ (8005c2c <_isatty_r+0x1c>)
 8005c14:	2300      	movs	r3, #0
 8005c16:	4604      	mov	r4, r0
 8005c18:	4608      	mov	r0, r1
 8005c1a:	602b      	str	r3, [r5, #0]
 8005c1c:	f7fc fac2 	bl	80021a4 <_isatty>
 8005c20:	1c43      	adds	r3, r0, #1
 8005c22:	d102      	bne.n	8005c2a <_isatty_r+0x1a>
 8005c24:	682b      	ldr	r3, [r5, #0]
 8005c26:	b103      	cbz	r3, 8005c2a <_isatty_r+0x1a>
 8005c28:	6023      	str	r3, [r4, #0]
 8005c2a:	bd38      	pop	{r3, r4, r5, pc}
 8005c2c:	200003e4 	.word	0x200003e4

08005c30 <ceil>:
 8005c30:	ec51 0b10 	vmov	r0, r1, d0
 8005c34:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005c38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c3c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8005c40:	2e13      	cmp	r6, #19
 8005c42:	460c      	mov	r4, r1
 8005c44:	4605      	mov	r5, r0
 8005c46:	4680      	mov	r8, r0
 8005c48:	dc2e      	bgt.n	8005ca8 <ceil+0x78>
 8005c4a:	2e00      	cmp	r6, #0
 8005c4c:	da11      	bge.n	8005c72 <ceil+0x42>
 8005c4e:	a332      	add	r3, pc, #200	@ (adr r3, 8005d18 <ceil+0xe8>)
 8005c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c54:	f7fa fb2a 	bl	80002ac <__adddf3>
 8005c58:	2200      	movs	r2, #0
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	f7fa ff6c 	bl	8000b38 <__aeabi_dcmpgt>
 8005c60:	b120      	cbz	r0, 8005c6c <ceil+0x3c>
 8005c62:	2c00      	cmp	r4, #0
 8005c64:	db4f      	blt.n	8005d06 <ceil+0xd6>
 8005c66:	4325      	orrs	r5, r4
 8005c68:	d151      	bne.n	8005d0e <ceil+0xde>
 8005c6a:	462c      	mov	r4, r5
 8005c6c:	4621      	mov	r1, r4
 8005c6e:	4628      	mov	r0, r5
 8005c70:	e023      	b.n	8005cba <ceil+0x8a>
 8005c72:	4f2b      	ldr	r7, [pc, #172]	@ (8005d20 <ceil+0xf0>)
 8005c74:	4137      	asrs	r7, r6
 8005c76:	ea01 0307 	and.w	r3, r1, r7
 8005c7a:	4303      	orrs	r3, r0
 8005c7c:	d01d      	beq.n	8005cba <ceil+0x8a>
 8005c7e:	a326      	add	r3, pc, #152	@ (adr r3, 8005d18 <ceil+0xe8>)
 8005c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c84:	f7fa fb12 	bl	80002ac <__adddf3>
 8005c88:	2200      	movs	r2, #0
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	f7fa ff54 	bl	8000b38 <__aeabi_dcmpgt>
 8005c90:	2800      	cmp	r0, #0
 8005c92:	d0eb      	beq.n	8005c6c <ceil+0x3c>
 8005c94:	2c00      	cmp	r4, #0
 8005c96:	bfc2      	ittt	gt
 8005c98:	f44f 1380 	movgt.w	r3, #1048576	@ 0x100000
 8005c9c:	4133      	asrgt	r3, r6
 8005c9e:	18e4      	addgt	r4, r4, r3
 8005ca0:	ea24 0407 	bic.w	r4, r4, r7
 8005ca4:	2500      	movs	r5, #0
 8005ca6:	e7e1      	b.n	8005c6c <ceil+0x3c>
 8005ca8:	2e33      	cmp	r6, #51	@ 0x33
 8005caa:	dd0a      	ble.n	8005cc2 <ceil+0x92>
 8005cac:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8005cb0:	d103      	bne.n	8005cba <ceil+0x8a>
 8005cb2:	4602      	mov	r2, r0
 8005cb4:	460b      	mov	r3, r1
 8005cb6:	f7fa faf9 	bl	80002ac <__adddf3>
 8005cba:	ec41 0b10 	vmov	d0, r0, r1
 8005cbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005cc2:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8005cc6:	f04f 37ff 	mov.w	r7, #4294967295
 8005cca:	40df      	lsrs	r7, r3
 8005ccc:	4238      	tst	r0, r7
 8005cce:	d0f4      	beq.n	8005cba <ceil+0x8a>
 8005cd0:	a311      	add	r3, pc, #68	@ (adr r3, 8005d18 <ceil+0xe8>)
 8005cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cd6:	f7fa fae9 	bl	80002ac <__adddf3>
 8005cda:	2200      	movs	r2, #0
 8005cdc:	2300      	movs	r3, #0
 8005cde:	f7fa ff2b 	bl	8000b38 <__aeabi_dcmpgt>
 8005ce2:	2800      	cmp	r0, #0
 8005ce4:	d0c2      	beq.n	8005c6c <ceil+0x3c>
 8005ce6:	2c00      	cmp	r4, #0
 8005ce8:	dd0a      	ble.n	8005d00 <ceil+0xd0>
 8005cea:	2e14      	cmp	r6, #20
 8005cec:	d101      	bne.n	8005cf2 <ceil+0xc2>
 8005cee:	3401      	adds	r4, #1
 8005cf0:	e006      	b.n	8005d00 <ceil+0xd0>
 8005cf2:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	40b3      	lsls	r3, r6
 8005cfa:	441d      	add	r5, r3
 8005cfc:	45a8      	cmp	r8, r5
 8005cfe:	d8f6      	bhi.n	8005cee <ceil+0xbe>
 8005d00:	ea25 0507 	bic.w	r5, r5, r7
 8005d04:	e7b2      	b.n	8005c6c <ceil+0x3c>
 8005d06:	2500      	movs	r5, #0
 8005d08:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 8005d0c:	e7ae      	b.n	8005c6c <ceil+0x3c>
 8005d0e:	4c05      	ldr	r4, [pc, #20]	@ (8005d24 <ceil+0xf4>)
 8005d10:	2500      	movs	r5, #0
 8005d12:	e7ab      	b.n	8005c6c <ceil+0x3c>
 8005d14:	f3af 8000 	nop.w
 8005d18:	8800759c 	.word	0x8800759c
 8005d1c:	7e37e43c 	.word	0x7e37e43c
 8005d20:	000fffff 	.word	0x000fffff
 8005d24:	3ff00000 	.word	0x3ff00000

08005d28 <_init>:
 8005d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d2a:	bf00      	nop
 8005d2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d2e:	bc08      	pop	{r3}
 8005d30:	469e      	mov	lr, r3
 8005d32:	4770      	bx	lr

08005d34 <_fini>:
 8005d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d36:	bf00      	nop
 8005d38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d3a:	bc08      	pop	{r3}
 8005d3c:	469e      	mov	lr, r3
 8005d3e:	4770      	bx	lr
