
APDS9930_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005860  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000390  08005a10  08005a10  00006a10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005da0  08005da0  000071cc  2**0
                  CONTENTS
  4 .ARM          00000008  08005da0  08005da0  00006da0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005da8  08005da8  000071cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005da8  08005da8  00006da8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005dac  08005dac  00006dac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001cc  20000000  08005db0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000071cc  2**0
                  CONTENTS
 10 .bss          00000224  200001cc  200001cc  000071cc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200003f0  200003f0  000071cc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000071cc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008672  00000000  00000000  000071fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001055  00000000  00000000  0000f86e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000358  00000000  00000000  000108c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000262  00000000  00000000  00010c20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b4f8  00000000  00000000  00010e82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00005d46  00000000  00000000  0002c37a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00090f12  00000000  00000000  000320c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000c2fd2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001df8  00000000  00000000  000c3018  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004f  00000000  00000000  000c4e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001cc 	.word	0x200001cc
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080059f8 	.word	0x080059f8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001d0 	.word	0x200001d0
 80001ec:	080059f8 	.word	0x080059f8

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2lz>:
 8000bc8:	b538      	push	{r3, r4, r5, lr}
 8000bca:	2200      	movs	r2, #0
 8000bcc:	2300      	movs	r3, #0
 8000bce:	4604      	mov	r4, r0
 8000bd0:	460d      	mov	r5, r1
 8000bd2:	f7ff ff93 	bl	8000afc <__aeabi_dcmplt>
 8000bd6:	b928      	cbnz	r0, 8000be4 <__aeabi_d2lz+0x1c>
 8000bd8:	4620      	mov	r0, r4
 8000bda:	4629      	mov	r1, r5
 8000bdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000be0:	f000 b80a 	b.w	8000bf8 <__aeabi_d2ulz>
 8000be4:	4620      	mov	r0, r4
 8000be6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000bea:	f000 f805 	bl	8000bf8 <__aeabi_d2ulz>
 8000bee:	4240      	negs	r0, r0
 8000bf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bf4:	bd38      	pop	{r3, r4, r5, pc}
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2ulz>:
 8000bf8:	b5d0      	push	{r4, r6, r7, lr}
 8000bfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000c2c <__aeabi_d2ulz+0x34>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	4606      	mov	r6, r0
 8000c00:	460f      	mov	r7, r1
 8000c02:	f7ff fd09 	bl	8000618 <__aeabi_dmul>
 8000c06:	f000 f815 	bl	8000c34 <__aeabi_d2uiz>
 8000c0a:	4604      	mov	r4, r0
 8000c0c:	f7ff fc8a 	bl	8000524 <__aeabi_ui2d>
 8000c10:	4b07      	ldr	r3, [pc, #28]	@ (8000c30 <__aeabi_d2ulz+0x38>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	f7ff fd00 	bl	8000618 <__aeabi_dmul>
 8000c18:	4602      	mov	r2, r0
 8000c1a:	460b      	mov	r3, r1
 8000c1c:	4630      	mov	r0, r6
 8000c1e:	4639      	mov	r1, r7
 8000c20:	f7ff fb42 	bl	80002a8 <__aeabi_dsub>
 8000c24:	f000 f806 	bl	8000c34 <__aeabi_d2uiz>
 8000c28:	4621      	mov	r1, r4
 8000c2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000c2c:	3df00000 	.word	0x3df00000
 8000c30:	41f00000 	.word	0x41f00000

08000c34 <__aeabi_d2uiz>:
 8000c34:	004a      	lsls	r2, r1, #1
 8000c36:	d211      	bcs.n	8000c5c <__aeabi_d2uiz+0x28>
 8000c38:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c3c:	d211      	bcs.n	8000c62 <__aeabi_d2uiz+0x2e>
 8000c3e:	d50d      	bpl.n	8000c5c <__aeabi_d2uiz+0x28>
 8000c40:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c44:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c48:	d40e      	bmi.n	8000c68 <__aeabi_d2uiz+0x34>
 8000c4a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c52:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c56:	fa23 f002 	lsr.w	r0, r3, r2
 8000c5a:	4770      	bx	lr
 8000c5c:	f04f 0000 	mov.w	r0, #0
 8000c60:	4770      	bx	lr
 8000c62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c66:	d102      	bne.n	8000c6e <__aeabi_d2uiz+0x3a>
 8000c68:	f04f 30ff 	mov.w	r0, #4294967295
 8000c6c:	4770      	bx	lr
 8000c6e:	f04f 0000 	mov.w	r0, #0
 8000c72:	4770      	bx	lr

08000c74 <Delay_ms>:
	while((SysTick->CTRL & 0x00010000) == 0);
	return (0UL);                                                     /* Function successful */
}

__STATIC_INLINE uint32_t Delay_ms(float ms)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b085      	sub	sp, #20
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	ed87 0a01 	vstr	s0, [r7, #4]
	unsigned long x =0x29040 * (ms);
 8000c7e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000c82:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8000cc8 <Delay_ms+0x54>
 8000c86:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c8e:	ee17 3a90 	vmov	r3, s15
 8000c92:	60fb      	str	r3, [r7, #12]
	SysTick->LOAD =  x ;
 8000c94:	4a0d      	ldr	r2, [pc, #52]	@ (8000ccc <Delay_ms+0x58>)
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	6053      	str	r3, [r2, #4]
	SysTick->VAL = 0;
 8000c9a:	4b0c      	ldr	r3, [pc, #48]	@ (8000ccc <Delay_ms+0x58>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	609a      	str	r2, [r3, #8]
	SysTick->CTRL |= 1;
 8000ca0:	4b0a      	ldr	r3, [pc, #40]	@ (8000ccc <Delay_ms+0x58>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a09      	ldr	r2, [pc, #36]	@ (8000ccc <Delay_ms+0x58>)
 8000ca6:	f043 0301 	orr.w	r3, r3, #1
 8000caa:	6013      	str	r3, [r2, #0]
	while((SysTick->CTRL & 0x00010000) == 0);
 8000cac:	bf00      	nop
 8000cae:	4b07      	ldr	r3, [pc, #28]	@ (8000ccc <Delay_ms+0x58>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d0f9      	beq.n	8000cae <Delay_ms+0x3a>
	return (0UL);                                                     /* Function successful */
 8000cba:	2300      	movs	r3, #0
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	3714      	adds	r7, #20
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr
 8000cc8:	48241000 	.word	0x48241000
 8000ccc:	e000e010 	.word	0xe000e010

08000cd0 <Write_Reg>:
#define ALS_Interrupt_Clear_Command 0x06
#define Prox_and_ALS_Interrupt_Clear_Command 0x07


void Write_Reg(uint8_t reg, uint8_t data)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	460a      	mov	r2, r1
 8000cda:	71fb      	strb	r3, [r7, #7]
 8000cdc:	4613      	mov	r3, r2
 8000cde:	71bb      	strb	r3, [r7, #6]
	I2C_Master_Write_Register(&APDS9930_I2C, 0x39, 0x80 | reg, data);
 8000ce0:	79fb      	ldrb	r3, [r7, #7]
 8000ce2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000ce6:	b2da      	uxtb	r2, r3
 8000ce8:	79bb      	ldrb	r3, [r7, #6]
 8000cea:	2139      	movs	r1, #57	@ 0x39
 8000cec:	4803      	ldr	r0, [pc, #12]	@ (8000cfc <Write_Reg+0x2c>)
 8000cee:	f000 fe78 	bl	80019e2 <I2C_Master_Write_Register>
}
 8000cf2:	bf00      	nop
 8000cf4:	3708      	adds	r7, #8
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	200001e8 	.word	0x200001e8

08000d00 <Read_Reg>:

uint8_t Read_Reg(uint8_t reg)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	4603      	mov	r3, r0
 8000d08:	71fb      	strb	r3, [r7, #7]

	return I2C_Master_Read_Register(&APDS9930_I2C, 0x39, 0xA0 | reg);
 8000d0a:	79fb      	ldrb	r3, [r7, #7]
 8000d0c:	f063 035f 	orn	r3, r3, #95	@ 0x5f
 8000d10:	b2db      	uxtb	r3, r3
 8000d12:	461a      	mov	r2, r3
 8000d14:	2139      	movs	r1, #57	@ 0x39
 8000d16:	4804      	ldr	r0, [pc, #16]	@ (8000d28 <Read_Reg+0x28>)
 8000d18:	f000 fe8a 	bl	8001a30 <I2C_Master_Read_Register>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	b2db      	uxtb	r3, r3
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	3708      	adds	r7, #8
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	200001e8 	.word	0x200001e8

08000d2c <Read_Word>:

uint16_t Read_Word(uint8_t reg)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b084      	sub	sp, #16
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	4603      	mov	r3, r0
 8000d34:	71fb      	strb	r3, [r7, #7]
	uint16_t x;
	uint16_t y;

	x = Read_Reg(reg);
 8000d36:	79fb      	ldrb	r3, [r7, #7]
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f7ff ffe1 	bl	8000d00 <Read_Reg>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	81fb      	strh	r3, [r7, #14]
	y = Read_Reg(reg+1)<<8;
 8000d42:	79fb      	ldrb	r3, [r7, #7]
 8000d44:	3301      	adds	r3, #1
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f7ff ffd9 	bl	8000d00 <Read_Reg>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	021b      	lsls	r3, r3, #8
 8000d52:	81bb      	strh	r3, [r7, #12]

	return (x|y);
 8000d54:	89fa      	ldrh	r2, [r7, #14]
 8000d56:	89bb      	ldrh	r3, [r7, #12]
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	b29b      	uxth	r3, r3
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	3710      	adds	r7, #16
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <APDS9930_Proximity_Interrupt_Clear>:

void APDS9930_Proximity_Interrupt_Clear(APDS9930 *config)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
	I2C_Master_Start(&APDS9930_I2C);
 8000d6c:	4809      	ldr	r0, [pc, #36]	@ (8000d94 <APDS9930_Proximity_Interrupt_Clear+0x30>)
 8000d6e:	f000 fda3 	bl	80018b8 <I2C_Master_Start>
	I2C_Master_Address(&APDS9930_I2C, 0x39,0);
 8000d72:	2200      	movs	r2, #0
 8000d74:	2139      	movs	r1, #57	@ 0x39
 8000d76:	4807      	ldr	r0, [pc, #28]	@ (8000d94 <APDS9930_Proximity_Interrupt_Clear+0x30>)
 8000d78:	f000 fdca 	bl	8001910 <I2C_Master_Address>
	I2C_Master_Send_Byte(&APDS9930_I2C, 0xE0 | Proximity_Interrupt_Clear_Command);
 8000d7c:	21e5      	movs	r1, #229	@ 0xe5
 8000d7e:	4805      	ldr	r0, [pc, #20]	@ (8000d94 <APDS9930_Proximity_Interrupt_Clear+0x30>)
 8000d80:	f000 fdfc 	bl	800197c <I2C_Master_Send_Byte>
	I2C_Master_Stop(&APDS9930_I2C);
 8000d84:	4803      	ldr	r0, [pc, #12]	@ (8000d94 <APDS9930_Proximity_Interrupt_Clear+0x30>)
 8000d86:	f000 fe1a 	bl	80019be <I2C_Master_Stop>

}
 8000d8a:	bf00      	nop
 8000d8c:	3708      	adds	r7, #8
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	200001e8 	.word	0x200001e8

08000d98 <APDS9930_DeInit>:
	I2C_Master_Send_Byte(&APDS9930_I2C, 0xE0 | Prox_and_ALS_Interrupt_Clear_Command);
	I2C_Master_Stop(&APDS9930_I2C);
}

void APDS9930_DeInit(APDS9930 *config)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
	config->Port = NULL;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	2200      	movs	r2, #0
 8000da4:	601a      	str	r2, [r3, #0]
	config->Interrupt_Port = NULL;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	2200      	movs	r2, #0
 8000daa:	609a      	str	r2, [r3, #8]
	config->SDA_Pin = 0;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	2200      	movs	r2, #0
 8000db0:	711a      	strb	r2, [r3, #4]
	config->SCL_Pin = 0;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	2200      	movs	r2, #0
 8000db6:	715a      	strb	r2, [r3, #5]
	config->Proximity_Interrupt_Enable = false;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	2200      	movs	r2, #0
 8000dbc:	735a      	strb	r2, [r3, #13]
	config->ALS_Interrupt_Enable = false;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	749a      	strb	r2, [r3, #18]
	config->Proximity_Data = -1;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000dca:	831a      	strh	r2, [r3, #24]
	config->Lux_Data = -1;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	4a04      	ldr	r2, [pc, #16]	@ (8000de0 <APDS9930_DeInit+0x48>)
 8000dd0:	61da      	str	r2, [r3, #28]
}
 8000dd2:	bf00      	nop
 8000dd4:	370c      	adds	r7, #12
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	bf800000 	.word	0xbf800000

08000de4 <APDS9930_Init>:


bool APDS9930_Init(APDS9930 *config)
{
 8000de4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000de6:	b089      	sub	sp, #36	@ 0x24
 8000de8:	af04      	add	r7, sp, #16
 8000dea:	6078      	str	r0, [r7, #4]
	bool retval;

	I2C_Reset(&APDS9930_I2C);
 8000dec:	4844      	ldr	r0, [pc, #272]	@ (8000f00 <APDS9930_Init+0x11c>)
 8000dee:	f000 fc2f 	bl	8001650 <I2C_Reset>
	APDS9930_I2C.Port = config->Port;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a42      	ldr	r2, [pc, #264]	@ (8000f00 <APDS9930_Init+0x11c>)
 8000df8:	6013      	str	r3, [r2, #0]
	APDS9930_I2C.SCL_Pin = config->SCL_Pin;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	795a      	ldrb	r2, [r3, #5]
 8000dfe:	4b40      	ldr	r3, [pc, #256]	@ (8000f00 <APDS9930_Init+0x11c>)
 8000e00:	721a      	strb	r2, [r3, #8]
	APDS9930_I2C.SDA_Pin = config->SDA_Pin;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	791a      	ldrb	r2, [r3, #4]
 8000e06:	4b3e      	ldr	r3, [pc, #248]	@ (8000f00 <APDS9930_Init+0x11c>)
 8000e08:	725a      	strb	r2, [r3, #9]
	APDS9930_I2C.mode = I2C_Mode.Master;
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	4b3c      	ldr	r3, [pc, #240]	@ (8000f00 <APDS9930_Init+0x11c>)
 8000e0e:	729a      	strb	r2, [r3, #10]
	APDS9930_I2C.speed = 400000;
 8000e10:	4b3b      	ldr	r3, [pc, #236]	@ (8000f00 <APDS9930_Init+0x11c>)
 8000e12:	4a3c      	ldr	r2, [pc, #240]	@ (8000f04 <APDS9930_Init+0x120>)
 8000e14:	605a      	str	r2, [r3, #4]
	I2C_Init(&APDS9930_I2C);
 8000e16:	483a      	ldr	r0, [pc, #232]	@ (8000f00 <APDS9930_Init+0x11c>)
 8000e18:	f000 fc5a 	bl	80016d0 <I2C_Init>

	if((config->ALS_Interrupt_Enable || config->Proximity_Interrupt_Enable) && config->Interrupt_Port != NULL)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	7c9b      	ldrb	r3, [r3, #18]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d103      	bne.n	8000e2c <APDS9930_Init+0x48>
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	7b5b      	ldrb	r3, [r3, #13]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d01b      	beq.n	8000e64 <APDS9930_Init+0x80>
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	689b      	ldr	r3, [r3, #8]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d017      	beq.n	8000e64 <APDS9930_Init+0x80>
	{
		//enable interrupt
	GPIO_Pin_Init(config->Interrupt_Port, config->Interrupt_Pin, MODE.Input, Output_Type.Open_Drain, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.None);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	6898      	ldr	r0, [r3, #8]
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	7b19      	ldrb	r1, [r3, #12]
 8000e3c:	2500      	movs	r5, #0
 8000e3e:	2601      	movs	r6, #1
 8000e40:	2303      	movs	r3, #3
 8000e42:	2200      	movs	r2, #0
 8000e44:	2400      	movs	r4, #0
 8000e46:	9402      	str	r4, [sp, #8]
 8000e48:	9201      	str	r2, [sp, #4]
 8000e4a:	9300      	str	r3, [sp, #0]
 8000e4c:	4633      	mov	r3, r6
 8000e4e:	462a      	mov	r2, r5
 8000e50:	f000 fab4 	bl	80013bc <GPIO_Pin_Init>
	GPIO_Interrupt_Setup(config->Interrupt_Pin,Interrupt_Edge.FALLING_EDGE , 0);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	7b1b      	ldrb	r3, [r3, #12]
 8000e58:	2201      	movs	r2, #1
 8000e5a:	4611      	mov	r1, r2
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f000 f9ae 	bl	80011c0 <GPIO_Interrupt_Setup>
	}

	//Read ID to verify connection with IC

	config->ID = Read_Reg(APDS9930_Regs.ID);
 8000e64:	2312      	movs	r3, #18
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff ff4a 	bl	8000d00 <Read_Reg>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	461a      	mov	r2, r3
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	f883 2020 	strb.w	r2, [r3, #32]
	if(config -> ID == 0x39)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e7c:	2b39      	cmp	r3, #57	@ 0x39
 8000e7e:	d133      	bne.n	8000ee8 <APDS9930_Init+0x104>
	{
		// Go forward with initialization
		Write_Reg(APDS9930_Regs.ENABLE, 0x00);
 8000e80:	2300      	movs	r3, #0
 8000e82:	2100      	movs	r1, #0
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff ff23 	bl	8000cd0 <Write_Reg>
		Write_Reg(APDS9930_Regs.ATIME, 0xff);
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	21ff      	movs	r1, #255	@ 0xff
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f7ff ff1e 	bl	8000cd0 <Write_Reg>
		Write_Reg(APDS9930_Regs.PTIME, 0xFF);
 8000e94:	2302      	movs	r3, #2
 8000e96:	21ff      	movs	r1, #255	@ 0xff
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f7ff ff19 	bl	8000cd0 <Write_Reg>
		Write_Reg(APDS9930_Regs.WTIME, 0xff);
 8000e9e:	2303      	movs	r3, #3
 8000ea0:	21ff      	movs	r1, #255	@ 0xff
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f7ff ff14 	bl	8000cd0 <Write_Reg>
		Write_Reg(APDS9930_Regs.PPULSE, 0x04); //0x01
 8000ea8:	230e      	movs	r3, #14
 8000eaa:	2104      	movs	r1, #4
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff ff0f 	bl	8000cd0 <Write_Reg>
		Write_Reg(APDS9930_Regs.CONTROL, 0x20);
 8000eb2:	230f      	movs	r3, #15
 8000eb4:	2120      	movs	r1, #32
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f7ff ff0a 	bl	8000cd0 <Write_Reg>
		Write_Reg(APDS9930_Regs.CONFIG, 0x00);
 8000ebc:	230d      	movs	r3, #13
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f7ff ff05 	bl	8000cd0 <Write_Reg>
		Write_Reg(APDS9930_Regs.POFFSET, 0x00);
 8000ec6:	231e      	movs	r3, #30
 8000ec8:	2100      	movs	r1, #0
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f7ff ff00 	bl	8000cd0 <Write_Reg>
		Write_Reg(APDS9930_Regs.ENABLE, 0x2F);
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	212f      	movs	r1, #47	@ 0x2f
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f7ff fefb 	bl	8000cd0 <Write_Reg>
		Delay_ms(12);
 8000eda:	eeb2 0a08 	vmov.f32	s0, #40	@ 0x41400000  12.0
 8000ede:	f7ff fec9 	bl	8000c74 <Delay_ms>

		retval = true;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	73fb      	strb	r3, [r7, #15]
 8000ee6:	e005      	b.n	8000ef4 <APDS9930_Init+0x110>
//		APDS9930_Prox_and_ALS_Interrupt_Clear(config);

	}
	else
	{
		config->ID = 0;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2200      	movs	r2, #0
 8000eec:	f883 2020 	strb.w	r2, [r3, #32]
		retval = false;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	73fb      	strb	r3, [r7, #15]
	}

	return retval;
 8000ef4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3714      	adds	r7, #20
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000efe:	bf00      	nop
 8000f00:	200001e8 	.word	0x200001e8
 8000f04:	00061a80 	.word	0x00061a80

08000f08 <APDS9930_Read_Data>:

void APDS9930_Read_Data(APDS9930 *config)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b090      	sub	sp, #64	@ 0x40
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
//	APDS9930_Prox_and_ALS_Interrupt_Clear(config);
	config->Proximity_Data = Read_Word(0x18);
 8000f10:	2018      	movs	r0, #24
 8000f12:	f7ff ff0b 	bl	8000d2c <Read_Word>
 8000f16:	4603      	mov	r3, r0
 8000f18:	461a      	mov	r2, r3
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	831a      	strh	r2, [r3, #24]

	float CH0_data = 0.0;
 8000f1e:	f04f 0300 	mov.w	r3, #0
 8000f22:	63fb      	str	r3, [r7, #60]	@ 0x3c
	float CH1_data = 0.0;
 8000f24:	f04f 0300 	mov.w	r3, #0
 8000f28:	63bb      	str	r3, [r7, #56]	@ 0x38
	float DF = 52.0;
 8000f2a:	4b37      	ldr	r3, [pc, #220]	@ (8001008 <APDS9930_Read_Data+0x100>)
 8000f2c:	637b      	str	r3, [r7, #52]	@ 0x34
	float IAC[3];
	float LPC = 0.0;
 8000f2e:	f04f 0300 	mov.w	r3, #0
 8000f32:	633b      	str	r3, [r7, #48]	@ 0x30
	float ALSIT = 400.0;
 8000f34:	4b35      	ldr	r3, [pc, #212]	@ (800100c <APDS9930_Read_Data+0x104>)
 8000f36:	62fb      	str	r3, [r7, #44]	@ 0x2c
	float AGAIN = 1.0;
 8000f38:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8000f3c:	62bb      	str	r3, [r7, #40]	@ 0x28
	float GA = 0.49;
 8000f3e:	4b34      	ldr	r3, [pc, #208]	@ (8001010 <APDS9930_Read_Data+0x108>)
 8000f40:	627b      	str	r3, [r7, #36]	@ 0x24
	float B = 1.862;
 8000f42:	4b34      	ldr	r3, [pc, #208]	@ (8001014 <APDS9930_Read_Data+0x10c>)
 8000f44:	623b      	str	r3, [r7, #32]
	float C = 0.746;
 8000f46:	4b34      	ldr	r3, [pc, #208]	@ (8001018 <APDS9930_Read_Data+0x110>)
 8000f48:	61fb      	str	r3, [r7, #28]
	float D = 1.291;
 8000f4a:	4b34      	ldr	r3, [pc, #208]	@ (800101c <APDS9930_Read_Data+0x114>)
 8000f4c:	61bb      	str	r3, [r7, #24]

	CH0_data = Read_Word(APDS9930_Regs.Ch0DATAL);
 8000f4e:	2314      	movs	r3, #20
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff feeb 	bl	8000d2c <Read_Word>
 8000f56:	4603      	mov	r3, r0
 8000f58:	ee07 3a90 	vmov	s15, r3
 8000f5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f60:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
	CH1_data = Read_Word(APDS9930_Regs.Ch1DATAL);
 8000f64:	2316      	movs	r3, #22
 8000f66:	4618      	mov	r0, r3
 8000f68:	f7ff fee0 	bl	8000d2c <Read_Word>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	ee07 3a90 	vmov	s15, r3
 8000f72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f76:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

	// LUX Equation:

	IAC[1] =   CH0_data - B*CH1_data;
 8000f7a:	ed97 7a08 	vldr	s14, [r7, #32]
 8000f7e:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8000f82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f86:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8000f8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f8e:	edc7 7a04 	vstr	s15, [r7, #16]
	IAC[2] = C*CH0_data - D*CH1_data;
 8000f92:	ed97 7a07 	vldr	s14, [r7, #28]
 8000f96:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8000f9a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f9e:	edd7 6a06 	vldr	s13, [r7, #24]
 8000fa2:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8000fa6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000faa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fae:	edc7 7a05 	vstr	s15, [r7, #20]
	IAC[0] = MAX(IAC[1], IAC[2]);
 8000fb2:	ed97 7a04 	vldr	s14, [r7, #16]
 8000fb6:	edd7 7a05 	vldr	s15, [r7, #20]
 8000fba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000fbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fc2:	dd01      	ble.n	8000fc8 <APDS9930_Read_Data+0xc0>
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	e000      	b.n	8000fca <APDS9930_Read_Data+0xc2>
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	60fb      	str	r3, [r7, #12]
	LPC = GA * DF / (ALSIT * AGAIN);
 8000fcc:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8000fd0:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8000fd4:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000fd8:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8000fdc:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8000fe0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fe4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000fe8:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
	config->Lux_Data = IAC[0] * LPC;
 8000fec:	ed97 7a03 	vldr	s14, [r7, #12]
 8000ff0:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8000ff4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	edc3 7a07 	vstr	s15, [r3, #28]

}
 8000ffe:	bf00      	nop
 8001000:	3740      	adds	r7, #64	@ 0x40
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	42500000 	.word	0x42500000
 800100c:	43c80000 	.word	0x43c80000
 8001010:	3efae148 	.word	0x3efae148
 8001014:	3fee5604 	.word	0x3fee5604
 8001018:	3f3ef9db 	.word	0x3f3ef9db
 800101c:	3fa53f7d 	.word	0x3fa53f7d

08001020 <Console_Init>:

USART_Config serial;


 void Console_Init(USART_TypeDef *port,int32_t baudrate)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	6039      	str	r1, [r7, #0]
	 USART_Config_Reset(&serial);
 800102a:	480e      	ldr	r0, [pc, #56]	@ (8001064 <Console_Init+0x44>)
 800102c:	f001 f851 	bl	80020d2 <USART_Config_Reset>
	 serial.Port = USART1;
 8001030:	4b0c      	ldr	r3, [pc, #48]	@ (8001064 <Console_Init+0x44>)
 8001032:	4a0d      	ldr	r2, [pc, #52]	@ (8001068 <Console_Init+0x48>)
 8001034:	601a      	str	r2, [r3, #0]
	 serial.baudrate = baudrate;
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	4a0a      	ldr	r2, [pc, #40]	@ (8001064 <Console_Init+0x44>)
 800103a:	6093      	str	r3, [r2, #8]
	 serial.mode = USART_Mode.Asynchronous;
 800103c:	2201      	movs	r2, #1
 800103e:	4b09      	ldr	r3, [pc, #36]	@ (8001064 <Console_Init+0x44>)
 8001040:	731a      	strb	r2, [r3, #12]
	 serial.stop_bits = Stop_Bits.Bit_1;
 8001042:	2300      	movs	r3, #0
 8001044:	b2da      	uxtb	r2, r3
 8001046:	4b07      	ldr	r3, [pc, #28]	@ (8001064 <Console_Init+0x44>)
 8001048:	751a      	strb	r2, [r3, #20]
	 serial.TX_Pin = USART1_TX_Pin.PB6;
 800104a:	2206      	movs	r2, #6
 800104c:	4b05      	ldr	r3, [pc, #20]	@ (8001064 <Console_Init+0x44>)
 800104e:	735a      	strb	r2, [r3, #13]
	 serial.RX_Pin = USART1_RX_Pin.PB7;
 8001050:	2207      	movs	r2, #7
 8001052:	4b04      	ldr	r3, [pc, #16]	@ (8001064 <Console_Init+0x44>)
 8001054:	739a      	strb	r2, [r3, #14]
	 USART_Init(&serial);
 8001056:	4803      	ldr	r0, [pc, #12]	@ (8001064 <Console_Init+0x44>)
 8001058:	f001 fd5a 	bl	8002b10 <USART_Init>


}
 800105c:	bf00      	nop
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	200001f8 	.word	0x200001f8
 8001068:	40011000 	.word	0x40011000

0800106c <printConsole>:

 void printConsole(char *msg, ...)
{
 800106c:	b40f      	push	{r0, r1, r2, r3}
 800106e:	b580      	push	{r7, lr}
 8001070:	f5ad 5d1c 	sub.w	sp, sp, #9984	@ 0x2700
 8001074:	b086      	sub	sp, #24
 8001076:	af00      	add	r7, sp, #0

char buff[10000];
//	#ifdef DEBUG_UART

	va_list args;
	va_start(args, msg);
 8001078:	f507 521c 	add.w	r2, r7, #9984	@ 0x2700
 800107c:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 8001080:	f507 63e3 	add.w	r3, r7, #1816	@ 0x718
 8001084:	f5a3 63e3 	sub.w	r3, r3, #1816	@ 0x718
 8001088:	601a      	str	r2, [r3, #0]
	vsprintf(buff, msg, args);
 800108a:	f507 63e3 	add.w	r3, r7, #1816	@ 0x718
 800108e:	f5a3 62e3 	sub.w	r2, r3, #1816	@ 0x718
 8001092:	f107 0318 	add.w	r3, r7, #24
 8001096:	3b14      	subs	r3, #20
 8001098:	6812      	ldr	r2, [r2, #0]
 800109a:	f507 511c 	add.w	r1, r7, #9984	@ 0x2700
 800109e:	f101 0120 	add.w	r1, r1, #32
 80010a2:	6809      	ldr	r1, [r1, #0]
 80010a4:	4618      	mov	r0, r3
 80010a6:	f002 fb57 	bl	8003758 <vsiprintf>

	for(int i = 0; i<= strlen(buff)-1; i++)
 80010aa:	2300      	movs	r3, #0
 80010ac:	f507 521c 	add.w	r2, r7, #9984	@ 0x2700
 80010b0:	f102 0214 	add.w	r2, r2, #20
 80010b4:	6013      	str	r3, [r2, #0]
 80010b6:	e020      	b.n	80010fa <printConsole+0x8e>
	{
		serial.Port -> DR = buff[i];
 80010b8:	f507 63e3 	add.w	r3, r7, #1816	@ 0x718
 80010bc:	f2a3 7214 	subw	r2, r3, #1812	@ 0x714
 80010c0:	f507 531c 	add.w	r3, r7, #9984	@ 0x2700
 80010c4:	f103 0314 	add.w	r3, r3, #20
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4413      	add	r3, r2
 80010cc:	781a      	ldrb	r2, [r3, #0]
 80010ce:	4b17      	ldr	r3, [pc, #92]	@ (800112c <printConsole+0xc0>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	605a      	str	r2, [r3, #4]
		while (!(serial.Port -> SR & USART_SR_TXE));
 80010d4:	bf00      	nop
 80010d6:	4b15      	ldr	r3, [pc, #84]	@ (800112c <printConsole+0xc0>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d0f8      	beq.n	80010d6 <printConsole+0x6a>
	for(int i = 0; i<= strlen(buff)-1; i++)
 80010e4:	f507 531c 	add.w	r3, r7, #9984	@ 0x2700
 80010e8:	f103 0314 	add.w	r3, r3, #20
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	3301      	adds	r3, #1
 80010f0:	f507 521c 	add.w	r2, r7, #9984	@ 0x2700
 80010f4:	f102 0214 	add.w	r2, r2, #20
 80010f8:	6013      	str	r3, [r2, #0]
 80010fa:	f107 0318 	add.w	r3, r7, #24
 80010fe:	3b14      	subs	r3, #20
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff f8c5 	bl	8000290 <strlen>
 8001106:	4603      	mov	r3, r0
 8001108:	1e5a      	subs	r2, r3, #1
 800110a:	f507 531c 	add.w	r3, r7, #9984	@ 0x2700
 800110e:	f103 0314 	add.w	r3, r3, #20
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	429a      	cmp	r2, r3
 8001116:	d2cf      	bcs.n	80010b8 <printConsole+0x4c>
	}
}
 8001118:	bf00      	nop
 800111a:	bf00      	nop
 800111c:	f507 571c 	add.w	r7, r7, #9984	@ 0x2700
 8001120:	3718      	adds	r7, #24
 8001122:	46bd      	mov	sp, r7
 8001124:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001128:	b004      	add	sp, #16
 800112a:	4770      	bx	lr
 800112c:	200001f8 	.word	0x200001f8

08001130 <__NVIC_EnableIRQ>:
//    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
//  }
//}

__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800113a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113e:	2b00      	cmp	r3, #0
 8001140:	db0b      	blt.n	800115a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001142:	79fb      	ldrb	r3, [r7, #7]
 8001144:	f003 021f 	and.w	r2, r3, #31
 8001148:	4907      	ldr	r1, [pc, #28]	@ (8001168 <__NVIC_EnableIRQ+0x38>)
 800114a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114e:	095b      	lsrs	r3, r3, #5
 8001150:	2001      	movs	r0, #1
 8001152:	fa00 f202 	lsl.w	r2, r0, r2
 8001156:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800115a:	bf00      	nop
 800115c:	370c      	adds	r7, #12
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	e000e100 	.word	0xe000e100

0800116c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	4603      	mov	r3, r0
 8001174:	6039      	str	r1, [r7, #0]
 8001176:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001178:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117c:	2b00      	cmp	r3, #0
 800117e:	db0a      	blt.n	8001196 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	b2da      	uxtb	r2, r3
 8001184:	490c      	ldr	r1, [pc, #48]	@ (80011b8 <__NVIC_SetPriority+0x4c>)
 8001186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118a:	0112      	lsls	r2, r2, #4
 800118c:	b2d2      	uxtb	r2, r2
 800118e:	440b      	add	r3, r1
 8001190:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001194:	e00a      	b.n	80011ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	b2da      	uxtb	r2, r3
 800119a:	4908      	ldr	r1, [pc, #32]	@ (80011bc <__NVIC_SetPriority+0x50>)
 800119c:	79fb      	ldrb	r3, [r7, #7]
 800119e:	f003 030f 	and.w	r3, r3, #15
 80011a2:	3b04      	subs	r3, #4
 80011a4:	0112      	lsls	r2, r2, #4
 80011a6:	b2d2      	uxtb	r2, r2
 80011a8:	440b      	add	r3, r1
 80011aa:	761a      	strb	r2, [r3, #24]
}
 80011ac:	bf00      	nop
 80011ae:	370c      	adds	r7, #12
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr
 80011b8:	e000e100 	.word	0xe000e100
 80011bc:	e000ed00 	.word	0xe000ed00

080011c0 <GPIO_Interrupt_Setup>:
#include "GPIO.h"



void GPIO_Interrupt_Setup(int pin, int edge_select, uint32_t priority)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	60f8      	str	r0, [r7, #12]
 80011c8:	60b9      	str	r1, [r7, #8]
 80011ca:	607a      	str	r2, [r7, #4]
	EXTI ->IMR |= 1 << pin;
 80011cc:	4b4b      	ldr	r3, [pc, #300]	@ (80012fc <GPIO_Interrupt_Setup+0x13c>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	2101      	movs	r1, #1
 80011d2:	68fa      	ldr	r2, [r7, #12]
 80011d4:	fa01 f202 	lsl.w	r2, r1, r2
 80011d8:	4611      	mov	r1, r2
 80011da:	4a48      	ldr	r2, [pc, #288]	@ (80012fc <GPIO_Interrupt_Setup+0x13c>)
 80011dc:	430b      	orrs	r3, r1
 80011de:	6013      	str	r3, [r2, #0]
	switch (edge_select) {
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	2b02      	cmp	r3, #2
 80011e4:	d01f      	beq.n	8001226 <GPIO_Interrupt_Setup+0x66>
 80011e6:	68bb      	ldr	r3, [r7, #8]
 80011e8:	2b02      	cmp	r3, #2
 80011ea:	dc31      	bgt.n	8001250 <GPIO_Interrupt_Setup+0x90>
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d003      	beq.n	80011fa <GPIO_Interrupt_Setup+0x3a>
 80011f2:	68bb      	ldr	r3, [r7, #8]
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	d00b      	beq.n	8001210 <GPIO_Interrupt_Setup+0x50>
 80011f8:	e02a      	b.n	8001250 <GPIO_Interrupt_Setup+0x90>
		case 0:
			EXTI ->RTSR |= 1 << pin;
 80011fa:	4b40      	ldr	r3, [pc, #256]	@ (80012fc <GPIO_Interrupt_Setup+0x13c>)
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	2101      	movs	r1, #1
 8001200:	68fa      	ldr	r2, [r7, #12]
 8001202:	fa01 f202 	lsl.w	r2, r1, r2
 8001206:	4611      	mov	r1, r2
 8001208:	4a3c      	ldr	r2, [pc, #240]	@ (80012fc <GPIO_Interrupt_Setup+0x13c>)
 800120a:	430b      	orrs	r3, r1
 800120c:	6093      	str	r3, [r2, #8]
			break;
 800120e:	e01f      	b.n	8001250 <GPIO_Interrupt_Setup+0x90>
		case 1:
			EXTI ->FTSR |= 1 << pin;
 8001210:	4b3a      	ldr	r3, [pc, #232]	@ (80012fc <GPIO_Interrupt_Setup+0x13c>)
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	2101      	movs	r1, #1
 8001216:	68fa      	ldr	r2, [r7, #12]
 8001218:	fa01 f202 	lsl.w	r2, r1, r2
 800121c:	4611      	mov	r1, r2
 800121e:	4a37      	ldr	r2, [pc, #220]	@ (80012fc <GPIO_Interrupt_Setup+0x13c>)
 8001220:	430b      	orrs	r3, r1
 8001222:	60d3      	str	r3, [r2, #12]
			break;
 8001224:	e014      	b.n	8001250 <GPIO_Interrupt_Setup+0x90>
		case 2:
			EXTI ->RTSR |= 1 << pin;
 8001226:	4b35      	ldr	r3, [pc, #212]	@ (80012fc <GPIO_Interrupt_Setup+0x13c>)
 8001228:	689b      	ldr	r3, [r3, #8]
 800122a:	2101      	movs	r1, #1
 800122c:	68fa      	ldr	r2, [r7, #12]
 800122e:	fa01 f202 	lsl.w	r2, r1, r2
 8001232:	4611      	mov	r1, r2
 8001234:	4a31      	ldr	r2, [pc, #196]	@ (80012fc <GPIO_Interrupt_Setup+0x13c>)
 8001236:	430b      	orrs	r3, r1
 8001238:	6093      	str	r3, [r2, #8]
			EXTI ->FTSR |= 1 << pin;
 800123a:	4b30      	ldr	r3, [pc, #192]	@ (80012fc <GPIO_Interrupt_Setup+0x13c>)
 800123c:	68db      	ldr	r3, [r3, #12]
 800123e:	2101      	movs	r1, #1
 8001240:	68fa      	ldr	r2, [r7, #12]
 8001242:	fa01 f202 	lsl.w	r2, r1, r2
 8001246:	4611      	mov	r1, r2
 8001248:	4a2c      	ldr	r2, [pc, #176]	@ (80012fc <GPIO_Interrupt_Setup+0x13c>)
 800124a:	430b      	orrs	r3, r1
 800124c:	60d3      	str	r3, [r2, #12]
			break;
 800124e:	bf00      	nop
	}

	if(pin == 0)
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d107      	bne.n	8001266 <GPIO_Interrupt_Setup+0xa6>
	{
		NVIC_SetPriority(EXTI0_IRQn,priority);
 8001256:	6879      	ldr	r1, [r7, #4]
 8001258:	2006      	movs	r0, #6
 800125a:	f7ff ff87 	bl	800116c <__NVIC_SetPriority>
		NVIC_EnableIRQ(EXTI0_IRQn);
 800125e:	2006      	movs	r0, #6
 8001260:	f7ff ff66 	bl	8001130 <__NVIC_EnableIRQ>
		NVIC_EnableIRQ(EXTI15_10_IRQn);
	}



}
 8001264:	e046      	b.n	80012f4 <GPIO_Interrupt_Setup+0x134>
	else if(pin == 1)
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	2b01      	cmp	r3, #1
 800126a:	d107      	bne.n	800127c <GPIO_Interrupt_Setup+0xbc>
		NVIC_SetPriority(EXTI1_IRQn,priority);
 800126c:	6879      	ldr	r1, [r7, #4]
 800126e:	2007      	movs	r0, #7
 8001270:	f7ff ff7c 	bl	800116c <__NVIC_SetPriority>
		NVIC_EnableIRQ(EXTI1_IRQn);
 8001274:	2007      	movs	r0, #7
 8001276:	f7ff ff5b 	bl	8001130 <__NVIC_EnableIRQ>
}
 800127a:	e03b      	b.n	80012f4 <GPIO_Interrupt_Setup+0x134>
	else if(pin == 2)
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	2b02      	cmp	r3, #2
 8001280:	d107      	bne.n	8001292 <GPIO_Interrupt_Setup+0xd2>
		NVIC_SetPriority(EXTI2_IRQn,priority);
 8001282:	6879      	ldr	r1, [r7, #4]
 8001284:	2008      	movs	r0, #8
 8001286:	f7ff ff71 	bl	800116c <__NVIC_SetPriority>
		NVIC_EnableIRQ(EXTI2_IRQn);
 800128a:	2008      	movs	r0, #8
 800128c:	f7ff ff50 	bl	8001130 <__NVIC_EnableIRQ>
}
 8001290:	e030      	b.n	80012f4 <GPIO_Interrupt_Setup+0x134>
	else if(pin == 3)
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	2b03      	cmp	r3, #3
 8001296:	d107      	bne.n	80012a8 <GPIO_Interrupt_Setup+0xe8>
		NVIC_SetPriority(EXTI3_IRQn,priority);
 8001298:	6879      	ldr	r1, [r7, #4]
 800129a:	2009      	movs	r0, #9
 800129c:	f7ff ff66 	bl	800116c <__NVIC_SetPriority>
		NVIC_EnableIRQ(EXTI3_IRQn);
 80012a0:	2009      	movs	r0, #9
 80012a2:	f7ff ff45 	bl	8001130 <__NVIC_EnableIRQ>
}
 80012a6:	e025      	b.n	80012f4 <GPIO_Interrupt_Setup+0x134>
	else if(pin == 4)
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	2b04      	cmp	r3, #4
 80012ac:	d107      	bne.n	80012be <GPIO_Interrupt_Setup+0xfe>
		NVIC_SetPriority(EXTI4_IRQn,priority);
 80012ae:	6879      	ldr	r1, [r7, #4]
 80012b0:	200a      	movs	r0, #10
 80012b2:	f7ff ff5b 	bl	800116c <__NVIC_SetPriority>
		NVIC_EnableIRQ(EXTI4_IRQn);
 80012b6:	200a      	movs	r0, #10
 80012b8:	f7ff ff3a 	bl	8001130 <__NVIC_EnableIRQ>
}
 80012bc:	e01a      	b.n	80012f4 <GPIO_Interrupt_Setup+0x134>
	else if(pin >= 5 || pin <= 9)
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	2b04      	cmp	r3, #4
 80012c2:	dc02      	bgt.n	80012ca <GPIO_Interrupt_Setup+0x10a>
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	2b09      	cmp	r3, #9
 80012c8:	dc07      	bgt.n	80012da <GPIO_Interrupt_Setup+0x11a>
		NVIC_SetPriority(EXTI9_5_IRQn,priority);
 80012ca:	6879      	ldr	r1, [r7, #4]
 80012cc:	2017      	movs	r0, #23
 80012ce:	f7ff ff4d 	bl	800116c <__NVIC_SetPriority>
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 80012d2:	2017      	movs	r0, #23
 80012d4:	f7ff ff2c 	bl	8001130 <__NVIC_EnableIRQ>
}
 80012d8:	e00c      	b.n	80012f4 <GPIO_Interrupt_Setup+0x134>
	else if(pin >= 10 || pin <= 15)
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	2b09      	cmp	r3, #9
 80012de:	dc02      	bgt.n	80012e6 <GPIO_Interrupt_Setup+0x126>
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	2b0f      	cmp	r3, #15
 80012e4:	dc06      	bgt.n	80012f4 <GPIO_Interrupt_Setup+0x134>
		NVIC_SetPriority(EXTI15_10_IRQn,priority);
 80012e6:	6879      	ldr	r1, [r7, #4]
 80012e8:	2028      	movs	r0, #40	@ 0x28
 80012ea:	f7ff ff3f 	bl	800116c <__NVIC_SetPriority>
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 80012ee:	2028      	movs	r0, #40	@ 0x28
 80012f0:	f7ff ff1e 	bl	8001130 <__NVIC_EnableIRQ>
}
 80012f4:	bf00      	nop
 80012f6:	3710      	adds	r7, #16
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	40013c00 	.word	0x40013c00

08001300 <GPIO_Clock_Enable>:

	return 1;
}

int GPIO_Clock_Enable(GPIO_TypeDef *PORT)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
	if(PORT == GPIOA)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	4a25      	ldr	r2, [pc, #148]	@ (80013a0 <GPIO_Clock_Enable+0xa0>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d106      	bne.n	800131e <GPIO_Clock_Enable+0x1e>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOAEN;
 8001310:	4b24      	ldr	r3, [pc, #144]	@ (80013a4 <GPIO_Clock_Enable+0xa4>)
 8001312:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001314:	4a23      	ldr	r2, [pc, #140]	@ (80013a4 <GPIO_Clock_Enable+0xa4>)
 8001316:	f043 0301 	orr.w	r3, r3, #1
 800131a:	6313      	str	r3, [r2, #48]	@ 0x30
 800131c:	e039      	b.n	8001392 <GPIO_Clock_Enable+0x92>
	} else 	if(PORT == GPIOB)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4a21      	ldr	r2, [pc, #132]	@ (80013a8 <GPIO_Clock_Enable+0xa8>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d106      	bne.n	8001334 <GPIO_Clock_Enable+0x34>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOBEN;
 8001326:	4b1f      	ldr	r3, [pc, #124]	@ (80013a4 <GPIO_Clock_Enable+0xa4>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800132a:	4a1e      	ldr	r2, [pc, #120]	@ (80013a4 <GPIO_Clock_Enable+0xa4>)
 800132c:	f043 0302 	orr.w	r3, r3, #2
 8001330:	6313      	str	r3, [r2, #48]	@ 0x30
 8001332:	e02e      	b.n	8001392 <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOC)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	4a1d      	ldr	r2, [pc, #116]	@ (80013ac <GPIO_Clock_Enable+0xac>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d106      	bne.n	800134a <GPIO_Clock_Enable+0x4a>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOCEN;
 800133c:	4b19      	ldr	r3, [pc, #100]	@ (80013a4 <GPIO_Clock_Enable+0xa4>)
 800133e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001340:	4a18      	ldr	r2, [pc, #96]	@ (80013a4 <GPIO_Clock_Enable+0xa4>)
 8001342:	f043 0304 	orr.w	r3, r3, #4
 8001346:	6313      	str	r3, [r2, #48]	@ 0x30
 8001348:	e023      	b.n	8001392 <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOD)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4a18      	ldr	r2, [pc, #96]	@ (80013b0 <GPIO_Clock_Enable+0xb0>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d106      	bne.n	8001360 <GPIO_Clock_Enable+0x60>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIODEN;
 8001352:	4b14      	ldr	r3, [pc, #80]	@ (80013a4 <GPIO_Clock_Enable+0xa4>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001356:	4a13      	ldr	r2, [pc, #76]	@ (80013a4 <GPIO_Clock_Enable+0xa4>)
 8001358:	f043 0308 	orr.w	r3, r3, #8
 800135c:	6313      	str	r3, [r2, #48]	@ 0x30
 800135e:	e018      	b.n	8001392 <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOE)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	4a14      	ldr	r2, [pc, #80]	@ (80013b4 <GPIO_Clock_Enable+0xb4>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d106      	bne.n	8001376 <GPIO_Clock_Enable+0x76>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOEEN;
 8001368:	4b0e      	ldr	r3, [pc, #56]	@ (80013a4 <GPIO_Clock_Enable+0xa4>)
 800136a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800136c:	4a0d      	ldr	r2, [pc, #52]	@ (80013a4 <GPIO_Clock_Enable+0xa4>)
 800136e:	f043 0310 	orr.w	r3, r3, #16
 8001372:	6313      	str	r3, [r2, #48]	@ 0x30
 8001374:	e00d      	b.n	8001392 <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOH)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4a0f      	ldr	r2, [pc, #60]	@ (80013b8 <GPIO_Clock_Enable+0xb8>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d106      	bne.n	800138c <GPIO_Clock_Enable+0x8c>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOHEN;
 800137e:	4b09      	ldr	r3, [pc, #36]	@ (80013a4 <GPIO_Clock_Enable+0xa4>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001382:	4a08      	ldr	r2, [pc, #32]	@ (80013a4 <GPIO_Clock_Enable+0xa4>)
 8001384:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001388:	6313      	str	r3, [r2, #48]	@ 0x30
 800138a:	e002      	b.n	8001392 <GPIO_Clock_Enable+0x92>
	}else
	{
		return -1;
 800138c:	f04f 33ff 	mov.w	r3, #4294967295
 8001390:	e000      	b.n	8001394 <GPIO_Clock_Enable+0x94>
	}

	return 1;
 8001392:	2301      	movs	r3, #1
}
 8001394:	4618      	mov	r0, r3
 8001396:	370c      	adds	r7, #12
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr
 80013a0:	40020000 	.word	0x40020000
 80013a4:	40023800 	.word	0x40023800
 80013a8:	40020400 	.word	0x40020400
 80013ac:	40020800 	.word	0x40020800
 80013b0:	40020c00 	.word	0x40020c00
 80013b4:	40021000 	.word	0x40021000
 80013b8:	40021c00 	.word	0x40021c00

080013bc <GPIO_Pin_Init>:


void GPIO_Pin_Init(GPIO_TypeDef *Port, uint8_t pin, uint8_t mode, uint8_t output_type, uint8_t speed, uint8_t pull, uint8_t alternate_function)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	4608      	mov	r0, r1
 80013c6:	4611      	mov	r1, r2
 80013c8:	461a      	mov	r2, r3
 80013ca:	4603      	mov	r3, r0
 80013cc:	70fb      	strb	r3, [r7, #3]
 80013ce:	460b      	mov	r3, r1
 80013d0:	70bb      	strb	r3, [r7, #2]
 80013d2:	4613      	mov	r3, r2
 80013d4:	707b      	strb	r3, [r7, #1]
	GPIO_Clock_Enable(Port);
 80013d6:	6878      	ldr	r0, [r7, #4]
 80013d8:	f7ff ff92 	bl	8001300 <GPIO_Clock_Enable>
	Port -> MODER |= mode << (pin*2);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	78b9      	ldrb	r1, [r7, #2]
 80013e2:	78fa      	ldrb	r2, [r7, #3]
 80013e4:	0052      	lsls	r2, r2, #1
 80013e6:	fa01 f202 	lsl.w	r2, r1, r2
 80013ea:	431a      	orrs	r2, r3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	601a      	str	r2, [r3, #0]
	Port -> OTYPER |= output_type << pin;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	7879      	ldrb	r1, [r7, #1]
 80013f6:	78fa      	ldrb	r2, [r7, #3]
 80013f8:	fa01 f202 	lsl.w	r2, r1, r2
 80013fc:	431a      	orrs	r2, r3
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	605a      	str	r2, [r3, #4]
	Port -> OSPEEDR |= speed << (pin*2);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	7c39      	ldrb	r1, [r7, #16]
 8001408:	78fa      	ldrb	r2, [r7, #3]
 800140a:	0052      	lsls	r2, r2, #1
 800140c:	fa01 f202 	lsl.w	r2, r1, r2
 8001410:	431a      	orrs	r2, r3
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	609a      	str	r2, [r3, #8]
	Port -> PUPDR |= pull << (pin*2);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	68db      	ldr	r3, [r3, #12]
 800141a:	7d39      	ldrb	r1, [r7, #20]
 800141c:	78fa      	ldrb	r2, [r7, #3]
 800141e:	0052      	lsls	r2, r2, #1
 8001420:	fa01 f202 	lsl.w	r2, r1, r2
 8001424:	431a      	orrs	r2, r3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	60da      	str	r2, [r3, #12]
	if(pin < 8) Port -> AFR[0] |= alternate_function << (pin*4);
 800142a:	78fb      	ldrb	r3, [r7, #3]
 800142c:	2b07      	cmp	r3, #7
 800142e:	d80a      	bhi.n	8001446 <GPIO_Pin_Init+0x8a>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6a1b      	ldr	r3, [r3, #32]
 8001434:	7e39      	ldrb	r1, [r7, #24]
 8001436:	78fa      	ldrb	r2, [r7, #3]
 8001438:	0092      	lsls	r2, r2, #2
 800143a:	fa01 f202 	lsl.w	r2, r1, r2
 800143e:	431a      	orrs	r2, r3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	621a      	str	r2, [r3, #32]
	else Port -> AFR[1] |= alternate_function << ((pin-8)*4);
}
 8001444:	e00a      	b.n	800145c <GPIO_Pin_Init+0xa0>
	else Port -> AFR[1] |= alternate_function << ((pin-8)*4);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800144a:	7e39      	ldrb	r1, [r7, #24]
 800144c:	78fa      	ldrb	r2, [r7, #3]
 800144e:	3a08      	subs	r2, #8
 8001450:	0092      	lsls	r2, r2, #2
 8001452:	fa01 f202 	lsl.w	r2, r1, r2
 8001456:	431a      	orrs	r2, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800145c:	bf00      	nop
 800145e:	3708      	adds	r7, #8
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}

08001464 <pin_setup>:

DMA_Config xI2C_TX;
DMA_Config xI2C_RX;

static void pin_setup(I2C_Config *config)
{
 8001464:	b590      	push	{r4, r7, lr}
 8001466:	b087      	sub	sp, #28
 8001468:	af04      	add	r7, sp, #16
 800146a:	6078      	str	r0, [r7, #4]
	if(config->Port == I2C1)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a56      	ldr	r2, [pc, #344]	@ (80015cc <pin_setup+0x168>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d14e      	bne.n	8001514 <pin_setup+0xb0>
	{
		if(config->SCL_Pin == I2C1_SCL_Pin.PB6) GPIO_Pin_Init(GPIOB, 6, MODE.Alternate_Function, Output_Type.Open_Drain, Speed.Very_High_Speed, Pull.Pull_Up, Alternate_Functions.I2C_1);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	7a1b      	ldrb	r3, [r3, #8]
 800147a:	221a      	movs	r2, #26
 800147c:	4293      	cmp	r3, r2
 800147e:	d10e      	bne.n	800149e <pin_setup+0x3a>
 8001480:	2002      	movs	r0, #2
 8001482:	2401      	movs	r4, #1
 8001484:	2303      	movs	r3, #3
 8001486:	2201      	movs	r2, #1
 8001488:	2104      	movs	r1, #4
 800148a:	9102      	str	r1, [sp, #8]
 800148c:	9201      	str	r2, [sp, #4]
 800148e:	9300      	str	r3, [sp, #0]
 8001490:	4623      	mov	r3, r4
 8001492:	4602      	mov	r2, r0
 8001494:	2106      	movs	r1, #6
 8001496:	484e      	ldr	r0, [pc, #312]	@ (80015d0 <pin_setup+0x16c>)
 8001498:	f7ff ff90 	bl	80013bc <GPIO_Pin_Init>
 800149c:	e012      	b.n	80014c4 <pin_setup+0x60>
		else if(config->SCL_Pin == I2C1_SCL_Pin.PB8) GPIO_Pin_Init(GPIOB, 8, MODE.Alternate_Function, Output_Type.Open_Drain, Speed.Very_High_Speed, Pull.Pull_Up, Alternate_Functions.I2C_1);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	7a1b      	ldrb	r3, [r3, #8]
 80014a2:	221c      	movs	r2, #28
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d10d      	bne.n	80014c4 <pin_setup+0x60>
 80014a8:	2002      	movs	r0, #2
 80014aa:	2401      	movs	r4, #1
 80014ac:	2303      	movs	r3, #3
 80014ae:	2201      	movs	r2, #1
 80014b0:	2104      	movs	r1, #4
 80014b2:	9102      	str	r1, [sp, #8]
 80014b4:	9201      	str	r2, [sp, #4]
 80014b6:	9300      	str	r3, [sp, #0]
 80014b8:	4623      	mov	r3, r4
 80014ba:	4602      	mov	r2, r0
 80014bc:	2108      	movs	r1, #8
 80014be:	4844      	ldr	r0, [pc, #272]	@ (80015d0 <pin_setup+0x16c>)
 80014c0:	f7ff ff7c 	bl	80013bc <GPIO_Pin_Init>

		if(config->SDA_Pin == I2C1_SDA_Pin.PB7) GPIO_Pin_Init(GPIOB, 7, MODE.Alternate_Function, Output_Type.Open_Drain, Speed.Very_High_Speed, Pull.Pull_Up, Alternate_Functions.I2C_1);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	7a5b      	ldrb	r3, [r3, #9]
 80014c8:	221b      	movs	r2, #27
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d10e      	bne.n	80014ec <pin_setup+0x88>
 80014ce:	2002      	movs	r0, #2
 80014d0:	2401      	movs	r4, #1
 80014d2:	2303      	movs	r3, #3
 80014d4:	2201      	movs	r2, #1
 80014d6:	2104      	movs	r1, #4
 80014d8:	9102      	str	r1, [sp, #8]
 80014da:	9201      	str	r2, [sp, #4]
 80014dc:	9300      	str	r3, [sp, #0]
 80014de:	4623      	mov	r3, r4
 80014e0:	4602      	mov	r2, r0
 80014e2:	2107      	movs	r1, #7
 80014e4:	483a      	ldr	r0, [pc, #232]	@ (80015d0 <pin_setup+0x16c>)
 80014e6:	f7ff ff69 	bl	80013bc <GPIO_Pin_Init>
	else if(config->Port == I2C3)
	{
		if(config->SCL_Pin == I2C3_SCL_Pin.PA8) GPIO_Pin_Init(GPIOA, 8, MODE.Alternate_Function, Output_Type.Open_Drain, Speed.Very_High_Speed, Pull.Pull_Up, Alternate_Functions.I2C_3);
		if(config->SDA_Pin == I2C3_SDA_Pin.PC9) GPIO_Pin_Init(GPIOC, 9, MODE.Alternate_Function, Output_Type.Open_Drain, Speed.Very_High_Speed, Pull.Pull_Up, Alternate_Functions.I2C_3);
	}
}
 80014ea:	e06a      	b.n	80015c2 <pin_setup+0x15e>
		else if(config->SDA_Pin == I2C1_SDA_Pin.PB9) GPIO_Pin_Init(GPIOB, 9, MODE.Alternate_Function, Output_Type.Open_Drain, Speed.Very_High_Speed, Pull.Pull_Up, Alternate_Functions.I2C_1);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	7a5b      	ldrb	r3, [r3, #9]
 80014f0:	221d      	movs	r2, #29
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d165      	bne.n	80015c2 <pin_setup+0x15e>
 80014f6:	2002      	movs	r0, #2
 80014f8:	2401      	movs	r4, #1
 80014fa:	2303      	movs	r3, #3
 80014fc:	2201      	movs	r2, #1
 80014fe:	2104      	movs	r1, #4
 8001500:	9102      	str	r1, [sp, #8]
 8001502:	9201      	str	r2, [sp, #4]
 8001504:	9300      	str	r3, [sp, #0]
 8001506:	4623      	mov	r3, r4
 8001508:	4602      	mov	r2, r0
 800150a:	2109      	movs	r1, #9
 800150c:	4830      	ldr	r0, [pc, #192]	@ (80015d0 <pin_setup+0x16c>)
 800150e:	f7ff ff55 	bl	80013bc <GPIO_Pin_Init>
}
 8001512:	e056      	b.n	80015c2 <pin_setup+0x15e>
	else if(config->Port == I2C2)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a2e      	ldr	r2, [pc, #184]	@ (80015d4 <pin_setup+0x170>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d126      	bne.n	800156c <pin_setup+0x108>
		if(config->SCL_Pin == I2C2_SCL_Pin.PB10) GPIO_Pin_Init(GPIOB, 10, MODE.Alternate_Function, Output_Type.Open_Drain, Speed.Very_High_Speed, Pull.Pull_Up, Alternate_Functions.I2C_2);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	7a1b      	ldrb	r3, [r3, #8]
 8001522:	22d2      	movs	r2, #210	@ 0xd2
 8001524:	4293      	cmp	r3, r2
 8001526:	d10d      	bne.n	8001544 <pin_setup+0xe0>
 8001528:	2002      	movs	r0, #2
 800152a:	2401      	movs	r4, #1
 800152c:	2303      	movs	r3, #3
 800152e:	2201      	movs	r2, #1
 8001530:	2104      	movs	r1, #4
 8001532:	9102      	str	r1, [sp, #8]
 8001534:	9201      	str	r2, [sp, #4]
 8001536:	9300      	str	r3, [sp, #0]
 8001538:	4623      	mov	r3, r4
 800153a:	4602      	mov	r2, r0
 800153c:	210a      	movs	r1, #10
 800153e:	4824      	ldr	r0, [pc, #144]	@ (80015d0 <pin_setup+0x16c>)
 8001540:	f7ff ff3c 	bl	80013bc <GPIO_Pin_Init>
		if(config->SDA_Pin == I2C2_SDA_Pin.PB11) GPIO_Pin_Init(GPIOB, 11, MODE.Alternate_Function, Output_Type.Open_Drain, Speed.Very_High_Speed, Pull.Pull_Up, Alternate_Functions.I2C_2);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	7a5b      	ldrb	r3, [r3, #9]
 8001548:	22d3      	movs	r2, #211	@ 0xd3
 800154a:	4293      	cmp	r3, r2
 800154c:	d139      	bne.n	80015c2 <pin_setup+0x15e>
 800154e:	2002      	movs	r0, #2
 8001550:	2401      	movs	r4, #1
 8001552:	2303      	movs	r3, #3
 8001554:	2201      	movs	r2, #1
 8001556:	2104      	movs	r1, #4
 8001558:	9102      	str	r1, [sp, #8]
 800155a:	9201      	str	r2, [sp, #4]
 800155c:	9300      	str	r3, [sp, #0]
 800155e:	4623      	mov	r3, r4
 8001560:	4602      	mov	r2, r0
 8001562:	210b      	movs	r1, #11
 8001564:	481a      	ldr	r0, [pc, #104]	@ (80015d0 <pin_setup+0x16c>)
 8001566:	f7ff ff29 	bl	80013bc <GPIO_Pin_Init>
}
 800156a:	e02a      	b.n	80015c2 <pin_setup+0x15e>
	else if(config->Port == I2C3)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a19      	ldr	r2, [pc, #100]	@ (80015d8 <pin_setup+0x174>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d125      	bne.n	80015c2 <pin_setup+0x15e>
		if(config->SCL_Pin == I2C3_SCL_Pin.PA8) GPIO_Pin_Init(GPIOA, 8, MODE.Alternate_Function, Output_Type.Open_Drain, Speed.Very_High_Speed, Pull.Pull_Up, Alternate_Functions.I2C_3);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	7a1b      	ldrb	r3, [r3, #8]
 800157a:	2212      	movs	r2, #18
 800157c:	4293      	cmp	r3, r2
 800157e:	d10d      	bne.n	800159c <pin_setup+0x138>
 8001580:	2002      	movs	r0, #2
 8001582:	2401      	movs	r4, #1
 8001584:	2303      	movs	r3, #3
 8001586:	2201      	movs	r2, #1
 8001588:	2105      	movs	r1, #5
 800158a:	9102      	str	r1, [sp, #8]
 800158c:	9201      	str	r2, [sp, #4]
 800158e:	9300      	str	r3, [sp, #0]
 8001590:	4623      	mov	r3, r4
 8001592:	4602      	mov	r2, r0
 8001594:	2108      	movs	r1, #8
 8001596:	4811      	ldr	r0, [pc, #68]	@ (80015dc <pin_setup+0x178>)
 8001598:	f7ff ff10 	bl	80013bc <GPIO_Pin_Init>
		if(config->SDA_Pin == I2C3_SDA_Pin.PC9) GPIO_Pin_Init(GPIOC, 9, MODE.Alternate_Function, Output_Type.Open_Drain, Speed.Very_High_Speed, Pull.Pull_Up, Alternate_Functions.I2C_3);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	7a5b      	ldrb	r3, [r3, #9]
 80015a0:	2227      	movs	r2, #39	@ 0x27
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d10d      	bne.n	80015c2 <pin_setup+0x15e>
 80015a6:	2002      	movs	r0, #2
 80015a8:	2401      	movs	r4, #1
 80015aa:	2303      	movs	r3, #3
 80015ac:	2201      	movs	r2, #1
 80015ae:	2105      	movs	r1, #5
 80015b0:	9102      	str	r1, [sp, #8]
 80015b2:	9201      	str	r2, [sp, #4]
 80015b4:	9300      	str	r3, [sp, #0]
 80015b6:	4623      	mov	r3, r4
 80015b8:	4602      	mov	r2, r0
 80015ba:	2109      	movs	r1, #9
 80015bc:	4808      	ldr	r0, [pc, #32]	@ (80015e0 <pin_setup+0x17c>)
 80015be:	f7ff fefd 	bl	80013bc <GPIO_Pin_Init>
}
 80015c2:	bf00      	nop
 80015c4:	370c      	adds	r7, #12
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd90      	pop	{r4, r7, pc}
 80015ca:	bf00      	nop
 80015cc:	40005400 	.word	0x40005400
 80015d0:	40020400 	.word	0x40020400
 80015d4:	40005800 	.word	0x40005800
 80015d8:	40005c00 	.word	0x40005c00
 80015dc:	40020000 	.word	0x40020000
 80015e0:	40020800 	.word	0x40020800

080015e4 <I2C_Clock_Enable>:

void I2C_Clock_Enable(I2C_Config *config)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
	if(config->Port == I2C1)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a13      	ldr	r2, [pc, #76]	@ (8001640 <I2C_Clock_Enable+0x5c>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d106      	bne.n	8001604 <I2C_Clock_Enable+0x20>
	{
		RCC -> APB1ENR |= RCC_APB1ENR_I2C1EN;
 80015f6:	4b13      	ldr	r3, [pc, #76]	@ (8001644 <I2C_Clock_Enable+0x60>)
 80015f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015fa:	4a12      	ldr	r2, [pc, #72]	@ (8001644 <I2C_Clock_Enable+0x60>)
 80015fc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001600:	6413      	str	r3, [r2, #64]	@ 0x40
	}
	else if(config->Port == I2C3)
	{
		RCC -> APB1ENR |= RCC_APB1ENR_I2C3EN;
	}
}
 8001602:	e016      	b.n	8001632 <I2C_Clock_Enable+0x4e>
	else if(config->Port == I2C2)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a0f      	ldr	r2, [pc, #60]	@ (8001648 <I2C_Clock_Enable+0x64>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d106      	bne.n	800161c <I2C_Clock_Enable+0x38>
		RCC -> APB1ENR |= RCC_APB1ENR_I2C2EN;
 800160e:	4b0d      	ldr	r3, [pc, #52]	@ (8001644 <I2C_Clock_Enable+0x60>)
 8001610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001612:	4a0c      	ldr	r2, [pc, #48]	@ (8001644 <I2C_Clock_Enable+0x60>)
 8001614:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001618:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800161a:	e00a      	b.n	8001632 <I2C_Clock_Enable+0x4e>
	else if(config->Port == I2C3)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a0a      	ldr	r2, [pc, #40]	@ (800164c <I2C_Clock_Enable+0x68>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d105      	bne.n	8001632 <I2C_Clock_Enable+0x4e>
		RCC -> APB1ENR |= RCC_APB1ENR_I2C3EN;
 8001626:	4b07      	ldr	r3, [pc, #28]	@ (8001644 <I2C_Clock_Enable+0x60>)
 8001628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800162a:	4a06      	ldr	r2, [pc, #24]	@ (8001644 <I2C_Clock_Enable+0x60>)
 800162c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001630:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001632:	bf00      	nop
 8001634:	370c      	adds	r7, #12
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	40005400 	.word	0x40005400
 8001644:	40023800 	.word	0x40023800
 8001648:	40005800 	.word	0x40005800
 800164c:	40005c00 	.word	0x40005c00

08001650 <I2C_Reset>:
		RCC -> APB1ENR &= ~RCC_APB1ENR_I2C3EN;
	}
}

void I2C_Reset(I2C_Config *config)
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
	config->speed = 100000;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	4a18      	ldr	r2, [pc, #96]	@ (80016bc <I2C_Reset+0x6c>)
 800165c:	605a      	str	r2, [r3, #4]
	config->interrupts = I2C_Interrupts.Disable;
 800165e:	2200      	movs	r2, #0
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	819a      	strh	r2, [r3, #12]
	config->mode = I2C_Mode.Master;
 8001664:	2200      	movs	r2, #0
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	729a      	strb	r2, [r3, #10]
	if(config->Port == I2C1)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a14      	ldr	r2, [pc, #80]	@ (80016c0 <I2C_Reset+0x70>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d106      	bne.n	8001682 <I2C_Reset+0x32>
	{
		RCC -> APB1RSTR |= RCC_APB1RSTR_I2C1RST;
 8001674:	4b13      	ldr	r3, [pc, #76]	@ (80016c4 <I2C_Reset+0x74>)
 8001676:	6a1b      	ldr	r3, [r3, #32]
 8001678:	4a12      	ldr	r2, [pc, #72]	@ (80016c4 <I2C_Reset+0x74>)
 800167a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800167e:	6213      	str	r3, [r2, #32]
	}
	else if(config->Port == I2C3)
	{
		RCC -> APB1RSTR |= RCC_APB1RSTR_I2C3RST;
	}
}
 8001680:	e016      	b.n	80016b0 <I2C_Reset+0x60>
	else if(config->Port == I2C2)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a10      	ldr	r2, [pc, #64]	@ (80016c8 <I2C_Reset+0x78>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d106      	bne.n	800169a <I2C_Reset+0x4a>
		RCC -> APB1RSTR |= RCC_APB1RSTR_I2C2RST;
 800168c:	4b0d      	ldr	r3, [pc, #52]	@ (80016c4 <I2C_Reset+0x74>)
 800168e:	6a1b      	ldr	r3, [r3, #32]
 8001690:	4a0c      	ldr	r2, [pc, #48]	@ (80016c4 <I2C_Reset+0x74>)
 8001692:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001696:	6213      	str	r3, [r2, #32]
}
 8001698:	e00a      	b.n	80016b0 <I2C_Reset+0x60>
	else if(config->Port == I2C3)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a0b      	ldr	r2, [pc, #44]	@ (80016cc <I2C_Reset+0x7c>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d105      	bne.n	80016b0 <I2C_Reset+0x60>
		RCC -> APB1RSTR |= RCC_APB1RSTR_I2C3RST;
 80016a4:	4b07      	ldr	r3, [pc, #28]	@ (80016c4 <I2C_Reset+0x74>)
 80016a6:	6a1b      	ldr	r3, [r3, #32]
 80016a8:	4a06      	ldr	r2, [pc, #24]	@ (80016c4 <I2C_Reset+0x74>)
 80016aa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80016ae:	6213      	str	r3, [r2, #32]
}
 80016b0:	bf00      	nop
 80016b2:	370c      	adds	r7, #12
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr
 80016bc:	000186a0 	.word	0x000186a0
 80016c0:	40005400 	.word	0x40005400
 80016c4:	40023800 	.word	0x40023800
 80016c8:	40005800 	.word	0x40005800
 80016cc:	40005c00 	.word	0x40005c00

080016d0 <I2C_Init>:


void I2C_Init(I2C_Config *config)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
	pin_setup(config);
 80016d8:	6878      	ldr	r0, [r7, #4]
 80016da:	f7ff fec3 	bl	8001464 <pin_setup>
	I2C_Clock_Enable(config);
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	f7ff ff80 	bl	80015e4 <I2C_Clock_Enable>

	config->Port -> CR1 &= ~I2C_CR1_PE;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f022 0201 	bic.w	r2, r2, #1
 80016f2:	601a      	str	r2, [r3, #0]
	config->Port -> CR1 |= I2C_CR1_SWRST | I2C_CR1_NOSTRETCH;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	687a      	ldr	r2, [r7, #4]
 80016fc:	6812      	ldr	r2, [r2, #0]
 80016fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001702:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001706:	6013      	str	r3, [r2, #0]
	config->Port -> CR1 &= ~I2C_CR1_SWRST;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001716:	601a      	str	r2, [r3, #0]
	config->Port -> CR2 |= config->dma << I2C_CR2_DMAEN_Pos;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	6859      	ldr	r1, [r3, #4]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	89db      	ldrh	r3, [r3, #14]
 8001722:	02da      	lsls	r2, r3, #11
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	430a      	orrs	r2, r1
 800172a:	605a      	str	r2, [r3, #4]
	config->Port -> CR2 |= config->interrupts << I2C_CR2_ITERREN_Pos;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	6859      	ldr	r1, [r3, #4]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	899b      	ldrh	r3, [r3, #12]
 8001736:	021a      	lsls	r2, r3, #8
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	430a      	orrs	r2, r1
 800173e:	605a      	str	r2, [r3, #4]


	//CCR ==> [Tr + Tw]/(1/48000000)
	//TRISE ==> [Tr/(1/48000000)]

	if(config->speed == 400000)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	4a50      	ldr	r2, [pc, #320]	@ (8001888 <I2C_Init+0x1b8>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d111      	bne.n	800176e <I2C_Init+0x9e>
	{
		config->Port -> CR2 |= 30; //42MHz
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	685a      	ldr	r2, [r3, #4]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f042 021e 	orr.w	r2, r2, #30
 8001758:	605a      	str	r2, [r3, #4]
		config->Port -> CCR = (1<<15) | (1<<14) | 5;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f24c 0205 	movw	r2, #49157	@ 0xc005
 8001762:	61da      	str	r2, [r3, #28]
		config->Port -> TRISE = 30;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	221e      	movs	r2, #30
 800176a:	621a      	str	r2, [r3, #32]
 800176c:	e00b      	b.n	8001786 <I2C_Init+0xb6>
	}
	else
	{
		config-> Port  -> CR2 = 25;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	2219      	movs	r2, #25
 8001774:	605a      	str	r2, [r3, #4]
		config->Port  -> CCR = 0x28;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	2228      	movs	r2, #40	@ 0x28
 800177c:	61da      	str	r2, [r3, #28]
		config->Port  -> TRISE = 0x8;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	2208      	movs	r2, #8
 8001784:	621a      	str	r2, [r3, #32]
	}



	if(config->dma == I2C_DMA.Enable)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	89db      	ldrh	r3, [r3, #14]
 800178a:	2201      	movs	r2, #1
 800178c:	4293      	cmp	r3, r2
 800178e:	d166      	bne.n	800185e <I2C_Init+0x18e>
	{
		if(config->Port == I2C1)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a3d      	ldr	r2, [pc, #244]	@ (800188c <I2C_Init+0x1bc>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d10c      	bne.n	80017b4 <I2C_Init+0xe4>
		{
			xI2C_TX.channel = I2C_DMA_Stream.I2C1_DMA_Channel;
 800179a:	2201      	movs	r2, #1
 800179c:	4b3c      	ldr	r3, [pc, #240]	@ (8001890 <I2C_Init+0x1c0>)
 800179e:	609a      	str	r2, [r3, #8]
			xI2C_RX.channel = I2C_DMA_Stream.I2C1_DMA_Channel;
 80017a0:	2201      	movs	r2, #1
 80017a2:	4b3c      	ldr	r3, [pc, #240]	@ (8001894 <I2C_Init+0x1c4>)
 80017a4:	609a      	str	r2, [r3, #8]
			xI2C_TX.stream = I2C_DMA_Stream.I2C1_TX;
 80017a6:	4a3c      	ldr	r2, [pc, #240]	@ (8001898 <I2C_Init+0x1c8>)
 80017a8:	4b39      	ldr	r3, [pc, #228]	@ (8001890 <I2C_Init+0x1c0>)
 80017aa:	605a      	str	r2, [r3, #4]
			xI2C_RX.stream = I2C_DMA_Stream.I2C1_RX;
 80017ac:	4a3b      	ldr	r2, [pc, #236]	@ (800189c <I2C_Init+0x1cc>)
 80017ae:	4b39      	ldr	r3, [pc, #228]	@ (8001894 <I2C_Init+0x1c4>)
 80017b0:	605a      	str	r2, [r3, #4]
 80017b2:	e022      	b.n	80017fa <I2C_Init+0x12a>
		}
		else if(config->Port == I2C2)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a39      	ldr	r2, [pc, #228]	@ (80018a0 <I2C_Init+0x1d0>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d10c      	bne.n	80017d8 <I2C_Init+0x108>
		{
			xI2C_RX.channel = I2C_DMA_Stream.I2C2_DMA_Channel;
 80017be:	2202      	movs	r2, #2
 80017c0:	4b34      	ldr	r3, [pc, #208]	@ (8001894 <I2C_Init+0x1c4>)
 80017c2:	609a      	str	r2, [r3, #8]
			xI2C_TX.channel = I2C_DMA_Stream.I2C2_DMA_Channel;
 80017c4:	2202      	movs	r2, #2
 80017c6:	4b32      	ldr	r3, [pc, #200]	@ (8001890 <I2C_Init+0x1c0>)
 80017c8:	609a      	str	r2, [r3, #8]
			xI2C_TX.stream = I2C_DMA_Stream.I2C2_TX;
 80017ca:	4a36      	ldr	r2, [pc, #216]	@ (80018a4 <I2C_Init+0x1d4>)
 80017cc:	4b30      	ldr	r3, [pc, #192]	@ (8001890 <I2C_Init+0x1c0>)
 80017ce:	605a      	str	r2, [r3, #4]
			xI2C_RX.stream = I2C_DMA_Stream.I2C2_RX;
 80017d0:	4a35      	ldr	r2, [pc, #212]	@ (80018a8 <I2C_Init+0x1d8>)
 80017d2:	4b30      	ldr	r3, [pc, #192]	@ (8001894 <I2C_Init+0x1c4>)
 80017d4:	605a      	str	r2, [r3, #4]
 80017d6:	e010      	b.n	80017fa <I2C_Init+0x12a>
		}
		else if(config->Port == I2C3)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a33      	ldr	r2, [pc, #204]	@ (80018ac <I2C_Init+0x1dc>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d10b      	bne.n	80017fa <I2C_Init+0x12a>
		{
			xI2C_RX.channel = I2C_DMA_Stream.I2C3_DMA_Channel;
 80017e2:	2203      	movs	r2, #3
 80017e4:	4b2b      	ldr	r3, [pc, #172]	@ (8001894 <I2C_Init+0x1c4>)
 80017e6:	609a      	str	r2, [r3, #8]
			xI2C_TX.channel = I2C_DMA_Stream.I2C3_DMA_Channel;
 80017e8:	2203      	movs	r2, #3
 80017ea:	4b29      	ldr	r3, [pc, #164]	@ (8001890 <I2C_Init+0x1c0>)
 80017ec:	609a      	str	r2, [r3, #8]
			xI2C_TX.stream = I2C_DMA_Stream.I2C3_TX;
 80017ee:	4a30      	ldr	r2, [pc, #192]	@ (80018b0 <I2C_Init+0x1e0>)
 80017f0:	4b27      	ldr	r3, [pc, #156]	@ (8001890 <I2C_Init+0x1c0>)
 80017f2:	605a      	str	r2, [r3, #4]
			xI2C_RX.stream = I2C_DMA_Stream.I2C3_RX;
 80017f4:	4a2c      	ldr	r2, [pc, #176]	@ (80018a8 <I2C_Init+0x1d8>)
 80017f6:	4b27      	ldr	r3, [pc, #156]	@ (8001894 <I2C_Init+0x1c4>)
 80017f8:	605a      	str	r2, [r3, #4]
		}

		xI2C_TX.controller = DMA1;
 80017fa:	4b25      	ldr	r3, [pc, #148]	@ (8001890 <I2C_Init+0x1c0>)
 80017fc:	4a2d      	ldr	r2, [pc, #180]	@ (80018b4 <I2C_Init+0x1e4>)
 80017fe:	601a      	str	r2, [r3, #0]

		xI2C_TX.circular_mode = DMA_Circular_Mode.Disable;
 8001800:	2200      	movs	r2, #0
 8001802:	4b23      	ldr	r3, [pc, #140]	@ (8001890 <I2C_Init+0x1c0>)
 8001804:	621a      	str	r2, [r3, #32]
		xI2C_TX.flow_control = DMA_Flow_Control.DMA_Control;
 8001806:	2200      	movs	r2, #0
 8001808:	4b21      	ldr	r3, [pc, #132]	@ (8001890 <I2C_Init+0x1c0>)
 800180a:	60da      	str	r2, [r3, #12]
		xI2C_TX.interrupts = DMA_Interrupts.Disable;
 800180c:	2200      	movs	r2, #0
 800180e:	4b20      	ldr	r3, [pc, #128]	@ (8001890 <I2C_Init+0x1c0>)
 8001810:	625a      	str	r2, [r3, #36]	@ 0x24
		xI2C_TX.memory_data_size = DMA_Memory_Data_Size.byte;
 8001812:	2200      	movs	r2, #0
 8001814:	4b1e      	ldr	r3, [pc, #120]	@ (8001890 <I2C_Init+0x1c0>)
 8001816:	61da      	str	r2, [r3, #28]
		xI2C_TX.peripheral_data_size = DMA_Peripheral_Data_Size.byte;
 8001818:	2200      	movs	r2, #0
 800181a:	4b1d      	ldr	r3, [pc, #116]	@ (8001890 <I2C_Init+0x1c0>)
 800181c:	619a      	str	r2, [r3, #24]
		xI2C_TX.priority_level = DMA_Priority_Level.Very_high;
 800181e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001822:	4b1b      	ldr	r3, [pc, #108]	@ (8001890 <I2C_Init+0x1c0>)
 8001824:	615a      	str	r2, [r3, #20]
		xI2C_TX.transfer_direction = DMA_Transfer_Direction.Memory_to_peripheral;
 8001826:	2240      	movs	r2, #64	@ 0x40
 8001828:	4b19      	ldr	r3, [pc, #100]	@ (8001890 <I2C_Init+0x1c0>)
 800182a:	611a      	str	r2, [r3, #16]

		xI2C_RX.controller = DMA1;
 800182c:	4b19      	ldr	r3, [pc, #100]	@ (8001894 <I2C_Init+0x1c4>)
 800182e:	4a21      	ldr	r2, [pc, #132]	@ (80018b4 <I2C_Init+0x1e4>)
 8001830:	601a      	str	r2, [r3, #0]
		xI2C_RX.circular_mode = DMA_Circular_Mode.Disable;
 8001832:	2200      	movs	r2, #0
 8001834:	4b17      	ldr	r3, [pc, #92]	@ (8001894 <I2C_Init+0x1c4>)
 8001836:	621a      	str	r2, [r3, #32]
		xI2C_RX.flow_control = DMA_Flow_Control.DMA_Control;
 8001838:	2200      	movs	r2, #0
 800183a:	4b16      	ldr	r3, [pc, #88]	@ (8001894 <I2C_Init+0x1c4>)
 800183c:	60da      	str	r2, [r3, #12]
		xI2C_RX.interrupts = DMA_Interrupts.Disable;
 800183e:	2200      	movs	r2, #0
 8001840:	4b14      	ldr	r3, [pc, #80]	@ (8001894 <I2C_Init+0x1c4>)
 8001842:	625a      	str	r2, [r3, #36]	@ 0x24
		xI2C_RX.memory_data_size = DMA_Memory_Data_Size.byte;
 8001844:	2200      	movs	r2, #0
 8001846:	4b13      	ldr	r3, [pc, #76]	@ (8001894 <I2C_Init+0x1c4>)
 8001848:	61da      	str	r2, [r3, #28]
		xI2C_RX.peripheral_data_size = DMA_Peripheral_Data_Size.byte;
 800184a:	2200      	movs	r2, #0
 800184c:	4b11      	ldr	r3, [pc, #68]	@ (8001894 <I2C_Init+0x1c4>)
 800184e:	619a      	str	r2, [r3, #24]
		xI2C_RX.priority_level = DMA_Priority_Level.Very_high;
 8001850:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001854:	4b0f      	ldr	r3, [pc, #60]	@ (8001894 <I2C_Init+0x1c4>)
 8001856:	615a      	str	r2, [r3, #20]
		xI2C_RX.transfer_direction = DMA_Transfer_Direction.Peripheral_to_memory;
 8001858:	2200      	movs	r2, #0
 800185a:	4b0e      	ldr	r3, [pc, #56]	@ (8001894 <I2C_Init+0x1c4>)
 800185c:	611a      	str	r2, [r3, #16]
	}

	config -> Port -> CR1 |= I2C_CR1_NOSTRETCH;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800186c:	601a      	str	r2, [r3, #0]
	config -> Port -> CR1 |= I2C_CR1_PE;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f042 0201 	orr.w	r2, r2, #1
 800187c:	601a      	str	r2, [r3, #0]
}
 800187e:	bf00      	nop
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	00061a80 	.word	0x00061a80
 800188c:	40005400 	.word	0x40005400
 8001890:	20000210 	.word	0x20000210
 8001894:	20000244 	.word	0x20000244
 8001898:	400260a0 	.word	0x400260a0
 800189c:	40026088 	.word	0x40026088
 80018a0:	40005800 	.word	0x40005800
 80018a4:	400260b8 	.word	0x400260b8
 80018a8:	40026040 	.word	0x40026040
 80018ac:	40005c00 	.word	0x40005c00
 80018b0:	40026070 	.word	0x40026070
 80018b4:	40026000 	.word	0x40026000

080018b8 <I2C_Master_Start>:

void I2C_Master_Start(I2C_Config *config)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b085      	sub	sp, #20
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
	int time_out = 1000;
 80018c0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018c4:	60fb      	str	r3, [r7, #12]
	config -> Port -> CR1 |= I2C_CR1_START;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80018d4:	601a      	str	r2, [r3, #0]
	config -> Port -> CR1 |= I2C_CR1_START;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80018e4:	601a      	str	r2, [r3, #0]
	while( !(config -> Port -> SR1 & I2C_SR1_SB))
 80018e6:	e005      	b.n	80018f4 <I2C_Master_Start+0x3c>
	{
		if(time_out == 0)
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d00a      	beq.n	8001904 <I2C_Master_Start+0x4c>
		{
			return -1;
		}
		time_out--;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	3b01      	subs	r3, #1
 80018f2:	60fb      	str	r3, [r7, #12]
	while( !(config -> Port -> SR1 & I2C_SR1_SB))
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	695b      	ldr	r3, [r3, #20]
 80018fa:	f003 0301 	and.w	r3, r3, #1
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d0f2      	beq.n	80018e8 <I2C_Master_Start+0x30>
	}
	return 0;
 8001902:	e000      	b.n	8001906 <I2C_Master_Start+0x4e>
			return -1;
 8001904:	bf00      	nop
}
 8001906:	3714      	adds	r7, #20
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr

08001910 <I2C_Master_Address>:

void I2C_Master_Address(I2C_Config *config, uint8_t address, uint8_t read_write)
{
 8001910:	b480      	push	{r7}
 8001912:	b085      	sub	sp, #20
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	460b      	mov	r3, r1
 800191a:	70fb      	strb	r3, [r7, #3]
 800191c:	4613      	mov	r3, r2
 800191e:	70bb      	strb	r3, [r7, #2]
	volatile int temp;
	config -> Port -> DR = address << 1  | read_write;
 8001920:	78fb      	ldrb	r3, [r7, #3]
 8001922:	005a      	lsls	r2, r3, #1
 8001924:	78bb      	ldrb	r3, [r7, #2]
 8001926:	431a      	orrs	r2, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	611a      	str	r2, [r3, #16]
	while((config -> Port -> SR1 & 2) == 0){}
 800192e:	bf00      	nop
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	695b      	ldr	r3, [r3, #20]
 8001936:	f003 0302 	and.w	r3, r3, #2
 800193a:	2b00      	cmp	r3, #0
 800193c:	d0f8      	beq.n	8001930 <I2C_Master_Address+0x20>
	while((config -> Port -> SR1 & 2))
 800193e:	e00e      	b.n	800195e <I2C_Master_Address+0x4e>
	{
		temp = config -> Port -> SR1;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	695b      	ldr	r3, [r3, #20]
 8001946:	60fb      	str	r3, [r7, #12]
		temp = config -> Port -> SR2;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	699b      	ldr	r3, [r3, #24]
 800194e:	60fb      	str	r3, [r7, #12]
		if((config -> Port -> SR1 & 2) == 0)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	695b      	ldr	r3, [r3, #20]
 8001956:	f003 0302 	and.w	r3, r3, #2
 800195a:	2b00      	cmp	r3, #0
 800195c:	d007      	beq.n	800196e <I2C_Master_Address+0x5e>
	while((config -> Port -> SR1 & 2))
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	695b      	ldr	r3, [r3, #20]
 8001964:	f003 0302 	and.w	r3, r3, #2
 8001968:	2b00      	cmp	r3, #0
 800196a:	d1e9      	bne.n	8001940 <I2C_Master_Address+0x30>
		{
			break;
		}
	}
}
 800196c:	e000      	b.n	8001970 <I2C_Master_Address+0x60>
			break;
 800196e:	bf00      	nop
}
 8001970:	bf00      	nop
 8001972:	3714      	adds	r7, #20
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <I2C_Master_Send_Byte>:

void I2C_Master_Send_Byte(I2C_Config *config, uint8_t data)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	460b      	mov	r3, r1
 8001986:	70fb      	strb	r3, [r7, #3]
	while((config -> Port-> SR1 & 0x80) == 0){}
 8001988:	bf00      	nop
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	695b      	ldr	r3, [r3, #20]
 8001990:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001994:	2b00      	cmp	r3, #0
 8001996:	d0f8      	beq.n	800198a <I2C_Master_Send_Byte+0xe>
	config -> Port -> DR = data;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	78fa      	ldrb	r2, [r7, #3]
 800199e:	611a      	str	r2, [r3, #16]
	while((config -> Port -> SR1 & 0x80) == 0){}
 80019a0:	bf00      	nop
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	695b      	ldr	r3, [r3, #20]
 80019a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d0f8      	beq.n	80019a2 <I2C_Master_Send_Byte+0x26>
}
 80019b0:	bf00      	nop
 80019b2:	bf00      	nop
 80019b4:	370c      	adds	r7, #12
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr

080019be <I2C_Master_Stop>:
{
	config -> Port -> CR1 |= I2C_CR1_ACK;
}

void I2C_Master_Stop(I2C_Config *config)
{
 80019be:	b480      	push	{r7}
 80019c0:	b083      	sub	sp, #12
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	6078      	str	r0, [r7, #4]
	config -> Port -> CR1 |= I2C_CR1_STOP;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80019d4:	601a      	str	r2, [r3, #0]
}
 80019d6:	bf00      	nop
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr

080019e2 <I2C_Master_Write_Register>:

void I2C_Master_Write_Register(I2C_Config *config, uint8_t device_address, uint8_t reg_address, uint8_t data)
{
 80019e2:	b580      	push	{r7, lr}
 80019e4:	b082      	sub	sp, #8
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	6078      	str	r0, [r7, #4]
 80019ea:	4608      	mov	r0, r1
 80019ec:	4611      	mov	r1, r2
 80019ee:	461a      	mov	r2, r3
 80019f0:	4603      	mov	r3, r0
 80019f2:	70fb      	strb	r3, [r7, #3]
 80019f4:	460b      	mov	r3, r1
 80019f6:	70bb      	strb	r3, [r7, #2]
 80019f8:	4613      	mov	r3, r2
 80019fa:	707b      	strb	r3, [r7, #1]
	I2C_Master_Start(config);
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f7ff ff5b 	bl	80018b8 <I2C_Master_Start>
	I2C_Master_Address(config, device_address,0);
 8001a02:	78fb      	ldrb	r3, [r7, #3]
 8001a04:	2200      	movs	r2, #0
 8001a06:	4619      	mov	r1, r3
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f7ff ff81 	bl	8001910 <I2C_Master_Address>
	I2C_Master_Send_Byte(config, reg_address);
 8001a0e:	78bb      	ldrb	r3, [r7, #2]
 8001a10:	4619      	mov	r1, r3
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f7ff ffb2 	bl	800197c <I2C_Master_Send_Byte>
	I2C_Master_Send_Byte(config, data);
 8001a18:	787b      	ldrb	r3, [r7, #1]
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f7ff ffad 	bl	800197c <I2C_Master_Send_Byte>
	I2C_Master_Stop(config);
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f7ff ffcb 	bl	80019be <I2C_Master_Stop>
}
 8001a28:	bf00      	nop
 8001a2a:	3708      	adds	r7, #8
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}

08001a30 <I2C_Master_Read_Register>:

int I2C_Master_Read_Register(I2C_Config *config, uint8_t device_address, uint8_t reg_address)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	460b      	mov	r3, r1
 8001a3a:	70fb      	strb	r3, [r7, #3]
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	70bb      	strb	r3, [r7, #2]
	volatile int temp;
	I2C_Master_Start(config);
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f7ff ff39 	bl	80018b8 <I2C_Master_Start>
	I2C_Master_Address(config, device_address, 0);
 8001a46:	78fb      	ldrb	r3, [r7, #3]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f7ff ff5f 	bl	8001910 <I2C_Master_Address>
	I2C_Master_Send_Byte(config, reg_address);
 8001a52:	78bb      	ldrb	r3, [r7, #2]
 8001a54:	4619      	mov	r1, r3
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f7ff ff90 	bl	800197c <I2C_Master_Send_Byte>
	I2C_Master_Stop(config);
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f7ff ffae 	bl	80019be <I2C_Master_Stop>
	I2C_Master_Start(config);
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f7ff ff28 	bl	80018b8 <I2C_Master_Start>
	I2C_Master_Address(config, device_address, 1);
 8001a68:	78fb      	ldrb	r3, [r7, #3]
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f7ff ff4e 	bl	8001910 <I2C_Master_Address>
	temp = I2C_Master_Receive_Byte(config);
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	f000 f80a 	bl	8001a8e <I2C_Master_Receive_Byte>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	60fb      	str	r3, [r7, #12]
	I2C_Master_Stop(config);
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f7ff ff9d 	bl	80019be <I2C_Master_Stop>
	return temp;
 8001a84:	68fb      	ldr	r3, [r7, #12]
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3710      	adds	r7, #16
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}

08001a8e <I2C_Master_Receive_Byte>:

int I2C_Master_Receive_Byte(I2C_Config *config)
{
 8001a8e:	b480      	push	{r7}
 8001a90:	b085      	sub	sp, #20
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	6078      	str	r0, [r7, #4]
	volatile int temp;
	config -> Port -> CR1 |= I2C_CR1_ACK;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001aa4:	601a      	str	r2, [r3, #0]
	while((config -> Port -> SR1 & I2C_SR1_RXNE) == 0){}
 8001aa6:	bf00      	nop
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	695b      	ldr	r3, [r3, #20]
 8001aae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d0f8      	beq.n	8001aa8 <I2C_Master_Receive_Byte+0x1a>
	temp = config -> Port -> DR;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	691b      	ldr	r3, [r3, #16]
 8001abc:	60fb      	str	r3, [r7, #12]
	config -> Port -> CR1 &= ~I2C_CR1_ACK;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001acc:	601a      	str	r2, [r3, #0]
	return temp;
 8001ace:	68fb      	ldr	r3, [r7, #12]
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3714      	adds	r7, #20
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <__NVIC_SetPriority>:
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	6039      	str	r1, [r7, #0]
 8001ae6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ae8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	db0a      	blt.n	8001b06 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	b2da      	uxtb	r2, r3
 8001af4:	490c      	ldr	r1, [pc, #48]	@ (8001b28 <__NVIC_SetPriority+0x4c>)
 8001af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001afa:	0112      	lsls	r2, r2, #4
 8001afc:	b2d2      	uxtb	r2, r2
 8001afe:	440b      	add	r3, r1
 8001b00:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001b04:	e00a      	b.n	8001b1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	b2da      	uxtb	r2, r3
 8001b0a:	4908      	ldr	r1, [pc, #32]	@ (8001b2c <__NVIC_SetPriority+0x50>)
 8001b0c:	79fb      	ldrb	r3, [r7, #7]
 8001b0e:	f003 030f 	and.w	r3, r3, #15
 8001b12:	3b04      	subs	r3, #4
 8001b14:	0112      	lsls	r2, r2, #4
 8001b16:	b2d2      	uxtb	r2, r2
 8001b18:	440b      	add	r3, r1
 8001b1a:	761a      	strb	r2, [r3, #24]
}
 8001b1c:	bf00      	nop
 8001b1e:	370c      	adds	r7, #12
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr
 8001b28:	e000e100 	.word	0xe000e100
 8001b2c:	e000ed00 	.word	0xe000ed00

08001b30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	3b01      	subs	r3, #1
 8001b3c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b40:	d301      	bcc.n	8001b46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b42:	2301      	movs	r3, #1
 8001b44:	e00f      	b.n	8001b66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b46:	4a0a      	ldr	r2, [pc, #40]	@ (8001b70 <SysTick_Config+0x40>)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	3b01      	subs	r3, #1
 8001b4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b4e:	210f      	movs	r1, #15
 8001b50:	f04f 30ff 	mov.w	r0, #4294967295
 8001b54:	f7ff ffc2 	bl	8001adc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b58:	4b05      	ldr	r3, [pc, #20]	@ (8001b70 <SysTick_Config+0x40>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b5e:	4b04      	ldr	r3, [pc, #16]	@ (8001b70 <SysTick_Config+0x40>)
 8001b60:	2207      	movs	r2, #7
 8001b62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b64:	2300      	movs	r3, #0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	e000e010 	.word	0xe000e010

08001b74 <MCU_Clock_Setup>:
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
	uint8_t pll_m = 4;
 8001b7a:	2304      	movs	r3, #4
 8001b7c:	71fb      	strb	r3, [r7, #7]
	uint8_t pll_n = 168; //192
 8001b7e:	23a8      	movs	r3, #168	@ 0xa8
 8001b80:	71bb      	strb	r3, [r7, #6]
	uint8_t pll_p = 0;
 8001b82:	2300      	movs	r3, #0
 8001b84:	717b      	strb	r3, [r7, #5]
	uint8_t pll_q = 7;
 8001b86:	2307      	movs	r3, #7
 8001b88:	713b      	strb	r3, [r7, #4]
	RCC->PLLCFGR = 0x00000000;
 8001b8a:	4b3d      	ldr	r3, [pc, #244]	@ (8001c80 <MCU_Clock_Setup+0x10c>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	605a      	str	r2, [r3, #4]
	RCC -> CR |= RCC_CR_HSEON;
 8001b90:	4b3b      	ldr	r3, [pc, #236]	@ (8001c80 <MCU_Clock_Setup+0x10c>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a3a      	ldr	r2, [pc, #232]	@ (8001c80 <MCU_Clock_Setup+0x10c>)
 8001b96:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b9a:	6013      	str	r3, [r2, #0]
	while(!(RCC -> CR & RCC_CR_HSERDY)){}
 8001b9c:	bf00      	nop
 8001b9e:	4b38      	ldr	r3, [pc, #224]	@ (8001c80 <MCU_Clock_Setup+0x10c>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d0f9      	beq.n	8001b9e <MCU_Clock_Setup+0x2a>
	RCC -> APB1ENR |= RCC_APB1ENR_PWREN;
 8001baa:	4b35      	ldr	r3, [pc, #212]	@ (8001c80 <MCU_Clock_Setup+0x10c>)
 8001bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bae:	4a34      	ldr	r2, [pc, #208]	@ (8001c80 <MCU_Clock_Setup+0x10c>)
 8001bb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bb4:	6413      	str	r3, [r2, #64]	@ 0x40
	PWR ->CR |= PWR_CR_VOS;
 8001bb6:	4b33      	ldr	r3, [pc, #204]	@ (8001c84 <MCU_Clock_Setup+0x110>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a32      	ldr	r2, [pc, #200]	@ (8001c84 <MCU_Clock_Setup+0x110>)
 8001bbc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bc0:	6013      	str	r3, [r2, #0]
	FLASH -> ACR |= FLASH_ACR_ICEN | FLASH_ACR_PRFTEN | FLASH_ACR_DCEN | FLASH_ACR_LATENCY_5WS;
 8001bc2:	4b31      	ldr	r3, [pc, #196]	@ (8001c88 <MCU_Clock_Setup+0x114>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a30      	ldr	r2, [pc, #192]	@ (8001c88 <MCU_Clock_Setup+0x114>)
 8001bc8:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001bcc:	f043 0305 	orr.w	r3, r3, #5
 8001bd0:	6013      	str	r3, [r2, #0]
	RCC->PLLCFGR |= (pll_q << 24) | (pll_p << 16) | (pll_n << 6) | (pll_m << 0);
 8001bd2:	4b2b      	ldr	r3, [pc, #172]	@ (8001c80 <MCU_Clock_Setup+0x10c>)
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	793a      	ldrb	r2, [r7, #4]
 8001bd8:	0611      	lsls	r1, r2, #24
 8001bda:	797a      	ldrb	r2, [r7, #5]
 8001bdc:	0412      	lsls	r2, r2, #16
 8001bde:	4311      	orrs	r1, r2
 8001be0:	79ba      	ldrb	r2, [r7, #6]
 8001be2:	0192      	lsls	r2, r2, #6
 8001be4:	4311      	orrs	r1, r2
 8001be6:	79fa      	ldrb	r2, [r7, #7]
 8001be8:	430a      	orrs	r2, r1
 8001bea:	4611      	mov	r1, r2
 8001bec:	4a24      	ldr	r2, [pc, #144]	@ (8001c80 <MCU_Clock_Setup+0x10c>)
 8001bee:	430b      	orrs	r3, r1
 8001bf0:	6053      	str	r3, [r2, #4]
	RCC ->PLLCFGR |= 1 << 22;
 8001bf2:	4b23      	ldr	r3, [pc, #140]	@ (8001c80 <MCU_Clock_Setup+0x10c>)
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	4a22      	ldr	r2, [pc, #136]	@ (8001c80 <MCU_Clock_Setup+0x10c>)
 8001bf8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001bfc:	6053      	str	r3, [r2, #4]
	RCC -> CFGR |= RCC_CFGR_HPRE_DIV1;
 8001bfe:	4b20      	ldr	r3, [pc, #128]	@ (8001c80 <MCU_Clock_Setup+0x10c>)
 8001c00:	4a1f      	ldr	r2, [pc, #124]	@ (8001c80 <MCU_Clock_Setup+0x10c>)
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= RCC_CFGR_PPRE1_DIV4;
 8001c06:	4b1e      	ldr	r3, [pc, #120]	@ (8001c80 <MCU_Clock_Setup+0x10c>)
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	4a1d      	ldr	r2, [pc, #116]	@ (8001c80 <MCU_Clock_Setup+0x10c>)
 8001c0c:	f443 53a0 	orr.w	r3, r3, #5120	@ 0x1400
 8001c10:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= RCC_CFGR_PPRE2_DIV2;
 8001c12:	4b1b      	ldr	r3, [pc, #108]	@ (8001c80 <MCU_Clock_Setup+0x10c>)
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	4a1a      	ldr	r2, [pc, #104]	@ (8001c80 <MCU_Clock_Setup+0x10c>)
 8001c18:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001c1c:	6093      	str	r3, [r2, #8]
	RCC -> CR |= RCC_CR_PLLON;
 8001c1e:	4b18      	ldr	r3, [pc, #96]	@ (8001c80 <MCU_Clock_Setup+0x10c>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a17      	ldr	r2, [pc, #92]	@ (8001c80 <MCU_Clock_Setup+0x10c>)
 8001c24:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c28:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_PLLRDY)){}
 8001c2a:	bf00      	nop
 8001c2c:	4b14      	ldr	r3, [pc, #80]	@ (8001c80 <MCU_Clock_Setup+0x10c>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d0f9      	beq.n	8001c2c <MCU_Clock_Setup+0xb8>
	RCC -> CFGR |= RCC_CFGR_SW_PLL;
 8001c38:	4b11      	ldr	r3, [pc, #68]	@ (8001c80 <MCU_Clock_Setup+0x10c>)
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	4a10      	ldr	r2, [pc, #64]	@ (8001c80 <MCU_Clock_Setup+0x10c>)
 8001c3e:	f043 0302 	orr.w	r3, r3, #2
 8001c42:	6093      	str	r3, [r2, #8]
	while((RCC -> CFGR & RCC_CFGR_SWS_PLL) != RCC_CFGR_SWS_PLL);
 8001c44:	bf00      	nop
 8001c46:	4b0e      	ldr	r3, [pc, #56]	@ (8001c80 <MCU_Clock_Setup+0x10c>)
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	f003 0308 	and.w	r3, r3, #8
 8001c4e:	2b08      	cmp	r3, #8
 8001c50:	d1f9      	bne.n	8001c46 <MCU_Clock_Setup+0xd2>
	SystemCoreClockUpdate();
 8001c52:	f000 f96f 	bl	8001f34 <SystemCoreClockUpdate>
	SysTick_Config(SystemCoreClock/168);
 8001c56:	4b0d      	ldr	r3, [pc, #52]	@ (8001c8c <MCU_Clock_Setup+0x118>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	08db      	lsrs	r3, r3, #3
 8001c5c:	4a0c      	ldr	r2, [pc, #48]	@ (8001c90 <MCU_Clock_Setup+0x11c>)
 8001c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c62:	085b      	lsrs	r3, r3, #1
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7ff ff63 	bl	8001b30 <SysTick_Config>
	RCC -> APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8001c6a:	4b05      	ldr	r3, [pc, #20]	@ (8001c80 <MCU_Clock_Setup+0x10c>)
 8001c6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c6e:	4a04      	ldr	r2, [pc, #16]	@ (8001c80 <MCU_Clock_Setup+0x10c>)
 8001c70:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c74:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8001c76:	bf00      	nop
 8001c78:	3708      	adds	r7, #8
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	40023800 	.word	0x40023800
 8001c84:	40007000 	.word	0x40007000
 8001c88:	40023c00 	.word	0x40023c00
 8001c8c:	20000000 	.word	0x20000000
 8001c90:	18618619 	.word	0x18618619

08001c94 <Delay_Config>:
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
	SysTick->CTRL = 0;
 8001c98:	4b09      	ldr	r3, [pc, #36]	@ (8001cc0 <Delay_Config+0x2c>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0x00FFFFFF;
 8001c9e:	4b08      	ldr	r3, [pc, #32]	@ (8001cc0 <Delay_Config+0x2c>)
 8001ca0:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 8001ca4:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 8001ca6:	4b06      	ldr	r3, [pc, #24]	@ (8001cc0 <Delay_Config+0x2c>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = 5;
 8001cac:	4b04      	ldr	r3, [pc, #16]	@ (8001cc0 <Delay_Config+0x2c>)
 8001cae:	2205      	movs	r2, #5
 8001cb0:	601a      	str	r2, [r3, #0]
	return (0UL);                                                     /* Function successful */
 8001cb2:	2300      	movs	r3, #0
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	e000e010 	.word	0xe000e010

08001cc4 <EXTI0_IRQHandler>:
APDS9930 ALSensor;

int flag = 0;

void EXTI0_IRQHandler(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
		APDS9930_Read_Data(&ALSensor);
 8001cc8:	4808      	ldr	r0, [pc, #32]	@ (8001cec <EXTI0_IRQHandler+0x28>)
 8001cca:	f7ff f91d 	bl	8000f08 <APDS9930_Read_Data>
		EXTI->PR |= EXTI_PR_PR0;
 8001cce:	4b08      	ldr	r3, [pc, #32]	@ (8001cf0 <EXTI0_IRQHandler+0x2c>)
 8001cd0:	695b      	ldr	r3, [r3, #20]
 8001cd2:	4a07      	ldr	r2, [pc, #28]	@ (8001cf0 <EXTI0_IRQHandler+0x2c>)
 8001cd4:	f043 0301 	orr.w	r3, r3, #1
 8001cd8:	6153      	str	r3, [r2, #20]
		APDS9930_Proximity_Interrupt_Clear(&ALSensor);
 8001cda:	4804      	ldr	r0, [pc, #16]	@ (8001cec <EXTI0_IRQHandler+0x28>)
 8001cdc:	f7ff f842 	bl	8000d64 <APDS9930_Proximity_Interrupt_Clear>
		flag = 1;
 8001ce0:	4b04      	ldr	r3, [pc, #16]	@ (8001cf4 <EXTI0_IRQHandler+0x30>)
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	601a      	str	r2, [r3, #0]
}
 8001ce6:	bf00      	nop
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	20000278 	.word	0x20000278
 8001cf0:	40013c00 	.word	0x40013c00
 8001cf4:	2000029c 	.word	0x2000029c

08001cf8 <main>:

int main(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af02      	add	r7, sp, #8

	MCU_Clock_Setup();
 8001cfe:	f7ff ff39 	bl	8001b74 <MCU_Clock_Setup>
	Delay_Config();
 8001d02:	f7ff ffc7 	bl	8001c94 <Delay_Config>
	Console_Init(USART1, 256000);
 8001d06:	f44f 317a 	mov.w	r1, #256000	@ 0x3e800
 8001d0a:	4818      	ldr	r0, [pc, #96]	@ (8001d6c <main+0x74>)
 8001d0c:	f7ff f988 	bl	8001020 <Console_Init>

	APDS9930_DeInit(&ALSensor);
 8001d10:	4817      	ldr	r0, [pc, #92]	@ (8001d70 <main+0x78>)
 8001d12:	f7ff f841 	bl	8000d98 <APDS9930_DeInit>

	ALSensor.Port = I2C1;
 8001d16:	4b16      	ldr	r3, [pc, #88]	@ (8001d70 <main+0x78>)
 8001d18:	4a16      	ldr	r2, [pc, #88]	@ (8001d74 <main+0x7c>)
 8001d1a:	601a      	str	r2, [r3, #0]
	ALSensor.SCL_Pin = I2C1_SCL_Pin.PB8;
 8001d1c:	221c      	movs	r2, #28
 8001d1e:	4b14      	ldr	r3, [pc, #80]	@ (8001d70 <main+0x78>)
 8001d20:	715a      	strb	r2, [r3, #5]
	ALSensor.SDA_Pin = I2C1_SDA_Pin.PB9;
 8001d22:	221d      	movs	r2, #29
 8001d24:	4b12      	ldr	r3, [pc, #72]	@ (8001d70 <main+0x78>)
 8001d26:	711a      	strb	r2, [r3, #4]
	ALSensor.Interrupt_Port = GPIOA;
 8001d28:	4b11      	ldr	r3, [pc, #68]	@ (8001d70 <main+0x78>)
 8001d2a:	4a13      	ldr	r2, [pc, #76]	@ (8001d78 <main+0x80>)
 8001d2c:	609a      	str	r2, [r3, #8]
	ALSensor.Interrupt_Pin = 0;
 8001d2e:	4b10      	ldr	r3, [pc, #64]	@ (8001d70 <main+0x78>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	731a      	strb	r2, [r3, #12]
	ALSensor.Proximity_Interrupt_Enable = true;
 8001d34:	4b0e      	ldr	r3, [pc, #56]	@ (8001d70 <main+0x78>)
 8001d36:	2201      	movs	r2, #1
 8001d38:	735a      	strb	r2, [r3, #13]
	APDS9930_Init(&ALSensor);
 8001d3a:	480d      	ldr	r0, [pc, #52]	@ (8001d70 <main+0x78>)
 8001d3c:	f7ff f852 	bl	8000de4 <APDS9930_Init>


    /* Loop forever */
	for(;;)
	{
		if(flag == 1)
 8001d40:	4b0e      	ldr	r3, [pc, #56]	@ (8001d7c <main+0x84>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d1fb      	bne.n	8001d40 <main+0x48>
		{
			printConsole("%.4f,%d \r\n",ALSensor.Lux_Data,ALSensor.Proximity_Data);
 8001d48:	4b09      	ldr	r3, [pc, #36]	@ (8001d70 <main+0x78>)
 8001d4a:	69db      	ldr	r3, [r3, #28]
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7fe fc0b 	bl	8000568 <__aeabi_f2d>
 8001d52:	4602      	mov	r2, r0
 8001d54:	460b      	mov	r3, r1
 8001d56:	4906      	ldr	r1, [pc, #24]	@ (8001d70 <main+0x78>)
 8001d58:	8b09      	ldrh	r1, [r1, #24]
 8001d5a:	9100      	str	r1, [sp, #0]
 8001d5c:	4808      	ldr	r0, [pc, #32]	@ (8001d80 <main+0x88>)
 8001d5e:	f7ff f985 	bl	800106c <printConsole>
			flag = 0;
 8001d62:	4b06      	ldr	r3, [pc, #24]	@ (8001d7c <main+0x84>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	601a      	str	r2, [r3, #0]
		if(flag == 1)
 8001d68:	e7ea      	b.n	8001d40 <main+0x48>
 8001d6a:	bf00      	nop
 8001d6c:	40011000 	.word	0x40011000
 8001d70:	20000278 	.word	0x20000278
 8001d74:	40005400 	.word	0x40005400
 8001d78:	40020000 	.word	0x40020000
 8001d7c:	2000029c 	.word	0x2000029c
 8001d80:	08005a10 	.word	0x08005a10

08001d84 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  return 1;
 8001d88:	2301      	movs	r3, #1
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr

08001d94 <_kill>:

int _kill(int pid, int sig)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d9e:	f001 fd37 	bl	8003810 <__errno>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2216      	movs	r2, #22
 8001da6:	601a      	str	r2, [r3, #0]
  return -1;
 8001da8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3708      	adds	r7, #8
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}

08001db4 <_exit>:

void _exit (int status)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001dbc:	f04f 31ff 	mov.w	r1, #4294967295
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f7ff ffe7 	bl	8001d94 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001dc6:	bf00      	nop
 8001dc8:	e7fd      	b.n	8001dc6 <_exit+0x12>

08001dca <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001dca:	b580      	push	{r7, lr}
 8001dcc:	b086      	sub	sp, #24
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	60f8      	str	r0, [r7, #12]
 8001dd2:	60b9      	str	r1, [r7, #8]
 8001dd4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	617b      	str	r3, [r7, #20]
 8001dda:	e00a      	b.n	8001df2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ddc:	f3af 8000 	nop.w
 8001de0:	4601      	mov	r1, r0
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	1c5a      	adds	r2, r3, #1
 8001de6:	60ba      	str	r2, [r7, #8]
 8001de8:	b2ca      	uxtb	r2, r1
 8001dea:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	3301      	adds	r3, #1
 8001df0:	617b      	str	r3, [r7, #20]
 8001df2:	697a      	ldr	r2, [r7, #20]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	429a      	cmp	r2, r3
 8001df8:	dbf0      	blt.n	8001ddc <_read+0x12>
  }

  return len;
 8001dfa:	687b      	ldr	r3, [r7, #4]
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3718      	adds	r7, #24
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b086      	sub	sp, #24
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	60f8      	str	r0, [r7, #12]
 8001e0c:	60b9      	str	r1, [r7, #8]
 8001e0e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e10:	2300      	movs	r3, #0
 8001e12:	617b      	str	r3, [r7, #20]
 8001e14:	e009      	b.n	8001e2a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	1c5a      	adds	r2, r3, #1
 8001e1a:	60ba      	str	r2, [r7, #8]
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	3301      	adds	r3, #1
 8001e28:	617b      	str	r3, [r7, #20]
 8001e2a:	697a      	ldr	r2, [r7, #20]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	dbf1      	blt.n	8001e16 <_write+0x12>
  }
  return len;
 8001e32:	687b      	ldr	r3, [r7, #4]
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3718      	adds	r7, #24
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}

08001e3c <_close>:

int _close(int file)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e44:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	370c      	adds	r7, #12
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e64:	605a      	str	r2, [r3, #4]
  return 0;
 8001e66:	2300      	movs	r3, #0
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <_isatty>:

int _isatty(int file)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e7c:	2301      	movs	r3, #1
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	370c      	adds	r7, #12
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr

08001e8a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e8a:	b480      	push	{r7}
 8001e8c:	b085      	sub	sp, #20
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	60f8      	str	r0, [r7, #12]
 8001e92:	60b9      	str	r1, [r7, #8]
 8001e94:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e96:	2300      	movs	r3, #0
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3714      	adds	r7, #20
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b086      	sub	sp, #24
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001eac:	4a14      	ldr	r2, [pc, #80]	@ (8001f00 <_sbrk+0x5c>)
 8001eae:	4b15      	ldr	r3, [pc, #84]	@ (8001f04 <_sbrk+0x60>)
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001eb8:	4b13      	ldr	r3, [pc, #76]	@ (8001f08 <_sbrk+0x64>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d102      	bne.n	8001ec6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ec0:	4b11      	ldr	r3, [pc, #68]	@ (8001f08 <_sbrk+0x64>)
 8001ec2:	4a12      	ldr	r2, [pc, #72]	@ (8001f0c <_sbrk+0x68>)
 8001ec4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ec6:	4b10      	ldr	r3, [pc, #64]	@ (8001f08 <_sbrk+0x64>)
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4413      	add	r3, r2
 8001ece:	693a      	ldr	r2, [r7, #16]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d207      	bcs.n	8001ee4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ed4:	f001 fc9c 	bl	8003810 <__errno>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	220c      	movs	r2, #12
 8001edc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ede:	f04f 33ff 	mov.w	r3, #4294967295
 8001ee2:	e009      	b.n	8001ef8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ee4:	4b08      	ldr	r3, [pc, #32]	@ (8001f08 <_sbrk+0x64>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001eea:	4b07      	ldr	r3, [pc, #28]	@ (8001f08 <_sbrk+0x64>)
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4413      	add	r3, r2
 8001ef2:	4a05      	ldr	r2, [pc, #20]	@ (8001f08 <_sbrk+0x64>)
 8001ef4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3718      	adds	r7, #24
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	20020000 	.word	0x20020000
 8001f04:	00000400 	.word	0x00000400
 8001f08:	200002a0 	.word	0x200002a0
 8001f0c:	200003f0 	.word	0x200003f0

08001f10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f14:	4b06      	ldr	r3, [pc, #24]	@ (8001f30 <SystemInit+0x20>)
 8001f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f1a:	4a05      	ldr	r2, [pc, #20]	@ (8001f30 <SystemInit+0x20>)
 8001f1c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f20:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f24:	bf00      	nop
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	e000ed00 	.word	0xe000ed00

08001f34 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b087      	sub	sp, #28
 8001f38:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	613b      	str	r3, [r7, #16]
 8001f3e:	2300      	movs	r3, #0
 8001f40:	617b      	str	r3, [r7, #20]
 8001f42:	2302      	movs	r3, #2
 8001f44:	60fb      	str	r3, [r7, #12]
 8001f46:	2300      	movs	r3, #0
 8001f48:	60bb      	str	r3, [r7, #8]
 8001f4a:	2302      	movs	r3, #2
 8001f4c:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001f4e:	4b34      	ldr	r3, [pc, #208]	@ (8002020 <SystemCoreClockUpdate+0xec>)
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	f003 030c 	and.w	r3, r3, #12
 8001f56:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	2b08      	cmp	r3, #8
 8001f5c:	d011      	beq.n	8001f82 <SystemCoreClockUpdate+0x4e>
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	2b08      	cmp	r3, #8
 8001f62:	d844      	bhi.n	8001fee <SystemCoreClockUpdate+0xba>
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d003      	beq.n	8001f72 <SystemCoreClockUpdate+0x3e>
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	2b04      	cmp	r3, #4
 8001f6e:	d004      	beq.n	8001f7a <SystemCoreClockUpdate+0x46>
 8001f70:	e03d      	b.n	8001fee <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8001f72:	4b2c      	ldr	r3, [pc, #176]	@ (8002024 <SystemCoreClockUpdate+0xf0>)
 8001f74:	4a2c      	ldr	r2, [pc, #176]	@ (8002028 <SystemCoreClockUpdate+0xf4>)
 8001f76:	601a      	str	r2, [r3, #0]
      break;
 8001f78:	e03d      	b.n	8001ff6 <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8001f7a:	4b2a      	ldr	r3, [pc, #168]	@ (8002024 <SystemCoreClockUpdate+0xf0>)
 8001f7c:	4a2b      	ldr	r2, [pc, #172]	@ (800202c <SystemCoreClockUpdate+0xf8>)
 8001f7e:	601a      	str	r2, [r3, #0]
      break;
 8001f80:	e039      	b.n	8001ff6 <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8001f82:	4b27      	ldr	r3, [pc, #156]	@ (8002020 <SystemCoreClockUpdate+0xec>)
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	0d9b      	lsrs	r3, r3, #22
 8001f88:	f003 0301 	and.w	r3, r3, #1
 8001f8c:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f8e:	4b24      	ldr	r3, [pc, #144]	@ (8002020 <SystemCoreClockUpdate+0xec>)
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001f96:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d00c      	beq.n	8001fb8 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001f9e:	4a23      	ldr	r2, [pc, #140]	@ (800202c <SystemCoreClockUpdate+0xf8>)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fa6:	4a1e      	ldr	r2, [pc, #120]	@ (8002020 <SystemCoreClockUpdate+0xec>)
 8001fa8:	6852      	ldr	r2, [r2, #4]
 8001faa:	0992      	lsrs	r2, r2, #6
 8001fac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001fb0:	fb02 f303 	mul.w	r3, r2, r3
 8001fb4:	617b      	str	r3, [r7, #20]
 8001fb6:	e00b      	b.n	8001fd0 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001fb8:	4a1b      	ldr	r2, [pc, #108]	@ (8002028 <SystemCoreClockUpdate+0xf4>)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fc0:	4a17      	ldr	r2, [pc, #92]	@ (8002020 <SystemCoreClockUpdate+0xec>)
 8001fc2:	6852      	ldr	r2, [r2, #4]
 8001fc4:	0992      	lsrs	r2, r2, #6
 8001fc6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001fca:	fb02 f303 	mul.w	r3, r2, r3
 8001fce:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8001fd0:	4b13      	ldr	r3, [pc, #76]	@ (8002020 <SystemCoreClockUpdate+0xec>)
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	0c1b      	lsrs	r3, r3, #16
 8001fd6:	f003 0303 	and.w	r3, r3, #3
 8001fda:	3301      	adds	r3, #1
 8001fdc:	005b      	lsls	r3, r3, #1
 8001fde:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8001fe0:	697a      	ldr	r2, [r7, #20]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fe8:	4a0e      	ldr	r2, [pc, #56]	@ (8002024 <SystemCoreClockUpdate+0xf0>)
 8001fea:	6013      	str	r3, [r2, #0]
      break;
 8001fec:	e003      	b.n	8001ff6 <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 8001fee:	4b0d      	ldr	r3, [pc, #52]	@ (8002024 <SystemCoreClockUpdate+0xf0>)
 8001ff0:	4a0d      	ldr	r2, [pc, #52]	@ (8002028 <SystemCoreClockUpdate+0xf4>)
 8001ff2:	601a      	str	r2, [r3, #0]
      break;
 8001ff4:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8001ff6:	4b0a      	ldr	r3, [pc, #40]	@ (8002020 <SystemCoreClockUpdate+0xec>)
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	091b      	lsrs	r3, r3, #4
 8001ffc:	f003 030f 	and.w	r3, r3, #15
 8002000:	4a0b      	ldr	r2, [pc, #44]	@ (8002030 <SystemCoreClockUpdate+0xfc>)
 8002002:	5cd3      	ldrb	r3, [r2, r3]
 8002004:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8002006:	4b07      	ldr	r3, [pc, #28]	@ (8002024 <SystemCoreClockUpdate+0xf0>)
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	fa22 f303 	lsr.w	r3, r2, r3
 8002010:	4a04      	ldr	r2, [pc, #16]	@ (8002024 <SystemCoreClockUpdate+0xf0>)
 8002012:	6013      	str	r3, [r2, #0]
}
 8002014:	bf00      	nop
 8002016:	371c      	adds	r7, #28
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr
 8002020:	40023800 	.word	0x40023800
 8002024:	20000000 	.word	0x20000000
 8002028:	00f42400 	.word	0x00f42400
 800202c:	007a1200 	.word	0x007a1200
 8002030:	08005a1c 	.word	0x08005a1c

08002034 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002034:	480d      	ldr	r0, [pc, #52]	@ (800206c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002036:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002038:	f7ff ff6a 	bl	8001f10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800203c:	480c      	ldr	r0, [pc, #48]	@ (8002070 <LoopForever+0x6>)
  ldr r1, =_edata
 800203e:	490d      	ldr	r1, [pc, #52]	@ (8002074 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002040:	4a0d      	ldr	r2, [pc, #52]	@ (8002078 <LoopForever+0xe>)
  movs r3, #0
 8002042:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002044:	e002      	b.n	800204c <LoopCopyDataInit>

08002046 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002046:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002048:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800204a:	3304      	adds	r3, #4

0800204c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800204c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800204e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002050:	d3f9      	bcc.n	8002046 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002052:	4a0a      	ldr	r2, [pc, #40]	@ (800207c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002054:	4c0a      	ldr	r4, [pc, #40]	@ (8002080 <LoopForever+0x16>)
  movs r3, #0
 8002056:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002058:	e001      	b.n	800205e <LoopFillZerobss>

0800205a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800205a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800205c:	3204      	adds	r2, #4

0800205e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800205e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002060:	d3fb      	bcc.n	800205a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002062:	f001 fbdb 	bl	800381c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002066:	f7ff fe47 	bl	8001cf8 <main>

0800206a <LoopForever>:

LoopForever:
  b LoopForever
 800206a:	e7fe      	b.n	800206a <LoopForever>
  ldr   r0, =_estack
 800206c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002070:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002074:	200001cc 	.word	0x200001cc
  ldr r2, =_sidata
 8002078:	08005db0 	.word	0x08005db0
  ldr r2, =_sbss
 800207c:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 8002080:	200003f0 	.word	0x200003f0

08002084 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002084:	e7fe      	b.n	8002084 <ADC_IRQHandler>

08002086 <separateFractionAndIntegral>:
	float temp = 0;
	temp = (float)(SysTick->VAL / (SystemCoreClock));
	return temp;
}

__STATIC_INLINE void separateFractionAndIntegral(double number, double *fractionalPart, double *integralPart) {
 8002086:	b580      	push	{r7, lr}
 8002088:	b084      	sub	sp, #16
 800208a:	af00      	add	r7, sp, #0
 800208c:	ed87 0b02 	vstr	d0, [r7, #8]
 8002090:	6078      	str	r0, [r7, #4]
 8002092:	6039      	str	r1, [r7, #0]
    *integralPart = (double)((int64_t)number);
 8002094:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002098:	f7fe fd96 	bl	8000bc8 <__aeabi_d2lz>
 800209c:	4602      	mov	r2, r0
 800209e:	460b      	mov	r3, r1
 80020a0:	4610      	mov	r0, r2
 80020a2:	4619      	mov	r1, r3
 80020a4:	f7fe fa8a 	bl	80005bc <__aeabi_l2d>
 80020a8:	4602      	mov	r2, r0
 80020aa:	460b      	mov	r3, r1
 80020ac:	6839      	ldr	r1, [r7, #0]
 80020ae:	e9c1 2300 	strd	r2, r3, [r1]
    *fractionalPart = number - *integralPart;
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020b8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80020bc:	f7fe f8f4 	bl	80002a8 <__aeabi_dsub>
 80020c0:	4602      	mov	r2, r0
 80020c2:	460b      	mov	r3, r1
 80020c4:	6879      	ldr	r1, [r7, #4]
 80020c6:	e9c1 2300 	strd	r2, r3, [r1]
}
 80020ca:	bf00      	nop
 80020cc:	3710      	adds	r7, #16
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}

080020d2 <USART_Config_Reset>:
#include "USART.h"



void USART_Config_Reset(USART_Config *config)
{
 80020d2:	b480      	push	{r7}
 80020d4:	b083      	sub	sp, #12
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
	config->mode = USART_Mode.Disable;
 80020da:	2200      	movs	r2, #0
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	731a      	strb	r2, [r3, #12]
	config->hardware_flow = Hardware_Flow.Disable;
 80020e0:	2200      	movs	r2, #0
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	74da      	strb	r2, [r3, #19]
	config->low_power_uart = Low_Power_USART.Disable;
 80020e6:	2200      	movs	r2, #0
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	711a      	strb	r2, [r3, #4]
	config->baudrate = 9600;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80020f2:	609a      	str	r2, [r3, #8]
	config->dma_enable = DMA_Enable.RX_Disable | DMA_Enable.TX_Disable;
 80020f4:	2203      	movs	r2, #3
 80020f6:	2301      	movs	r3, #1
 80020f8:	4313      	orrs	r3, r2
 80020fa:	b2da      	uxtb	r2, r3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	755a      	strb	r2, [r3, #21]
	config->interrupt = Interrupt_Type.Disable;
 8002100:	2300      	movs	r3, #0
 8002102:	b2da      	uxtb	r2, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	749a      	strb	r2, [r3, #18]
}
 8002108:	bf00      	nop
 800210a:	370c      	adds	r7, #12
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr

08002114 <USART_Clock_Enable>:


int8_t USART_Clock_Enable(USART_Config *config)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
	if(config->Port == USART1)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a47      	ldr	r2, [pc, #284]	@ (8002240 <USART_Clock_Enable+0x12c>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d112      	bne.n	800214c <USART_Clock_Enable+0x38>
	{
		if(config->low_power_uart == Low_Power_USART.Enable) RCC -> APB2LPENR |= RCC_APB2LPENR_USART1LPEN;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	791b      	ldrb	r3, [r3, #4]
 800212a:	2201      	movs	r2, #1
 800212c:	4293      	cmp	r3, r2
 800212e:	d106      	bne.n	800213e <USART_Clock_Enable+0x2a>
 8002130:	4b44      	ldr	r3, [pc, #272]	@ (8002244 <USART_Clock_Enable+0x130>)
 8002132:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002134:	4a43      	ldr	r2, [pc, #268]	@ (8002244 <USART_Clock_Enable+0x130>)
 8002136:	f043 0310 	orr.w	r3, r3, #16
 800213a:	6653      	str	r3, [r2, #100]	@ 0x64
 800213c:	e079      	b.n	8002232 <USART_Clock_Enable+0x11e>
		else RCC -> APB2ENR |= RCC_APB2ENR_USART1EN;
 800213e:	4b41      	ldr	r3, [pc, #260]	@ (8002244 <USART_Clock_Enable+0x130>)
 8002140:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002142:	4a40      	ldr	r2, [pc, #256]	@ (8002244 <USART_Clock_Enable+0x130>)
 8002144:	f043 0310 	orr.w	r3, r3, #16
 8002148:	6453      	str	r3, [r2, #68]	@ 0x44
 800214a:	e072      	b.n	8002232 <USART_Clock_Enable+0x11e>
	}
	else if(config->Port == USART2)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a3d      	ldr	r2, [pc, #244]	@ (8002248 <USART_Clock_Enable+0x134>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d112      	bne.n	800217c <USART_Clock_Enable+0x68>
	{
		if(config->low_power_uart == Low_Power_USART.Enable) RCC -> APB1LPENR |= RCC_APB1LPENR_USART2LPEN;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	791b      	ldrb	r3, [r3, #4]
 800215a:	2201      	movs	r2, #1
 800215c:	4293      	cmp	r3, r2
 800215e:	d106      	bne.n	800216e <USART_Clock_Enable+0x5a>
 8002160:	4b38      	ldr	r3, [pc, #224]	@ (8002244 <USART_Clock_Enable+0x130>)
 8002162:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002164:	4a37      	ldr	r2, [pc, #220]	@ (8002244 <USART_Clock_Enable+0x130>)
 8002166:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800216a:	6613      	str	r3, [r2, #96]	@ 0x60
 800216c:	e061      	b.n	8002232 <USART_Clock_Enable+0x11e>
		else RCC -> APB1ENR |= RCC_APB1ENR_USART2EN;
 800216e:	4b35      	ldr	r3, [pc, #212]	@ (8002244 <USART_Clock_Enable+0x130>)
 8002170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002172:	4a34      	ldr	r2, [pc, #208]	@ (8002244 <USART_Clock_Enable+0x130>)
 8002174:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002178:	6413      	str	r3, [r2, #64]	@ 0x40
 800217a:	e05a      	b.n	8002232 <USART_Clock_Enable+0x11e>
	}
	else if(config->Port == USART3)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a32      	ldr	r2, [pc, #200]	@ (800224c <USART_Clock_Enable+0x138>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d112      	bne.n	80021ac <USART_Clock_Enable+0x98>
	{
		if(config->low_power_uart == Low_Power_USART.Enable) RCC -> APB1LPENR |= RCC_APB1LPENR_USART3LPEN;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	791b      	ldrb	r3, [r3, #4]
 800218a:	2201      	movs	r2, #1
 800218c:	4293      	cmp	r3, r2
 800218e:	d106      	bne.n	800219e <USART_Clock_Enable+0x8a>
 8002190:	4b2c      	ldr	r3, [pc, #176]	@ (8002244 <USART_Clock_Enable+0x130>)
 8002192:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002194:	4a2b      	ldr	r2, [pc, #172]	@ (8002244 <USART_Clock_Enable+0x130>)
 8002196:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800219a:	6613      	str	r3, [r2, #96]	@ 0x60
 800219c:	e049      	b.n	8002232 <USART_Clock_Enable+0x11e>
		else RCC -> APB1ENR |= RCC_APB1ENR_USART3EN;
 800219e:	4b29      	ldr	r3, [pc, #164]	@ (8002244 <USART_Clock_Enable+0x130>)
 80021a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021a2:	4a28      	ldr	r2, [pc, #160]	@ (8002244 <USART_Clock_Enable+0x130>)
 80021a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80021a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80021aa:	e042      	b.n	8002232 <USART_Clock_Enable+0x11e>
	}
	else if(config->Port == UART4)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a27      	ldr	r2, [pc, #156]	@ (8002250 <USART_Clock_Enable+0x13c>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d10e      	bne.n	80021d4 <USART_Clock_Enable+0xc0>
	{
		if(config->low_power_uart == Low_Power_USART.Enable) return -1;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	791b      	ldrb	r3, [r3, #4]
 80021ba:	2201      	movs	r2, #1
 80021bc:	4293      	cmp	r3, r2
 80021be:	d102      	bne.n	80021c6 <USART_Clock_Enable+0xb2>
 80021c0:	f04f 33ff 	mov.w	r3, #4294967295
 80021c4:	e036      	b.n	8002234 <USART_Clock_Enable+0x120>
		else RCC -> APB1ENR |= RCC_APB1ENR_UART4EN;
 80021c6:	4b1f      	ldr	r3, [pc, #124]	@ (8002244 <USART_Clock_Enable+0x130>)
 80021c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ca:	4a1e      	ldr	r2, [pc, #120]	@ (8002244 <USART_Clock_Enable+0x130>)
 80021cc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80021d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80021d2:	e02e      	b.n	8002232 <USART_Clock_Enable+0x11e>
	}
	else if(config->Port == UART5)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a1e      	ldr	r2, [pc, #120]	@ (8002254 <USART_Clock_Enable+0x140>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d10e      	bne.n	80021fc <USART_Clock_Enable+0xe8>
	{
		if(config->low_power_uart == Low_Power_USART.Enable) return -1;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	791b      	ldrb	r3, [r3, #4]
 80021e2:	2201      	movs	r2, #1
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d102      	bne.n	80021ee <USART_Clock_Enable+0xda>
 80021e8:	f04f 33ff 	mov.w	r3, #4294967295
 80021ec:	e022      	b.n	8002234 <USART_Clock_Enable+0x120>
		else RCC -> APB1ENR |= RCC_APB1ENR_UART5EN;
 80021ee:	4b15      	ldr	r3, [pc, #84]	@ (8002244 <USART_Clock_Enable+0x130>)
 80021f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021f2:	4a14      	ldr	r2, [pc, #80]	@ (8002244 <USART_Clock_Enable+0x130>)
 80021f4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80021f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80021fa:	e01a      	b.n	8002232 <USART_Clock_Enable+0x11e>
	}
	else if(config->Port == USART6)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a15      	ldr	r2, [pc, #84]	@ (8002258 <USART_Clock_Enable+0x144>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d112      	bne.n	800222c <USART_Clock_Enable+0x118>
	{
		if(config->low_power_uart == Low_Power_USART.Enable) RCC -> APB2LPENR |= RCC_APB2LPENR_USART6LPEN;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	791b      	ldrb	r3, [r3, #4]
 800220a:	2201      	movs	r2, #1
 800220c:	4293      	cmp	r3, r2
 800220e:	d106      	bne.n	800221e <USART_Clock_Enable+0x10a>
 8002210:	4b0c      	ldr	r3, [pc, #48]	@ (8002244 <USART_Clock_Enable+0x130>)
 8002212:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002214:	4a0b      	ldr	r2, [pc, #44]	@ (8002244 <USART_Clock_Enable+0x130>)
 8002216:	f043 0320 	orr.w	r3, r3, #32
 800221a:	6653      	str	r3, [r2, #100]	@ 0x64
 800221c:	e009      	b.n	8002232 <USART_Clock_Enable+0x11e>
		else RCC -> APB2ENR |= RCC_APB2ENR_USART6EN;
 800221e:	4b09      	ldr	r3, [pc, #36]	@ (8002244 <USART_Clock_Enable+0x130>)
 8002220:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002222:	4a08      	ldr	r2, [pc, #32]	@ (8002244 <USART_Clock_Enable+0x130>)
 8002224:	f043 0320 	orr.w	r3, r3, #32
 8002228:	6453      	str	r3, [r2, #68]	@ 0x44
 800222a:	e002      	b.n	8002232 <USART_Clock_Enable+0x11e>
	}
	else
	{
		return -1;
 800222c:	f04f 33ff 	mov.w	r3, #4294967295
 8002230:	e000      	b.n	8002234 <USART_Clock_Enable+0x120>
	}
	return 1;
 8002232:	2301      	movs	r3, #1
}
 8002234:	4618      	mov	r0, r3
 8002236:	370c      	adds	r7, #12
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr
 8002240:	40011000 	.word	0x40011000
 8002244:	40023800 	.word	0x40023800
 8002248:	40004400 	.word	0x40004400
 800224c:	40004800 	.word	0x40004800
 8002250:	40004c00 	.word	0x40004c00
 8002254:	40005000 	.word	0x40005000
 8002258:	40011400 	.word	0x40011400

0800225c <PIN_Setup>:
	}
	return 1;
}

static void PIN_Setup(USART_Config *config)
{
 800225c:	b5b0      	push	{r4, r5, r7, lr}
 800225e:	b086      	sub	sp, #24
 8002260:	af04      	add	r7, sp, #16
 8002262:	6078      	str	r0, [r7, #4]
	if(config->Port == USART1)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4aa0      	ldr	r2, [pc, #640]	@ (80024ec <PIN_Setup+0x290>)
 800226a:	4293      	cmp	r3, r2
 800226c:	f040 810d 	bne.w	800248a <PIN_Setup+0x22e>
	{
		if((config->mode == USART_Mode.Asynchronous) ||
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	7b1b      	ldrb	r3, [r3, #12]
 8002274:	2201      	movs	r2, #1
 8002276:	4293      	cmp	r3, r2
 8002278:	d00f      	beq.n	800229a <PIN_Setup+0x3e>
		   (config->mode == USART_Mode.Synchronous) ||
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	7b1b      	ldrb	r3, [r3, #12]
 800227e:	2202      	movs	r2, #2
		if((config->mode == USART_Mode.Asynchronous) ||
 8002280:	4293      	cmp	r3, r2
 8002282:	d00a      	beq.n	800229a <PIN_Setup+0x3e>
		   (config->mode == USART_Mode.IrDA) ||
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	7b1b      	ldrb	r3, [r3, #12]
 8002288:	2204      	movs	r2, #4
		   (config->mode == USART_Mode.Synchronous) ||
 800228a:	4293      	cmp	r3, r2
 800228c:	d005      	beq.n	800229a <PIN_Setup+0x3e>
		   (config->mode == USART_Mode.LIN) )
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	7b1b      	ldrb	r3, [r3, #12]
 8002292:	2205      	movs	r2, #5
		   (config->mode == USART_Mode.IrDA) ||
 8002294:	4293      	cmp	r3, r2
 8002296:	f040 80be 	bne.w	8002416 <PIN_Setup+0x1ba>
		{
			if(config->TX_Pin == USART1_TX_Pin.PA9)GPIO_Pin_Init(GPIOA, USART1_TX_Pin.PA9, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_1);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	7b5b      	ldrb	r3, [r3, #13]
 800229e:	2209      	movs	r2, #9
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d10f      	bne.n	80022c4 <PIN_Setup+0x68>
 80022a4:	2009      	movs	r0, #9
 80022a6:	2402      	movs	r4, #2
 80022a8:	2500      	movs	r5, #0
 80022aa:	2302      	movs	r3, #2
 80022ac:	2200      	movs	r2, #0
 80022ae:	2107      	movs	r1, #7
 80022b0:	9102      	str	r1, [sp, #8]
 80022b2:	9201      	str	r2, [sp, #4]
 80022b4:	9300      	str	r3, [sp, #0]
 80022b6:	462b      	mov	r3, r5
 80022b8:	4622      	mov	r2, r4
 80022ba:	4601      	mov	r1, r0
 80022bc:	488c      	ldr	r0, [pc, #560]	@ (80024f0 <PIN_Setup+0x294>)
 80022be:	f7ff f87d 	bl	80013bc <GPIO_Pin_Init>
 80022c2:	e013      	b.n	80022ec <PIN_Setup+0x90>
			else if(config->TX_Pin == USART1_TX_Pin.PB6)GPIO_Pin_Init(GPIOB, USART1_TX_Pin.PB6, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_1);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	7b5b      	ldrb	r3, [r3, #13]
 80022c8:	2206      	movs	r2, #6
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d10e      	bne.n	80022ec <PIN_Setup+0x90>
 80022ce:	2006      	movs	r0, #6
 80022d0:	2402      	movs	r4, #2
 80022d2:	2500      	movs	r5, #0
 80022d4:	2302      	movs	r3, #2
 80022d6:	2200      	movs	r2, #0
 80022d8:	2107      	movs	r1, #7
 80022da:	9102      	str	r1, [sp, #8]
 80022dc:	9201      	str	r2, [sp, #4]
 80022de:	9300      	str	r3, [sp, #0]
 80022e0:	462b      	mov	r3, r5
 80022e2:	4622      	mov	r2, r4
 80022e4:	4601      	mov	r1, r0
 80022e6:	4883      	ldr	r0, [pc, #524]	@ (80024f4 <PIN_Setup+0x298>)
 80022e8:	f7ff f868 	bl	80013bc <GPIO_Pin_Init>

			if(config->RX_Pin == USART1_RX_Pin.PA10)GPIO_Pin_Init(GPIOA, USART1_RX_Pin.PA10, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_1);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	7b9b      	ldrb	r3, [r3, #14]
 80022f0:	220a      	movs	r2, #10
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d10f      	bne.n	8002316 <PIN_Setup+0xba>
 80022f6:	200a      	movs	r0, #10
 80022f8:	2402      	movs	r4, #2
 80022fa:	2500      	movs	r5, #0
 80022fc:	2302      	movs	r3, #2
 80022fe:	2200      	movs	r2, #0
 8002300:	2107      	movs	r1, #7
 8002302:	9102      	str	r1, [sp, #8]
 8002304:	9201      	str	r2, [sp, #4]
 8002306:	9300      	str	r3, [sp, #0]
 8002308:	462b      	mov	r3, r5
 800230a:	4622      	mov	r2, r4
 800230c:	4601      	mov	r1, r0
 800230e:	4878      	ldr	r0, [pc, #480]	@ (80024f0 <PIN_Setup+0x294>)
 8002310:	f7ff f854 	bl	80013bc <GPIO_Pin_Init>
 8002314:	e013      	b.n	800233e <PIN_Setup+0xe2>
			else if(config->RX_Pin == USART1_RX_Pin.PB7)GPIO_Pin_Init(GPIOB, USART1_RX_Pin.PB7, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_1);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	7b9b      	ldrb	r3, [r3, #14]
 800231a:	2207      	movs	r2, #7
 800231c:	4293      	cmp	r3, r2
 800231e:	d10e      	bne.n	800233e <PIN_Setup+0xe2>
 8002320:	2007      	movs	r0, #7
 8002322:	2402      	movs	r4, #2
 8002324:	2500      	movs	r5, #0
 8002326:	2302      	movs	r3, #2
 8002328:	2200      	movs	r2, #0
 800232a:	2107      	movs	r1, #7
 800232c:	9102      	str	r1, [sp, #8]
 800232e:	9201      	str	r2, [sp, #4]
 8002330:	9300      	str	r3, [sp, #0]
 8002332:	462b      	mov	r3, r5
 8002334:	4622      	mov	r2, r4
 8002336:	4601      	mov	r1, r0
 8002338:	486e      	ldr	r0, [pc, #440]	@ (80024f4 <PIN_Setup+0x298>)
 800233a:	f7ff f83f 	bl	80013bc <GPIO_Pin_Init>

			if((config->mode == USART_Mode.Synchronous))if(config->CLK_Pin == USART1_CLK_Pin.PA8)GPIO_Pin_Init(GPIOA, USART1_CLK_Pin.PA8, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_1);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	7b1b      	ldrb	r3, [r3, #12]
 8002342:	2202      	movs	r2, #2
 8002344:	4293      	cmp	r3, r2
 8002346:	d113      	bne.n	8002370 <PIN_Setup+0x114>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	7bdb      	ldrb	r3, [r3, #15]
 800234c:	2208      	movs	r2, #8
 800234e:	4293      	cmp	r3, r2
 8002350:	d10e      	bne.n	8002370 <PIN_Setup+0x114>
 8002352:	2008      	movs	r0, #8
 8002354:	2402      	movs	r4, #2
 8002356:	2500      	movs	r5, #0
 8002358:	2302      	movs	r3, #2
 800235a:	2200      	movs	r2, #0
 800235c:	2107      	movs	r1, #7
 800235e:	9102      	str	r1, [sp, #8]
 8002360:	9201      	str	r2, [sp, #4]
 8002362:	9300      	str	r3, [sp, #0]
 8002364:	462b      	mov	r3, r5
 8002366:	4622      	mov	r2, r4
 8002368:	4601      	mov	r1, r0
 800236a:	4861      	ldr	r0, [pc, #388]	@ (80024f0 <PIN_Setup+0x294>)
 800236c:	f7ff f826 	bl	80013bc <GPIO_Pin_Init>

			if(config->hardware_flow != Hardware_Flow.Disable)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	7cdb      	ldrb	r3, [r3, #19]
 8002374:	2200      	movs	r2, #0
 8002376:	4293      	cmp	r3, r2
 8002378:	f000 83bb 	beq.w	8002af2 <PIN_Setup+0x896>
			{
				if(config->hardware_flow == Hardware_Flow.CTS_Enable)GPIO_Pin_Init(GPIOA, USART1_CTS_Pin.PA11, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_1);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	7cdb      	ldrb	r3, [r3, #19]
 8002380:	2201      	movs	r2, #1
 8002382:	4293      	cmp	r3, r2
 8002384:	d10e      	bne.n	80023a4 <PIN_Setup+0x148>
 8002386:	200b      	movs	r0, #11
 8002388:	2402      	movs	r4, #2
 800238a:	2500      	movs	r5, #0
 800238c:	2302      	movs	r3, #2
 800238e:	2200      	movs	r2, #0
 8002390:	2107      	movs	r1, #7
 8002392:	9102      	str	r1, [sp, #8]
 8002394:	9201      	str	r2, [sp, #4]
 8002396:	9300      	str	r3, [sp, #0]
 8002398:	462b      	mov	r3, r5
 800239a:	4622      	mov	r2, r4
 800239c:	4601      	mov	r1, r0
 800239e:	4854      	ldr	r0, [pc, #336]	@ (80024f0 <PIN_Setup+0x294>)
 80023a0:	f7ff f80c 	bl	80013bc <GPIO_Pin_Init>
				if(config->hardware_flow == Hardware_Flow.RTS_Enable)GPIO_Pin_Init(GPIOA, USART1_RTS_Pin.PA12, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_1);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	7cdb      	ldrb	r3, [r3, #19]
 80023a8:	2202      	movs	r2, #2
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d10e      	bne.n	80023cc <PIN_Setup+0x170>
 80023ae:	200c      	movs	r0, #12
 80023b0:	2402      	movs	r4, #2
 80023b2:	2500      	movs	r5, #0
 80023b4:	2302      	movs	r3, #2
 80023b6:	2200      	movs	r2, #0
 80023b8:	2107      	movs	r1, #7
 80023ba:	9102      	str	r1, [sp, #8]
 80023bc:	9201      	str	r2, [sp, #4]
 80023be:	9300      	str	r3, [sp, #0]
 80023c0:	462b      	mov	r3, r5
 80023c2:	4622      	mov	r2, r4
 80023c4:	4601      	mov	r1, r0
 80023c6:	484a      	ldr	r0, [pc, #296]	@ (80024f0 <PIN_Setup+0x294>)
 80023c8:	f7fe fff8 	bl	80013bc <GPIO_Pin_Init>
				if(config->hardware_flow == Hardware_Flow.CTS_RTS_Enable)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	7cdb      	ldrb	r3, [r3, #19]
 80023d0:	2203      	movs	r2, #3
 80023d2:	4293      	cmp	r3, r2
 80023d4:	f040 838d 	bne.w	8002af2 <PIN_Setup+0x896>
				{
					GPIO_Pin_Init(GPIOA, USART1_CTS_Pin.PA11, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_1);
 80023d8:	200b      	movs	r0, #11
 80023da:	2402      	movs	r4, #2
 80023dc:	2500      	movs	r5, #0
 80023de:	2302      	movs	r3, #2
 80023e0:	2200      	movs	r2, #0
 80023e2:	2107      	movs	r1, #7
 80023e4:	9102      	str	r1, [sp, #8]
 80023e6:	9201      	str	r2, [sp, #4]
 80023e8:	9300      	str	r3, [sp, #0]
 80023ea:	462b      	mov	r3, r5
 80023ec:	4622      	mov	r2, r4
 80023ee:	4601      	mov	r1, r0
 80023f0:	483f      	ldr	r0, [pc, #252]	@ (80024f0 <PIN_Setup+0x294>)
 80023f2:	f7fe ffe3 	bl	80013bc <GPIO_Pin_Init>
					GPIO_Pin_Init(GPIOA, USART1_RTS_Pin.PA12, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_1);
 80023f6:	200c      	movs	r0, #12
 80023f8:	2402      	movs	r4, #2
 80023fa:	2500      	movs	r5, #0
 80023fc:	2302      	movs	r3, #2
 80023fe:	2200      	movs	r2, #0
 8002400:	2107      	movs	r1, #7
 8002402:	9102      	str	r1, [sp, #8]
 8002404:	9201      	str	r2, [sp, #4]
 8002406:	9300      	str	r3, [sp, #0]
 8002408:	462b      	mov	r3, r5
 800240a:	4622      	mov	r2, r4
 800240c:	4601      	mov	r1, r0
 800240e:	4838      	ldr	r0, [pc, #224]	@ (80024f0 <PIN_Setup+0x294>)
 8002410:	f7fe ffd4 	bl	80013bc <GPIO_Pin_Init>
			if(config->hardware_flow != Hardware_Flow.Disable)
 8002414:	e36d      	b.n	8002af2 <PIN_Setup+0x896>
				}
		    }
		}
		else if((config->mode == USART_Mode.SmartCard) ||
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	7b1b      	ldrb	r3, [r3, #12]
 800241a:	2206      	movs	r2, #6
 800241c:	4293      	cmp	r3, r2
 800241e:	d00a      	beq.n	8002436 <PIN_Setup+0x1da>
		   (config->mode == USART_Mode.SmartCard_Clock) ||
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	7b1b      	ldrb	r3, [r3, #12]
 8002424:	2207      	movs	r2, #7
		else if((config->mode == USART_Mode.SmartCard) ||
 8002426:	4293      	cmp	r3, r2
 8002428:	d005      	beq.n	8002436 <PIN_Setup+0x1da>
		   (config->mode == USART_Mode.Single_Wire_Half_Duplex) )
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	7b1b      	ldrb	r3, [r3, #12]
 800242e:	2203      	movs	r2, #3
		   (config->mode == USART_Mode.SmartCard_Clock) ||
 8002430:	4293      	cmp	r3, r2
 8002432:	f040 8363 	bne.w	8002afc <PIN_Setup+0x8a0>
		{
			if(config->TX_Pin == USART1_TX_Pin.PA9)GPIO_Pin_Init(GPIOA, USART1_TX_Pin.PA9, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_1);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	7b5b      	ldrb	r3, [r3, #13]
 800243a:	2209      	movs	r2, #9
 800243c:	4293      	cmp	r3, r2
 800243e:	d10e      	bne.n	800245e <PIN_Setup+0x202>
 8002440:	2009      	movs	r0, #9
 8002442:	2402      	movs	r4, #2
 8002444:	2500      	movs	r5, #0
 8002446:	2302      	movs	r3, #2
 8002448:	2200      	movs	r2, #0
 800244a:	2107      	movs	r1, #7
 800244c:	9102      	str	r1, [sp, #8]
 800244e:	9201      	str	r2, [sp, #4]
 8002450:	9300      	str	r3, [sp, #0]
 8002452:	462b      	mov	r3, r5
 8002454:	4622      	mov	r2, r4
 8002456:	4601      	mov	r1, r0
 8002458:	4825      	ldr	r0, [pc, #148]	@ (80024f0 <PIN_Setup+0x294>)
 800245a:	f7fe ffaf 	bl	80013bc <GPIO_Pin_Init>
			if((config->mode == USART_Mode.SmartCard_Clock))GPIO_Pin_Init(GPIOA, USART1_CLK_Pin.PA8, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_1);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	7b1b      	ldrb	r3, [r3, #12]
 8002462:	2207      	movs	r2, #7
 8002464:	4293      	cmp	r3, r2
 8002466:	f040 8349 	bne.w	8002afc <PIN_Setup+0x8a0>
 800246a:	2008      	movs	r0, #8
 800246c:	2402      	movs	r4, #2
 800246e:	2500      	movs	r5, #0
 8002470:	2302      	movs	r3, #2
 8002472:	2200      	movs	r2, #0
 8002474:	2107      	movs	r1, #7
 8002476:	9102      	str	r1, [sp, #8]
 8002478:	9201      	str	r2, [sp, #4]
 800247a:	9300      	str	r3, [sp, #0]
 800247c:	462b      	mov	r3, r5
 800247e:	4622      	mov	r2, r4
 8002480:	4601      	mov	r1, r0
 8002482:	481b      	ldr	r0, [pc, #108]	@ (80024f0 <PIN_Setup+0x294>)
 8002484:	f7fe ff9a 	bl	80013bc <GPIO_Pin_Init>
//
//		}
//	}


}
 8002488:	e338      	b.n	8002afc <PIN_Setup+0x8a0>
	else if(config->Port == USART2)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a1a      	ldr	r2, [pc, #104]	@ (80024f8 <PIN_Setup+0x29c>)
 8002490:	4293      	cmp	r3, r2
 8002492:	f040 817b 	bne.w	800278c <PIN_Setup+0x530>
		if((config->mode == USART_Mode.Asynchronous) ||
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	7b1b      	ldrb	r3, [r3, #12]
 800249a:	2201      	movs	r2, #1
 800249c:	4293      	cmp	r3, r2
 800249e:	d00f      	beq.n	80024c0 <PIN_Setup+0x264>
		   (config->mode == USART_Mode.Synchronous) ||
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	7b1b      	ldrb	r3, [r3, #12]
 80024a4:	2202      	movs	r2, #2
		if((config->mode == USART_Mode.Asynchronous) ||
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d00a      	beq.n	80024c0 <PIN_Setup+0x264>
		   (config->mode == USART_Mode.IrDA) ||
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	7b1b      	ldrb	r3, [r3, #12]
 80024ae:	2204      	movs	r2, #4
		   (config->mode == USART_Mode.Synchronous) ||
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d005      	beq.n	80024c0 <PIN_Setup+0x264>
		   (config->mode == USART_Mode.LIN) )
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	7b1b      	ldrb	r3, [r3, #12]
 80024b8:	2205      	movs	r2, #5
		   (config->mode == USART_Mode.IrDA) ||
 80024ba:	4293      	cmp	r3, r2
 80024bc:	f040 80f8 	bne.w	80026b0 <PIN_Setup+0x454>
			if(config->TX_Pin == USART2_TX_Pin.PA2)GPIO_Pin_Init(GPIOA, USART2_TX_Pin.PA2, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	7b5b      	ldrb	r3, [r3, #13]
 80024c4:	2202      	movs	r2, #2
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d118      	bne.n	80024fc <PIN_Setup+0x2a0>
 80024ca:	2002      	movs	r0, #2
 80024cc:	2402      	movs	r4, #2
 80024ce:	2500      	movs	r5, #0
 80024d0:	2302      	movs	r3, #2
 80024d2:	2200      	movs	r2, #0
 80024d4:	2107      	movs	r1, #7
 80024d6:	9102      	str	r1, [sp, #8]
 80024d8:	9201      	str	r2, [sp, #4]
 80024da:	9300      	str	r3, [sp, #0]
 80024dc:	462b      	mov	r3, r5
 80024de:	4622      	mov	r2, r4
 80024e0:	4601      	mov	r1, r0
 80024e2:	4803      	ldr	r0, [pc, #12]	@ (80024f0 <PIN_Setup+0x294>)
 80024e4:	f7fe ff6a 	bl	80013bc <GPIO_Pin_Init>
 80024e8:	e01c      	b.n	8002524 <PIN_Setup+0x2c8>
 80024ea:	bf00      	nop
 80024ec:	40011000 	.word	0x40011000
 80024f0:	40020000 	.word	0x40020000
 80024f4:	40020400 	.word	0x40020400
 80024f8:	40004400 	.word	0x40004400
			else if(config->TX_Pin == USART2_TX_Pin.PD5)GPIO_Pin_Init(GPIOD, USART2_TX_Pin.PD5, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	7b5b      	ldrb	r3, [r3, #13]
 8002500:	2205      	movs	r2, #5
 8002502:	4293      	cmp	r3, r2
 8002504:	d10e      	bne.n	8002524 <PIN_Setup+0x2c8>
 8002506:	2005      	movs	r0, #5
 8002508:	2402      	movs	r4, #2
 800250a:	2500      	movs	r5, #0
 800250c:	2302      	movs	r3, #2
 800250e:	2200      	movs	r2, #0
 8002510:	2107      	movs	r1, #7
 8002512:	9102      	str	r1, [sp, #8]
 8002514:	9201      	str	r2, [sp, #4]
 8002516:	9300      	str	r3, [sp, #0]
 8002518:	462b      	mov	r3, r5
 800251a:	4622      	mov	r2, r4
 800251c:	4601      	mov	r1, r0
 800251e:	4899      	ldr	r0, [pc, #612]	@ (8002784 <PIN_Setup+0x528>)
 8002520:	f7fe ff4c 	bl	80013bc <GPIO_Pin_Init>
			if(config->RX_Pin == USART2_RX_Pin.PA3)GPIO_Pin_Init(GPIOA, USART2_RX_Pin.PA3, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	7b9b      	ldrb	r3, [r3, #14]
 8002528:	2203      	movs	r2, #3
 800252a:	4293      	cmp	r3, r2
 800252c:	d10f      	bne.n	800254e <PIN_Setup+0x2f2>
 800252e:	2003      	movs	r0, #3
 8002530:	2402      	movs	r4, #2
 8002532:	2500      	movs	r5, #0
 8002534:	2302      	movs	r3, #2
 8002536:	2200      	movs	r2, #0
 8002538:	2107      	movs	r1, #7
 800253a:	9102      	str	r1, [sp, #8]
 800253c:	9201      	str	r2, [sp, #4]
 800253e:	9300      	str	r3, [sp, #0]
 8002540:	462b      	mov	r3, r5
 8002542:	4622      	mov	r2, r4
 8002544:	4601      	mov	r1, r0
 8002546:	4890      	ldr	r0, [pc, #576]	@ (8002788 <PIN_Setup+0x52c>)
 8002548:	f7fe ff38 	bl	80013bc <GPIO_Pin_Init>
 800254c:	e013      	b.n	8002576 <PIN_Setup+0x31a>
			else if(config->RX_Pin == USART2_RX_Pin.PD6)GPIO_Pin_Init(GPIOD, USART2_RX_Pin.PD6, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	7b9b      	ldrb	r3, [r3, #14]
 8002552:	2206      	movs	r2, #6
 8002554:	4293      	cmp	r3, r2
 8002556:	d10e      	bne.n	8002576 <PIN_Setup+0x31a>
 8002558:	2006      	movs	r0, #6
 800255a:	2402      	movs	r4, #2
 800255c:	2500      	movs	r5, #0
 800255e:	2302      	movs	r3, #2
 8002560:	2200      	movs	r2, #0
 8002562:	2107      	movs	r1, #7
 8002564:	9102      	str	r1, [sp, #8]
 8002566:	9201      	str	r2, [sp, #4]
 8002568:	9300      	str	r3, [sp, #0]
 800256a:	462b      	mov	r3, r5
 800256c:	4622      	mov	r2, r4
 800256e:	4601      	mov	r1, r0
 8002570:	4884      	ldr	r0, [pc, #528]	@ (8002784 <PIN_Setup+0x528>)
 8002572:	f7fe ff23 	bl	80013bc <GPIO_Pin_Init>
			if((config->mode == USART_Mode.Synchronous)){
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	7b1b      	ldrb	r3, [r3, #12]
 800257a:	2202      	movs	r2, #2
 800257c:	4293      	cmp	r3, r2
 800257e:	d128      	bne.n	80025d2 <PIN_Setup+0x376>
				if(config->CLK_Pin == USART2_CLK_Pin.PA4)GPIO_Pin_Init(GPIOA, USART2_CLK_Pin.PA4, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	7bdb      	ldrb	r3, [r3, #15]
 8002584:	2204      	movs	r2, #4
 8002586:	4293      	cmp	r3, r2
 8002588:	d10f      	bne.n	80025aa <PIN_Setup+0x34e>
 800258a:	2004      	movs	r0, #4
 800258c:	2402      	movs	r4, #2
 800258e:	2500      	movs	r5, #0
 8002590:	2302      	movs	r3, #2
 8002592:	2200      	movs	r2, #0
 8002594:	2107      	movs	r1, #7
 8002596:	9102      	str	r1, [sp, #8]
 8002598:	9201      	str	r2, [sp, #4]
 800259a:	9300      	str	r3, [sp, #0]
 800259c:	462b      	mov	r3, r5
 800259e:	4622      	mov	r2, r4
 80025a0:	4601      	mov	r1, r0
 80025a2:	4879      	ldr	r0, [pc, #484]	@ (8002788 <PIN_Setup+0x52c>)
 80025a4:	f7fe ff0a 	bl	80013bc <GPIO_Pin_Init>
 80025a8:	e013      	b.n	80025d2 <PIN_Setup+0x376>
				else if(config->CLK_Pin == USART2_CLK_Pin.PD7)GPIO_Pin_Init(GPIOA, USART2_CLK_Pin.PD7, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	7bdb      	ldrb	r3, [r3, #15]
 80025ae:	2207      	movs	r2, #7
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d10e      	bne.n	80025d2 <PIN_Setup+0x376>
 80025b4:	2007      	movs	r0, #7
 80025b6:	2402      	movs	r4, #2
 80025b8:	2500      	movs	r5, #0
 80025ba:	2302      	movs	r3, #2
 80025bc:	2200      	movs	r2, #0
 80025be:	2107      	movs	r1, #7
 80025c0:	9102      	str	r1, [sp, #8]
 80025c2:	9201      	str	r2, [sp, #4]
 80025c4:	9300      	str	r3, [sp, #0]
 80025c6:	462b      	mov	r3, r5
 80025c8:	4622      	mov	r2, r4
 80025ca:	4601      	mov	r1, r0
 80025cc:	486e      	ldr	r0, [pc, #440]	@ (8002788 <PIN_Setup+0x52c>)
 80025ce:	f7fe fef5 	bl	80013bc <GPIO_Pin_Init>
			if((config->hardware_flow != Hardware_Flow.Disable) || (config->hardware_flow == Hardware_Flow.CTS_RTS_Enable))
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	7cdb      	ldrb	r3, [r3, #19]
 80025d6:	2200      	movs	r2, #0
 80025d8:	4293      	cmp	r3, r2
 80025da:	d105      	bne.n	80025e8 <PIN_Setup+0x38c>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	7cdb      	ldrb	r3, [r3, #19]
 80025e0:	2203      	movs	r2, #3
 80025e2:	4293      	cmp	r3, r2
 80025e4:	f040 8287 	bne.w	8002af6 <PIN_Setup+0x89a>
				if(config->hardware_flow == Hardware_Flow.CTS_Enable)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	7cdb      	ldrb	r3, [r3, #19]
 80025ec:	2201      	movs	r2, #1
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d128      	bne.n	8002644 <PIN_Setup+0x3e8>
					if(config->CLK_Pin == USART2_CTS_Pin.PA0)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	7bdb      	ldrb	r3, [r3, #15]
 80025f6:	2200      	movs	r2, #0
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d10f      	bne.n	800261c <PIN_Setup+0x3c0>
						GPIO_Pin_Init(GPIOA, USART2_CTS_Pin.PA0, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 80025fc:	2000      	movs	r0, #0
 80025fe:	2402      	movs	r4, #2
 8002600:	2500      	movs	r5, #0
 8002602:	2302      	movs	r3, #2
 8002604:	2200      	movs	r2, #0
 8002606:	2107      	movs	r1, #7
 8002608:	9102      	str	r1, [sp, #8]
 800260a:	9201      	str	r2, [sp, #4]
 800260c:	9300      	str	r3, [sp, #0]
 800260e:	462b      	mov	r3, r5
 8002610:	4622      	mov	r2, r4
 8002612:	4601      	mov	r1, r0
 8002614:	485c      	ldr	r0, [pc, #368]	@ (8002788 <PIN_Setup+0x52c>)
 8002616:	f7fe fed1 	bl	80013bc <GPIO_Pin_Init>
 800261a:	e013      	b.n	8002644 <PIN_Setup+0x3e8>
					else if(config->CLK_Pin == USART2_CTS_Pin.PD3)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	7bdb      	ldrb	r3, [r3, #15]
 8002620:	2203      	movs	r2, #3
 8002622:	4293      	cmp	r3, r2
 8002624:	d10e      	bne.n	8002644 <PIN_Setup+0x3e8>
						GPIO_Pin_Init(GPIOD, USART2_CTS_Pin.PD3, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 8002626:	2003      	movs	r0, #3
 8002628:	2402      	movs	r4, #2
 800262a:	2500      	movs	r5, #0
 800262c:	2302      	movs	r3, #2
 800262e:	2200      	movs	r2, #0
 8002630:	2107      	movs	r1, #7
 8002632:	9102      	str	r1, [sp, #8]
 8002634:	9201      	str	r2, [sp, #4]
 8002636:	9300      	str	r3, [sp, #0]
 8002638:	462b      	mov	r3, r5
 800263a:	4622      	mov	r2, r4
 800263c:	4601      	mov	r1, r0
 800263e:	4851      	ldr	r0, [pc, #324]	@ (8002784 <PIN_Setup+0x528>)
 8002640:	f7fe febc 	bl	80013bc <GPIO_Pin_Init>
				if((config->hardware_flow == Hardware_Flow.RTS_Enable) || (config->hardware_flow == Hardware_Flow.CTS_RTS_Enable))
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	7cdb      	ldrb	r3, [r3, #19]
 8002648:	2202      	movs	r2, #2
 800264a:	4293      	cmp	r3, r2
 800264c:	d005      	beq.n	800265a <PIN_Setup+0x3fe>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	7cdb      	ldrb	r3, [r3, #19]
 8002652:	2203      	movs	r2, #3
 8002654:	4293      	cmp	r3, r2
 8002656:	f040 824e 	bne.w	8002af6 <PIN_Setup+0x89a>
					if(config->CLK_Pin == USART2_RTS_Pin.PA1)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	7bdb      	ldrb	r3, [r3, #15]
 800265e:	2201      	movs	r2, #1
 8002660:	4293      	cmp	r3, r2
 8002662:	d10f      	bne.n	8002684 <PIN_Setup+0x428>
						GPIO_Pin_Init(GPIOA, USART2_RTS_Pin.PA1, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 8002664:	2001      	movs	r0, #1
 8002666:	2402      	movs	r4, #2
 8002668:	2500      	movs	r5, #0
 800266a:	2302      	movs	r3, #2
 800266c:	2200      	movs	r2, #0
 800266e:	2107      	movs	r1, #7
 8002670:	9102      	str	r1, [sp, #8]
 8002672:	9201      	str	r2, [sp, #4]
 8002674:	9300      	str	r3, [sp, #0]
 8002676:	462b      	mov	r3, r5
 8002678:	4622      	mov	r2, r4
 800267a:	4601      	mov	r1, r0
 800267c:	4842      	ldr	r0, [pc, #264]	@ (8002788 <PIN_Setup+0x52c>)
 800267e:	f7fe fe9d 	bl	80013bc <GPIO_Pin_Init>
			if((config->hardware_flow != Hardware_Flow.Disable) || (config->hardware_flow == Hardware_Flow.CTS_RTS_Enable))
 8002682:	e238      	b.n	8002af6 <PIN_Setup+0x89a>
					else if(config->CLK_Pin == USART2_RTS_Pin.PD4)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	7bdb      	ldrb	r3, [r3, #15]
 8002688:	2204      	movs	r2, #4
 800268a:	4293      	cmp	r3, r2
 800268c:	f040 8233 	bne.w	8002af6 <PIN_Setup+0x89a>
						GPIO_Pin_Init(GPIOD, USART2_RTS_Pin.PD4, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 8002690:	2004      	movs	r0, #4
 8002692:	2402      	movs	r4, #2
 8002694:	2500      	movs	r5, #0
 8002696:	2302      	movs	r3, #2
 8002698:	2200      	movs	r2, #0
 800269a:	2107      	movs	r1, #7
 800269c:	9102      	str	r1, [sp, #8]
 800269e:	9201      	str	r2, [sp, #4]
 80026a0:	9300      	str	r3, [sp, #0]
 80026a2:	462b      	mov	r3, r5
 80026a4:	4622      	mov	r2, r4
 80026a6:	4601      	mov	r1, r0
 80026a8:	4836      	ldr	r0, [pc, #216]	@ (8002784 <PIN_Setup+0x528>)
 80026aa:	f7fe fe87 	bl	80013bc <GPIO_Pin_Init>
			if((config->hardware_flow != Hardware_Flow.Disable) || (config->hardware_flow == Hardware_Flow.CTS_RTS_Enable))
 80026ae:	e222      	b.n	8002af6 <PIN_Setup+0x89a>
		else if((config->mode == USART_Mode.SmartCard) ||
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	7b1b      	ldrb	r3, [r3, #12]
 80026b4:	2206      	movs	r2, #6
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d00a      	beq.n	80026d0 <PIN_Setup+0x474>
		   (config->mode == USART_Mode.SmartCard_Clock) ||
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	7b1b      	ldrb	r3, [r3, #12]
 80026be:	2207      	movs	r2, #7
		else if((config->mode == USART_Mode.SmartCard) ||
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d005      	beq.n	80026d0 <PIN_Setup+0x474>
		   (config->mode == USART_Mode.Single_Wire_Half_Duplex))
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	7b1b      	ldrb	r3, [r3, #12]
 80026c8:	2203      	movs	r2, #3
		   (config->mode == USART_Mode.SmartCard_Clock) ||
 80026ca:	4293      	cmp	r3, r2
 80026cc:	f040 8216 	bne.w	8002afc <PIN_Setup+0x8a0>
			if(config->TX_Pin == USART2_TX_Pin.PA2)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	7b5b      	ldrb	r3, [r3, #13]
 80026d4:	2202      	movs	r2, #2
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d10f      	bne.n	80026fa <PIN_Setup+0x49e>
				GPIO_Pin_Init(GPIOA, USART2_TX_Pin.PA2, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 80026da:	2002      	movs	r0, #2
 80026dc:	2402      	movs	r4, #2
 80026de:	2500      	movs	r5, #0
 80026e0:	2302      	movs	r3, #2
 80026e2:	2200      	movs	r2, #0
 80026e4:	2107      	movs	r1, #7
 80026e6:	9102      	str	r1, [sp, #8]
 80026e8:	9201      	str	r2, [sp, #4]
 80026ea:	9300      	str	r3, [sp, #0]
 80026ec:	462b      	mov	r3, r5
 80026ee:	4622      	mov	r2, r4
 80026f0:	4601      	mov	r1, r0
 80026f2:	4825      	ldr	r0, [pc, #148]	@ (8002788 <PIN_Setup+0x52c>)
 80026f4:	f7fe fe62 	bl	80013bc <GPIO_Pin_Init>
 80026f8:	e013      	b.n	8002722 <PIN_Setup+0x4c6>
			else if(config->TX_Pin == USART2_TX_Pin.PD5)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	7b5b      	ldrb	r3, [r3, #13]
 80026fe:	2205      	movs	r2, #5
 8002700:	4293      	cmp	r3, r2
 8002702:	d10e      	bne.n	8002722 <PIN_Setup+0x4c6>
				GPIO_Pin_Init(GPIOD, USART2_TX_Pin.PD5, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 8002704:	2005      	movs	r0, #5
 8002706:	2402      	movs	r4, #2
 8002708:	2500      	movs	r5, #0
 800270a:	2302      	movs	r3, #2
 800270c:	2200      	movs	r2, #0
 800270e:	2107      	movs	r1, #7
 8002710:	9102      	str	r1, [sp, #8]
 8002712:	9201      	str	r2, [sp, #4]
 8002714:	9300      	str	r3, [sp, #0]
 8002716:	462b      	mov	r3, r5
 8002718:	4622      	mov	r2, r4
 800271a:	4601      	mov	r1, r0
 800271c:	4819      	ldr	r0, [pc, #100]	@ (8002784 <PIN_Setup+0x528>)
 800271e:	f7fe fe4d 	bl	80013bc <GPIO_Pin_Init>
			if((config->mode == USART_Mode.SmartCard_Clock))
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	7b1b      	ldrb	r3, [r3, #12]
 8002726:	2207      	movs	r2, #7
 8002728:	4293      	cmp	r3, r2
 800272a:	f040 81e7 	bne.w	8002afc <PIN_Setup+0x8a0>
				if(config->CLK_Pin == USART2_CLK_Pin.PA4)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	7bdb      	ldrb	r3, [r3, #15]
 8002732:	2204      	movs	r2, #4
 8002734:	4293      	cmp	r3, r2
 8002736:	d10f      	bne.n	8002758 <PIN_Setup+0x4fc>
					GPIO_Pin_Init(GPIOA, USART2_CLK_Pin.PA4, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 8002738:	2004      	movs	r0, #4
 800273a:	2402      	movs	r4, #2
 800273c:	2500      	movs	r5, #0
 800273e:	2302      	movs	r3, #2
 8002740:	2200      	movs	r2, #0
 8002742:	2107      	movs	r1, #7
 8002744:	9102      	str	r1, [sp, #8]
 8002746:	9201      	str	r2, [sp, #4]
 8002748:	9300      	str	r3, [sp, #0]
 800274a:	462b      	mov	r3, r5
 800274c:	4622      	mov	r2, r4
 800274e:	4601      	mov	r1, r0
 8002750:	480d      	ldr	r0, [pc, #52]	@ (8002788 <PIN_Setup+0x52c>)
 8002752:	f7fe fe33 	bl	80013bc <GPIO_Pin_Init>
}
 8002756:	e1d1      	b.n	8002afc <PIN_Setup+0x8a0>
				else if(config->CLK_Pin == USART2_CLK_Pin.PD7)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	7bdb      	ldrb	r3, [r3, #15]
 800275c:	2207      	movs	r2, #7
 800275e:	4293      	cmp	r3, r2
 8002760:	f040 81cc 	bne.w	8002afc <PIN_Setup+0x8a0>
					GPIO_Pin_Init(GPIOA, USART2_CLK_Pin.PD7, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 8002764:	2007      	movs	r0, #7
 8002766:	2402      	movs	r4, #2
 8002768:	2500      	movs	r5, #0
 800276a:	2302      	movs	r3, #2
 800276c:	2200      	movs	r2, #0
 800276e:	2107      	movs	r1, #7
 8002770:	9102      	str	r1, [sp, #8]
 8002772:	9201      	str	r2, [sp, #4]
 8002774:	9300      	str	r3, [sp, #0]
 8002776:	462b      	mov	r3, r5
 8002778:	4622      	mov	r2, r4
 800277a:	4601      	mov	r1, r0
 800277c:	4802      	ldr	r0, [pc, #8]	@ (8002788 <PIN_Setup+0x52c>)
 800277e:	f7fe fe1d 	bl	80013bc <GPIO_Pin_Init>
}
 8002782:	e1bb      	b.n	8002afc <PIN_Setup+0x8a0>
 8002784:	40020c00 	.word	0x40020c00
 8002788:	40020000 	.word	0x40020000
	else if(config->Port == USART3)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4aaa      	ldr	r2, [pc, #680]	@ (8002a3c <PIN_Setup+0x7e0>)
 8002792:	4293      	cmp	r3, r2
 8002794:	f040 81b2 	bne.w	8002afc <PIN_Setup+0x8a0>
		if((config->mode == USART_Mode.Asynchronous) ||
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	7b1b      	ldrb	r3, [r3, #12]
 800279c:	2201      	movs	r2, #1
 800279e:	4293      	cmp	r3, r2
 80027a0:	d00f      	beq.n	80027c2 <PIN_Setup+0x566>
		   (config->mode == USART_Mode.Synchronous) ||
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	7b1b      	ldrb	r3, [r3, #12]
 80027a6:	2202      	movs	r2, #2
		if((config->mode == USART_Mode.Asynchronous) ||
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d00a      	beq.n	80027c2 <PIN_Setup+0x566>
		   (config->mode == USART_Mode.IrDA) ||
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	7b1b      	ldrb	r3, [r3, #12]
 80027b0:	2204      	movs	r2, #4
		   (config->mode == USART_Mode.Synchronous) ||
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d005      	beq.n	80027c2 <PIN_Setup+0x566>
		   (config->mode == USART_Mode.LIN) )
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	7b1b      	ldrb	r3, [r3, #12]
 80027ba:	2205      	movs	r2, #5
		   (config->mode == USART_Mode.IrDA) ||
 80027bc:	4293      	cmp	r3, r2
 80027be:	f040 8119 	bne.w	80029f4 <PIN_Setup+0x798>
			if(config->TX_Pin == USART3_TX_Pin.PB11)GPIO_Pin_Init(GPIOA, USART3_TX_Pin.PB11, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	7b5b      	ldrb	r3, [r3, #13]
 80027c6:	220b      	movs	r2, #11
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d10f      	bne.n	80027ec <PIN_Setup+0x590>
 80027cc:	200b      	movs	r0, #11
 80027ce:	2402      	movs	r4, #2
 80027d0:	2500      	movs	r5, #0
 80027d2:	2302      	movs	r3, #2
 80027d4:	2200      	movs	r2, #0
 80027d6:	2107      	movs	r1, #7
 80027d8:	9102      	str	r1, [sp, #8]
 80027da:	9201      	str	r2, [sp, #4]
 80027dc:	9300      	str	r3, [sp, #0]
 80027de:	462b      	mov	r3, r5
 80027e0:	4622      	mov	r2, r4
 80027e2:	4601      	mov	r1, r0
 80027e4:	4896      	ldr	r0, [pc, #600]	@ (8002a40 <PIN_Setup+0x7e4>)
 80027e6:	f7fe fde9 	bl	80013bc <GPIO_Pin_Init>
 80027ea:	e028      	b.n	800283e <PIN_Setup+0x5e2>
			else if(config->TX_Pin == USART3_TX_Pin.PC10)GPIO_Pin_Init(GPIOB, USART3_TX_Pin.PC10, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	7b5b      	ldrb	r3, [r3, #13]
 80027f0:	220a      	movs	r2, #10
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d10f      	bne.n	8002816 <PIN_Setup+0x5ba>
 80027f6:	200a      	movs	r0, #10
 80027f8:	2402      	movs	r4, #2
 80027fa:	2500      	movs	r5, #0
 80027fc:	2302      	movs	r3, #2
 80027fe:	2200      	movs	r2, #0
 8002800:	2107      	movs	r1, #7
 8002802:	9102      	str	r1, [sp, #8]
 8002804:	9201      	str	r2, [sp, #4]
 8002806:	9300      	str	r3, [sp, #0]
 8002808:	462b      	mov	r3, r5
 800280a:	4622      	mov	r2, r4
 800280c:	4601      	mov	r1, r0
 800280e:	488d      	ldr	r0, [pc, #564]	@ (8002a44 <PIN_Setup+0x7e8>)
 8002810:	f7fe fdd4 	bl	80013bc <GPIO_Pin_Init>
 8002814:	e013      	b.n	800283e <PIN_Setup+0x5e2>
			else if(config->TX_Pin == USART3_TX_Pin.PD8)GPIO_Pin_Init(GPIOB, USART3_TX_Pin.PD8, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	7b5b      	ldrb	r3, [r3, #13]
 800281a:	2208      	movs	r2, #8
 800281c:	4293      	cmp	r3, r2
 800281e:	d10e      	bne.n	800283e <PIN_Setup+0x5e2>
 8002820:	2008      	movs	r0, #8
 8002822:	2402      	movs	r4, #2
 8002824:	2500      	movs	r5, #0
 8002826:	2302      	movs	r3, #2
 8002828:	2200      	movs	r2, #0
 800282a:	2107      	movs	r1, #7
 800282c:	9102      	str	r1, [sp, #8]
 800282e:	9201      	str	r2, [sp, #4]
 8002830:	9300      	str	r3, [sp, #0]
 8002832:	462b      	mov	r3, r5
 8002834:	4622      	mov	r2, r4
 8002836:	4601      	mov	r1, r0
 8002838:	4882      	ldr	r0, [pc, #520]	@ (8002a44 <PIN_Setup+0x7e8>)
 800283a:	f7fe fdbf 	bl	80013bc <GPIO_Pin_Init>
			if(config->RX_Pin == USART3_RX_Pin.PB10)GPIO_Pin_Init(GPIOA, USART3_RX_Pin.PB10, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	7b9b      	ldrb	r3, [r3, #14]
 8002842:	220a      	movs	r2, #10
 8002844:	4293      	cmp	r3, r2
 8002846:	d10f      	bne.n	8002868 <PIN_Setup+0x60c>
 8002848:	200a      	movs	r0, #10
 800284a:	2402      	movs	r4, #2
 800284c:	2500      	movs	r5, #0
 800284e:	2302      	movs	r3, #2
 8002850:	2200      	movs	r2, #0
 8002852:	2107      	movs	r1, #7
 8002854:	9102      	str	r1, [sp, #8]
 8002856:	9201      	str	r2, [sp, #4]
 8002858:	9300      	str	r3, [sp, #0]
 800285a:	462b      	mov	r3, r5
 800285c:	4622      	mov	r2, r4
 800285e:	4601      	mov	r1, r0
 8002860:	4877      	ldr	r0, [pc, #476]	@ (8002a40 <PIN_Setup+0x7e4>)
 8002862:	f7fe fdab 	bl	80013bc <GPIO_Pin_Init>
 8002866:	e028      	b.n	80028ba <PIN_Setup+0x65e>
			else if(config->RX_Pin == USART3_RX_Pin.PC11)GPIO_Pin_Init(GPIOB, USART3_RX_Pin.PC11, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	7b9b      	ldrb	r3, [r3, #14]
 800286c:	220b      	movs	r2, #11
 800286e:	4293      	cmp	r3, r2
 8002870:	d10f      	bne.n	8002892 <PIN_Setup+0x636>
 8002872:	200b      	movs	r0, #11
 8002874:	2402      	movs	r4, #2
 8002876:	2500      	movs	r5, #0
 8002878:	2302      	movs	r3, #2
 800287a:	2200      	movs	r2, #0
 800287c:	2107      	movs	r1, #7
 800287e:	9102      	str	r1, [sp, #8]
 8002880:	9201      	str	r2, [sp, #4]
 8002882:	9300      	str	r3, [sp, #0]
 8002884:	462b      	mov	r3, r5
 8002886:	4622      	mov	r2, r4
 8002888:	4601      	mov	r1, r0
 800288a:	486e      	ldr	r0, [pc, #440]	@ (8002a44 <PIN_Setup+0x7e8>)
 800288c:	f7fe fd96 	bl	80013bc <GPIO_Pin_Init>
 8002890:	e013      	b.n	80028ba <PIN_Setup+0x65e>
			else if(config->TX_Pin == USART3_TX_Pin.PD8)GPIO_Pin_Init(GPIOB, USART3_TX_Pin.PD8, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	7b5b      	ldrb	r3, [r3, #13]
 8002896:	2208      	movs	r2, #8
 8002898:	4293      	cmp	r3, r2
 800289a:	d10e      	bne.n	80028ba <PIN_Setup+0x65e>
 800289c:	2008      	movs	r0, #8
 800289e:	2402      	movs	r4, #2
 80028a0:	2500      	movs	r5, #0
 80028a2:	2302      	movs	r3, #2
 80028a4:	2200      	movs	r2, #0
 80028a6:	2107      	movs	r1, #7
 80028a8:	9102      	str	r1, [sp, #8]
 80028aa:	9201      	str	r2, [sp, #4]
 80028ac:	9300      	str	r3, [sp, #0]
 80028ae:	462b      	mov	r3, r5
 80028b0:	4622      	mov	r2, r4
 80028b2:	4601      	mov	r1, r0
 80028b4:	4863      	ldr	r0, [pc, #396]	@ (8002a44 <PIN_Setup+0x7e8>)
 80028b6:	f7fe fd81 	bl	80013bc <GPIO_Pin_Init>
			if((config->mode == USART_Mode.Synchronous))
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	7b1b      	ldrb	r3, [r3, #12]
 80028be:	2202      	movs	r2, #2
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d128      	bne.n	8002916 <PIN_Setup+0x6ba>
				if(config->CLK_Pin == USART3_CLK_Pin.PB12)GPIO_Pin_Init(GPIOB, USART3_CLK_Pin.PB12, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	7bdb      	ldrb	r3, [r3, #15]
 80028c8:	220c      	movs	r2, #12
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d10f      	bne.n	80028ee <PIN_Setup+0x692>
 80028ce:	200c      	movs	r0, #12
 80028d0:	2402      	movs	r4, #2
 80028d2:	2500      	movs	r5, #0
 80028d4:	2302      	movs	r3, #2
 80028d6:	2200      	movs	r2, #0
 80028d8:	2107      	movs	r1, #7
 80028da:	9102      	str	r1, [sp, #8]
 80028dc:	9201      	str	r2, [sp, #4]
 80028de:	9300      	str	r3, [sp, #0]
 80028e0:	462b      	mov	r3, r5
 80028e2:	4622      	mov	r2, r4
 80028e4:	4601      	mov	r1, r0
 80028e6:	4857      	ldr	r0, [pc, #348]	@ (8002a44 <PIN_Setup+0x7e8>)
 80028e8:	f7fe fd68 	bl	80013bc <GPIO_Pin_Init>
 80028ec:	e013      	b.n	8002916 <PIN_Setup+0x6ba>
				else if(config->CLK_Pin == USART3_CLK_Pin.PD10)GPIO_Pin_Init(GPIOD, USART3_CLK_Pin.PD10, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	7bdb      	ldrb	r3, [r3, #15]
 80028f2:	220a      	movs	r2, #10
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d10e      	bne.n	8002916 <PIN_Setup+0x6ba>
 80028f8:	200a      	movs	r0, #10
 80028fa:	2402      	movs	r4, #2
 80028fc:	2500      	movs	r5, #0
 80028fe:	2302      	movs	r3, #2
 8002900:	2200      	movs	r2, #0
 8002902:	2107      	movs	r1, #7
 8002904:	9102      	str	r1, [sp, #8]
 8002906:	9201      	str	r2, [sp, #4]
 8002908:	9300      	str	r3, [sp, #0]
 800290a:	462b      	mov	r3, r5
 800290c:	4622      	mov	r2, r4
 800290e:	4601      	mov	r1, r0
 8002910:	484d      	ldr	r0, [pc, #308]	@ (8002a48 <PIN_Setup+0x7ec>)
 8002912:	f7fe fd53 	bl	80013bc <GPIO_Pin_Init>
			if(config->hardware_flow != Hardware_Flow.Disable)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	7cdb      	ldrb	r3, [r3, #19]
 800291a:	2200      	movs	r2, #0
 800291c:	4293      	cmp	r3, r2
 800291e:	f000 80ec 	beq.w	8002afa <PIN_Setup+0x89e>
				if((config->hardware_flow == Hardware_Flow.CTS_Enable) || (config->hardware_flow == Hardware_Flow.CTS_RTS_Enable))
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	7cdb      	ldrb	r3, [r3, #19]
 8002926:	2201      	movs	r2, #1
 8002928:	4293      	cmp	r3, r2
 800292a:	d004      	beq.n	8002936 <PIN_Setup+0x6da>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	7cdb      	ldrb	r3, [r3, #19]
 8002930:	2203      	movs	r2, #3
 8002932:	4293      	cmp	r3, r2
 8002934:	d128      	bne.n	8002988 <PIN_Setup+0x72c>
					if(config->CLK_Pin == USART3_CTS_Pin.PB13)GPIO_Pin_Init(GPIOB, USART3_CTS_Pin.PB13, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	7bdb      	ldrb	r3, [r3, #15]
 800293a:	2200      	movs	r2, #0
 800293c:	4293      	cmp	r3, r2
 800293e:	d10f      	bne.n	8002960 <PIN_Setup+0x704>
 8002940:	2000      	movs	r0, #0
 8002942:	2402      	movs	r4, #2
 8002944:	2500      	movs	r5, #0
 8002946:	2302      	movs	r3, #2
 8002948:	2200      	movs	r2, #0
 800294a:	2107      	movs	r1, #7
 800294c:	9102      	str	r1, [sp, #8]
 800294e:	9201      	str	r2, [sp, #4]
 8002950:	9300      	str	r3, [sp, #0]
 8002952:	462b      	mov	r3, r5
 8002954:	4622      	mov	r2, r4
 8002956:	4601      	mov	r1, r0
 8002958:	483a      	ldr	r0, [pc, #232]	@ (8002a44 <PIN_Setup+0x7e8>)
 800295a:	f7fe fd2f 	bl	80013bc <GPIO_Pin_Init>
 800295e:	e013      	b.n	8002988 <PIN_Setup+0x72c>
					else if(config->CLK_Pin == USART3_CTS_Pin.PD11)GPIO_Pin_Init(GPIOD, USART3_CTS_Pin.PD11, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	7bdb      	ldrb	r3, [r3, #15]
 8002964:	2203      	movs	r2, #3
 8002966:	4293      	cmp	r3, r2
 8002968:	d10e      	bne.n	8002988 <PIN_Setup+0x72c>
 800296a:	2003      	movs	r0, #3
 800296c:	2402      	movs	r4, #2
 800296e:	2500      	movs	r5, #0
 8002970:	2302      	movs	r3, #2
 8002972:	2200      	movs	r2, #0
 8002974:	2107      	movs	r1, #7
 8002976:	9102      	str	r1, [sp, #8]
 8002978:	9201      	str	r2, [sp, #4]
 800297a:	9300      	str	r3, [sp, #0]
 800297c:	462b      	mov	r3, r5
 800297e:	4622      	mov	r2, r4
 8002980:	4601      	mov	r1, r0
 8002982:	4831      	ldr	r0, [pc, #196]	@ (8002a48 <PIN_Setup+0x7ec>)
 8002984:	f7fe fd1a 	bl	80013bc <GPIO_Pin_Init>
				if((config->hardware_flow == Hardware_Flow.RTS_Enable) || (config->hardware_flow == Hardware_Flow.CTS_RTS_Enable))
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	7cdb      	ldrb	r3, [r3, #19]
 800298c:	2202      	movs	r2, #2
 800298e:	4293      	cmp	r3, r2
 8002990:	d005      	beq.n	800299e <PIN_Setup+0x742>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	7cdb      	ldrb	r3, [r3, #19]
 8002996:	2203      	movs	r2, #3
 8002998:	4293      	cmp	r3, r2
 800299a:	f040 80ae 	bne.w	8002afa <PIN_Setup+0x89e>
					if(config->CLK_Pin == USART3_RTS_Pin.PB14)GPIO_Pin_Init(GPIOB, USART3_RTS_Pin.PB14, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	7bdb      	ldrb	r3, [r3, #15]
 80029a2:	2201      	movs	r2, #1
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d10f      	bne.n	80029c8 <PIN_Setup+0x76c>
 80029a8:	2001      	movs	r0, #1
 80029aa:	2402      	movs	r4, #2
 80029ac:	2500      	movs	r5, #0
 80029ae:	2302      	movs	r3, #2
 80029b0:	2200      	movs	r2, #0
 80029b2:	2107      	movs	r1, #7
 80029b4:	9102      	str	r1, [sp, #8]
 80029b6:	9201      	str	r2, [sp, #4]
 80029b8:	9300      	str	r3, [sp, #0]
 80029ba:	462b      	mov	r3, r5
 80029bc:	4622      	mov	r2, r4
 80029be:	4601      	mov	r1, r0
 80029c0:	4820      	ldr	r0, [pc, #128]	@ (8002a44 <PIN_Setup+0x7e8>)
 80029c2:	f7fe fcfb 	bl	80013bc <GPIO_Pin_Init>
			if(config->hardware_flow != Hardware_Flow.Disable)
 80029c6:	e098      	b.n	8002afa <PIN_Setup+0x89e>
					else if(config->CLK_Pin == USART3_RTS_Pin.PD12)GPIO_Pin_Init(GPIOD, USART3_RTS_Pin.PD12, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	7bdb      	ldrb	r3, [r3, #15]
 80029cc:	2204      	movs	r2, #4
 80029ce:	4293      	cmp	r3, r2
 80029d0:	f040 8093 	bne.w	8002afa <PIN_Setup+0x89e>
 80029d4:	2004      	movs	r0, #4
 80029d6:	2402      	movs	r4, #2
 80029d8:	2500      	movs	r5, #0
 80029da:	2302      	movs	r3, #2
 80029dc:	2200      	movs	r2, #0
 80029de:	2107      	movs	r1, #7
 80029e0:	9102      	str	r1, [sp, #8]
 80029e2:	9201      	str	r2, [sp, #4]
 80029e4:	9300      	str	r3, [sp, #0]
 80029e6:	462b      	mov	r3, r5
 80029e8:	4622      	mov	r2, r4
 80029ea:	4601      	mov	r1, r0
 80029ec:	4816      	ldr	r0, [pc, #88]	@ (8002a48 <PIN_Setup+0x7ec>)
 80029ee:	f7fe fce5 	bl	80013bc <GPIO_Pin_Init>
			if(config->hardware_flow != Hardware_Flow.Disable)
 80029f2:	e082      	b.n	8002afa <PIN_Setup+0x89e>
		else if((config->mode == USART_Mode.SmartCard) ||
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	7b1b      	ldrb	r3, [r3, #12]
 80029f8:	2206      	movs	r2, #6
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d009      	beq.n	8002a12 <PIN_Setup+0x7b6>
		   (config->mode == USART_Mode.SmartCard_Clock) ||
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	7b1b      	ldrb	r3, [r3, #12]
 8002a02:	2207      	movs	r2, #7
		else if((config->mode == USART_Mode.SmartCard) ||
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d004      	beq.n	8002a12 <PIN_Setup+0x7b6>
		   (config->mode == USART_Mode.Single_Wire_Half_Duplex) )
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	7b1b      	ldrb	r3, [r3, #12]
 8002a0c:	2203      	movs	r2, #3
		   (config->mode == USART_Mode.SmartCard_Clock) ||
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d174      	bne.n	8002afc <PIN_Setup+0x8a0>
			if(config->TX_Pin == USART3_TX_Pin.PB11)GPIO_Pin_Init(GPIOA, USART3_TX_Pin.PB11, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	7b5b      	ldrb	r3, [r3, #13]
 8002a16:	220b      	movs	r2, #11
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d117      	bne.n	8002a4c <PIN_Setup+0x7f0>
 8002a1c:	200b      	movs	r0, #11
 8002a1e:	2402      	movs	r4, #2
 8002a20:	2500      	movs	r5, #0
 8002a22:	2302      	movs	r3, #2
 8002a24:	2200      	movs	r2, #0
 8002a26:	2107      	movs	r1, #7
 8002a28:	9102      	str	r1, [sp, #8]
 8002a2a:	9201      	str	r2, [sp, #4]
 8002a2c:	9300      	str	r3, [sp, #0]
 8002a2e:	462b      	mov	r3, r5
 8002a30:	4622      	mov	r2, r4
 8002a32:	4601      	mov	r1, r0
 8002a34:	4802      	ldr	r0, [pc, #8]	@ (8002a40 <PIN_Setup+0x7e4>)
 8002a36:	f7fe fcc1 	bl	80013bc <GPIO_Pin_Init>
 8002a3a:	e030      	b.n	8002a9e <PIN_Setup+0x842>
 8002a3c:	40004800 	.word	0x40004800
 8002a40:	40020000 	.word	0x40020000
 8002a44:	40020400 	.word	0x40020400
 8002a48:	40020c00 	.word	0x40020c00
			else if(config->TX_Pin == USART3_TX_Pin.PC10)GPIO_Pin_Init(GPIOB, USART3_TX_Pin.PC10, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	7b5b      	ldrb	r3, [r3, #13]
 8002a50:	220a      	movs	r2, #10
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d10f      	bne.n	8002a76 <PIN_Setup+0x81a>
 8002a56:	200a      	movs	r0, #10
 8002a58:	2402      	movs	r4, #2
 8002a5a:	2500      	movs	r5, #0
 8002a5c:	2302      	movs	r3, #2
 8002a5e:	2200      	movs	r2, #0
 8002a60:	2107      	movs	r1, #7
 8002a62:	9102      	str	r1, [sp, #8]
 8002a64:	9201      	str	r2, [sp, #4]
 8002a66:	9300      	str	r3, [sp, #0]
 8002a68:	462b      	mov	r3, r5
 8002a6a:	4622      	mov	r2, r4
 8002a6c:	4601      	mov	r1, r0
 8002a6e:	4825      	ldr	r0, [pc, #148]	@ (8002b04 <PIN_Setup+0x8a8>)
 8002a70:	f7fe fca4 	bl	80013bc <GPIO_Pin_Init>
 8002a74:	e013      	b.n	8002a9e <PIN_Setup+0x842>
			else if(config->TX_Pin == USART3_TX_Pin.PD8)GPIO_Pin_Init(GPIOB, USART3_TX_Pin.PD8, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	7b5b      	ldrb	r3, [r3, #13]
 8002a7a:	2208      	movs	r2, #8
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d10e      	bne.n	8002a9e <PIN_Setup+0x842>
 8002a80:	2008      	movs	r0, #8
 8002a82:	2402      	movs	r4, #2
 8002a84:	2500      	movs	r5, #0
 8002a86:	2302      	movs	r3, #2
 8002a88:	2200      	movs	r2, #0
 8002a8a:	2107      	movs	r1, #7
 8002a8c:	9102      	str	r1, [sp, #8]
 8002a8e:	9201      	str	r2, [sp, #4]
 8002a90:	9300      	str	r3, [sp, #0]
 8002a92:	462b      	mov	r3, r5
 8002a94:	4622      	mov	r2, r4
 8002a96:	4601      	mov	r1, r0
 8002a98:	481a      	ldr	r0, [pc, #104]	@ (8002b04 <PIN_Setup+0x8a8>)
 8002a9a:	f7fe fc8f 	bl	80013bc <GPIO_Pin_Init>
			if(config->CLK_Pin == USART3_CLK_Pin.PB12)GPIO_Pin_Init(GPIOB, USART3_CLK_Pin.PB12, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	7bdb      	ldrb	r3, [r3, #15]
 8002aa2:	220c      	movs	r2, #12
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d10f      	bne.n	8002ac8 <PIN_Setup+0x86c>
 8002aa8:	200c      	movs	r0, #12
 8002aaa:	2402      	movs	r4, #2
 8002aac:	2500      	movs	r5, #0
 8002aae:	2302      	movs	r3, #2
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	2107      	movs	r1, #7
 8002ab4:	9102      	str	r1, [sp, #8]
 8002ab6:	9201      	str	r2, [sp, #4]
 8002ab8:	9300      	str	r3, [sp, #0]
 8002aba:	462b      	mov	r3, r5
 8002abc:	4622      	mov	r2, r4
 8002abe:	4601      	mov	r1, r0
 8002ac0:	4810      	ldr	r0, [pc, #64]	@ (8002b04 <PIN_Setup+0x8a8>)
 8002ac2:	f7fe fc7b 	bl	80013bc <GPIO_Pin_Init>
}
 8002ac6:	e019      	b.n	8002afc <PIN_Setup+0x8a0>
			else if(config->CLK_Pin == USART3_CLK_Pin.PD10)GPIO_Pin_Init(GPIOD, USART3_CLK_Pin.PD10, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	7bdb      	ldrb	r3, [r3, #15]
 8002acc:	220a      	movs	r2, #10
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d114      	bne.n	8002afc <PIN_Setup+0x8a0>
 8002ad2:	200a      	movs	r0, #10
 8002ad4:	2402      	movs	r4, #2
 8002ad6:	2500      	movs	r5, #0
 8002ad8:	2302      	movs	r3, #2
 8002ada:	2200      	movs	r2, #0
 8002adc:	2107      	movs	r1, #7
 8002ade:	9102      	str	r1, [sp, #8]
 8002ae0:	9201      	str	r2, [sp, #4]
 8002ae2:	9300      	str	r3, [sp, #0]
 8002ae4:	462b      	mov	r3, r5
 8002ae6:	4622      	mov	r2, r4
 8002ae8:	4601      	mov	r1, r0
 8002aea:	4807      	ldr	r0, [pc, #28]	@ (8002b08 <PIN_Setup+0x8ac>)
 8002aec:	f7fe fc66 	bl	80013bc <GPIO_Pin_Init>
}
 8002af0:	e004      	b.n	8002afc <PIN_Setup+0x8a0>
			if(config->hardware_flow != Hardware_Flow.Disable)
 8002af2:	bf00      	nop
 8002af4:	e002      	b.n	8002afc <PIN_Setup+0x8a0>
			if((config->hardware_flow != Hardware_Flow.Disable) || (config->hardware_flow == Hardware_Flow.CTS_RTS_Enable))
 8002af6:	bf00      	nop
 8002af8:	e000      	b.n	8002afc <PIN_Setup+0x8a0>
			if(config->hardware_flow != Hardware_Flow.Disable)
 8002afa:	bf00      	nop
}
 8002afc:	bf00      	nop
 8002afe:	3708      	adds	r7, #8
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bdb0      	pop	{r4, r5, r7, pc}
 8002b04:	40020400 	.word	0x40020400
 8002b08:	40020c00 	.word	0x40020c00
 8002b0c:	00000000 	.word	0x00000000

08002b10 <USART_Init>:

int8_t USART_Init(USART_Config *config)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b08a      	sub	sp, #40	@ 0x28
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
	USART_Clock_Enable(config);
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f7ff fafb 	bl	8002114 <USART_Clock_Enable>
	PIN_Setup(config);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f7ff fb9c 	bl	800225c <PIN_Setup>

//	USART1 -> CR1 |= USART_CR1_UE;

	double brr = (168000000.0/ (16.0 * 2.0 * (double)(config->baudrate)));
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f7fd fcfb 	bl	8000524 <__aeabi_ui2d>
 8002b2e:	f04f 0200 	mov.w	r2, #0
 8002b32:	4b4d      	ldr	r3, [pc, #308]	@ (8002c68 <USART_Init+0x158>)
 8002b34:	f7fd fd70 	bl	8000618 <__aeabi_dmul>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	460b      	mov	r3, r1
 8002b3c:	a148      	add	r1, pc, #288	@ (adr r1, 8002c60 <USART_Init+0x150>)
 8002b3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002b42:	f7fd fe93 	bl	800086c <__aeabi_ddiv>
 8002b46:	4602      	mov	r2, r0
 8002b48:	460b      	mov	r3, r1
 8002b4a:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double div_frac, mantissa;
	separateFractionAndIntegral(brr, &div_frac, &mantissa);
 8002b4e:	f107 0208 	add.w	r2, r7, #8
 8002b52:	f107 0310 	add.w	r3, r7, #16
 8002b56:	4611      	mov	r1, r2
 8002b58:	4618      	mov	r0, r3
 8002b5a:	ed97 0b08 	vldr	d0, [r7, #32]
 8002b5e:	f7ff fa92 	bl	8002086 <separateFractionAndIntegral>

	int div_frac_1 = (int)(ceil(div_frac*16.0));
 8002b62:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002b66:	f04f 0200 	mov.w	r2, #0
 8002b6a:	4b40      	ldr	r3, [pc, #256]	@ (8002c6c <USART_Init+0x15c>)
 8002b6c:	f7fd fd54 	bl	8000618 <__aeabi_dmul>
 8002b70:	4602      	mov	r2, r0
 8002b72:	460b      	mov	r3, r1
 8002b74:	ec43 2b17 	vmov	d7, r2, r3
 8002b78:	eeb0 0a47 	vmov.f32	s0, s14
 8002b7c:	eef0 0a67 	vmov.f32	s1, s15
 8002b80:	f002 febe 	bl	8005900 <ceil>
 8002b84:	ec53 2b10 	vmov	r2, r3, d0
 8002b88:	4610      	mov	r0, r2
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	f7fd fff4 	bl	8000b78 <__aeabi_d2iz>
 8002b90:	4603      	mov	r3, r0
 8002b92:	61fb      	str	r3, [r7, #28]
	int mantissa_1 = (int)(ceil(mantissa));
 8002b94:	ed97 7b02 	vldr	d7, [r7, #8]
 8002b98:	eeb0 0a47 	vmov.f32	s0, s14
 8002b9c:	eef0 0a67 	vmov.f32	s1, s15
 8002ba0:	f002 feae 	bl	8005900 <ceil>
 8002ba4:	ec53 2b10 	vmov	r2, r3, d0
 8002ba8:	4610      	mov	r0, r2
 8002baa:	4619      	mov	r1, r3
 8002bac:	f7fd ffe4 	bl	8000b78 <__aeabi_d2iz>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	61bb      	str	r3, [r7, #24]

	config->Port-> CR1 |= USART_CR1_UE;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	68da      	ldr	r2, [r3, #12]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002bc2:	60da      	str	r2, [r3, #12]
	config->Port->BRR = (mantissa_1<<4)|(div_frac_1);
 8002bc4:	69bb      	ldr	r3, [r7, #24]
 8002bc6:	011a      	lsls	r2, r3, #4
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	431a      	orrs	r2, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	609a      	str	r2, [r3, #8]
	config->Port->CR1 |= config->parity; //Parity
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	68da      	ldr	r2, [r3, #12]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	7d9b      	ldrb	r3, [r3, #22]
 8002bdc:	4619      	mov	r1, r3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	430a      	orrs	r2, r1
 8002be4:	60da      	str	r2, [r3, #12]
	config->Port->CR1 |= config->interrupt; //interrupt
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	68da      	ldr	r2, [r3, #12]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	7c9b      	ldrb	r3, [r3, #18]
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	430a      	orrs	r2, r1
 8002bf8:	60da      	str	r2, [r3, #12]
	config->Port->CR2 |= config->stop_bits;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	691a      	ldr	r2, [r3, #16]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	7d1b      	ldrb	r3, [r3, #20]
 8002c04:	4619      	mov	r1, r3
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	430a      	orrs	r2, r1
 8002c0c:	611a      	str	r2, [r3, #16]

	if(config->mode == USART_Mode.Single_Wire_Half_Duplex) config -> Port -> CR3 |= USART_CR3_HDSEL;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	7b1b      	ldrb	r3, [r3, #12]
 8002c12:	2203      	movs	r2, #3
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d107      	bne.n	8002c28 <USART_Init+0x118>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	695a      	ldr	r2, [r3, #20]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f042 0208 	orr.w	r2, r2, #8
 8002c26:	615a      	str	r2, [r3, #20]
	if(config->mode == USART_Mode.LIN) config -> Port -> CR2 |= USART_CR2_LINEN;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	7b1b      	ldrb	r3, [r3, #12]
 8002c2c:	2205      	movs	r2, #5
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d107      	bne.n	8002c42 <USART_Init+0x132>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	691a      	ldr	r2, [r3, #16]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002c40:	611a      	str	r2, [r3, #16]


	config->Port->CR1 |= USART_CR1_RE | USART_CR1_TE  ;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	68da      	ldr	r2, [r3, #12]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f042 020c 	orr.w	r2, r2, #12
 8002c50:	60da      	str	r2, [r3, #12]

	return 1;
 8002c52:	2301      	movs	r3, #1
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3728      	adds	r7, #40	@ 0x28
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	f3af 8000 	nop.w
 8002c60:	00000000 	.word	0x00000000
 8002c64:	41a406f4 	.word	0x41a406f4
 8002c68:	40400000 	.word	0x40400000
 8002c6c:	40300000 	.word	0x40300000

08002c70 <__cvt>:
 8002c70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002c74:	ec57 6b10 	vmov	r6, r7, d0
 8002c78:	2f00      	cmp	r7, #0
 8002c7a:	460c      	mov	r4, r1
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	463b      	mov	r3, r7
 8002c80:	bfbb      	ittet	lt
 8002c82:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8002c86:	461f      	movlt	r7, r3
 8002c88:	2300      	movge	r3, #0
 8002c8a:	232d      	movlt	r3, #45	@ 0x2d
 8002c8c:	700b      	strb	r3, [r1, #0]
 8002c8e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8002c90:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8002c94:	4691      	mov	r9, r2
 8002c96:	f023 0820 	bic.w	r8, r3, #32
 8002c9a:	bfbc      	itt	lt
 8002c9c:	4632      	movlt	r2, r6
 8002c9e:	4616      	movlt	r6, r2
 8002ca0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8002ca4:	d005      	beq.n	8002cb2 <__cvt+0x42>
 8002ca6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8002caa:	d100      	bne.n	8002cae <__cvt+0x3e>
 8002cac:	3401      	adds	r4, #1
 8002cae:	2102      	movs	r1, #2
 8002cb0:	e000      	b.n	8002cb4 <__cvt+0x44>
 8002cb2:	2103      	movs	r1, #3
 8002cb4:	ab03      	add	r3, sp, #12
 8002cb6:	9301      	str	r3, [sp, #4]
 8002cb8:	ab02      	add	r3, sp, #8
 8002cba:	9300      	str	r3, [sp, #0]
 8002cbc:	ec47 6b10 	vmov	d0, r6, r7
 8002cc0:	4653      	mov	r3, sl
 8002cc2:	4622      	mov	r2, r4
 8002cc4:	f000 fe5c 	bl	8003980 <_dtoa_r>
 8002cc8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8002ccc:	4605      	mov	r5, r0
 8002cce:	d119      	bne.n	8002d04 <__cvt+0x94>
 8002cd0:	f019 0f01 	tst.w	r9, #1
 8002cd4:	d00e      	beq.n	8002cf4 <__cvt+0x84>
 8002cd6:	eb00 0904 	add.w	r9, r0, r4
 8002cda:	2200      	movs	r2, #0
 8002cdc:	2300      	movs	r3, #0
 8002cde:	4630      	mov	r0, r6
 8002ce0:	4639      	mov	r1, r7
 8002ce2:	f7fd ff01 	bl	8000ae8 <__aeabi_dcmpeq>
 8002ce6:	b108      	cbz	r0, 8002cec <__cvt+0x7c>
 8002ce8:	f8cd 900c 	str.w	r9, [sp, #12]
 8002cec:	2230      	movs	r2, #48	@ 0x30
 8002cee:	9b03      	ldr	r3, [sp, #12]
 8002cf0:	454b      	cmp	r3, r9
 8002cf2:	d31e      	bcc.n	8002d32 <__cvt+0xc2>
 8002cf4:	9b03      	ldr	r3, [sp, #12]
 8002cf6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8002cf8:	1b5b      	subs	r3, r3, r5
 8002cfa:	4628      	mov	r0, r5
 8002cfc:	6013      	str	r3, [r2, #0]
 8002cfe:	b004      	add	sp, #16
 8002d00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d04:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8002d08:	eb00 0904 	add.w	r9, r0, r4
 8002d0c:	d1e5      	bne.n	8002cda <__cvt+0x6a>
 8002d0e:	7803      	ldrb	r3, [r0, #0]
 8002d10:	2b30      	cmp	r3, #48	@ 0x30
 8002d12:	d10a      	bne.n	8002d2a <__cvt+0xba>
 8002d14:	2200      	movs	r2, #0
 8002d16:	2300      	movs	r3, #0
 8002d18:	4630      	mov	r0, r6
 8002d1a:	4639      	mov	r1, r7
 8002d1c:	f7fd fee4 	bl	8000ae8 <__aeabi_dcmpeq>
 8002d20:	b918      	cbnz	r0, 8002d2a <__cvt+0xba>
 8002d22:	f1c4 0401 	rsb	r4, r4, #1
 8002d26:	f8ca 4000 	str.w	r4, [sl]
 8002d2a:	f8da 3000 	ldr.w	r3, [sl]
 8002d2e:	4499      	add	r9, r3
 8002d30:	e7d3      	b.n	8002cda <__cvt+0x6a>
 8002d32:	1c59      	adds	r1, r3, #1
 8002d34:	9103      	str	r1, [sp, #12]
 8002d36:	701a      	strb	r2, [r3, #0]
 8002d38:	e7d9      	b.n	8002cee <__cvt+0x7e>

08002d3a <__exponent>:
 8002d3a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002d3c:	2900      	cmp	r1, #0
 8002d3e:	bfba      	itte	lt
 8002d40:	4249      	neglt	r1, r1
 8002d42:	232d      	movlt	r3, #45	@ 0x2d
 8002d44:	232b      	movge	r3, #43	@ 0x2b
 8002d46:	2909      	cmp	r1, #9
 8002d48:	7002      	strb	r2, [r0, #0]
 8002d4a:	7043      	strb	r3, [r0, #1]
 8002d4c:	dd29      	ble.n	8002da2 <__exponent+0x68>
 8002d4e:	f10d 0307 	add.w	r3, sp, #7
 8002d52:	461d      	mov	r5, r3
 8002d54:	270a      	movs	r7, #10
 8002d56:	461a      	mov	r2, r3
 8002d58:	fbb1 f6f7 	udiv	r6, r1, r7
 8002d5c:	fb07 1416 	mls	r4, r7, r6, r1
 8002d60:	3430      	adds	r4, #48	@ 0x30
 8002d62:	f802 4c01 	strb.w	r4, [r2, #-1]
 8002d66:	460c      	mov	r4, r1
 8002d68:	2c63      	cmp	r4, #99	@ 0x63
 8002d6a:	f103 33ff 	add.w	r3, r3, #4294967295
 8002d6e:	4631      	mov	r1, r6
 8002d70:	dcf1      	bgt.n	8002d56 <__exponent+0x1c>
 8002d72:	3130      	adds	r1, #48	@ 0x30
 8002d74:	1e94      	subs	r4, r2, #2
 8002d76:	f803 1c01 	strb.w	r1, [r3, #-1]
 8002d7a:	1c41      	adds	r1, r0, #1
 8002d7c:	4623      	mov	r3, r4
 8002d7e:	42ab      	cmp	r3, r5
 8002d80:	d30a      	bcc.n	8002d98 <__exponent+0x5e>
 8002d82:	f10d 0309 	add.w	r3, sp, #9
 8002d86:	1a9b      	subs	r3, r3, r2
 8002d88:	42ac      	cmp	r4, r5
 8002d8a:	bf88      	it	hi
 8002d8c:	2300      	movhi	r3, #0
 8002d8e:	3302      	adds	r3, #2
 8002d90:	4403      	add	r3, r0
 8002d92:	1a18      	subs	r0, r3, r0
 8002d94:	b003      	add	sp, #12
 8002d96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d98:	f813 6b01 	ldrb.w	r6, [r3], #1
 8002d9c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8002da0:	e7ed      	b.n	8002d7e <__exponent+0x44>
 8002da2:	2330      	movs	r3, #48	@ 0x30
 8002da4:	3130      	adds	r1, #48	@ 0x30
 8002da6:	7083      	strb	r3, [r0, #2]
 8002da8:	70c1      	strb	r1, [r0, #3]
 8002daa:	1d03      	adds	r3, r0, #4
 8002dac:	e7f1      	b.n	8002d92 <__exponent+0x58>
	...

08002db0 <_printf_float>:
 8002db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002db4:	b08d      	sub	sp, #52	@ 0x34
 8002db6:	460c      	mov	r4, r1
 8002db8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8002dbc:	4616      	mov	r6, r2
 8002dbe:	461f      	mov	r7, r3
 8002dc0:	4605      	mov	r5, r0
 8002dc2:	f000 fcdb 	bl	800377c <_localeconv_r>
 8002dc6:	6803      	ldr	r3, [r0, #0]
 8002dc8:	9304      	str	r3, [sp, #16]
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f7fd fa60 	bl	8000290 <strlen>
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	930a      	str	r3, [sp, #40]	@ 0x28
 8002dd4:	f8d8 3000 	ldr.w	r3, [r8]
 8002dd8:	9005      	str	r0, [sp, #20]
 8002dda:	3307      	adds	r3, #7
 8002ddc:	f023 0307 	bic.w	r3, r3, #7
 8002de0:	f103 0208 	add.w	r2, r3, #8
 8002de4:	f894 a018 	ldrb.w	sl, [r4, #24]
 8002de8:	f8d4 b000 	ldr.w	fp, [r4]
 8002dec:	f8c8 2000 	str.w	r2, [r8]
 8002df0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002df4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8002df8:	9307      	str	r3, [sp, #28]
 8002dfa:	f8cd 8018 	str.w	r8, [sp, #24]
 8002dfe:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8002e02:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002e06:	4b9c      	ldr	r3, [pc, #624]	@ (8003078 <_printf_float+0x2c8>)
 8002e08:	f04f 32ff 	mov.w	r2, #4294967295
 8002e0c:	f7fd fe9e 	bl	8000b4c <__aeabi_dcmpun>
 8002e10:	bb70      	cbnz	r0, 8002e70 <_printf_float+0xc0>
 8002e12:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002e16:	4b98      	ldr	r3, [pc, #608]	@ (8003078 <_printf_float+0x2c8>)
 8002e18:	f04f 32ff 	mov.w	r2, #4294967295
 8002e1c:	f7fd fe78 	bl	8000b10 <__aeabi_dcmple>
 8002e20:	bb30      	cbnz	r0, 8002e70 <_printf_float+0xc0>
 8002e22:	2200      	movs	r2, #0
 8002e24:	2300      	movs	r3, #0
 8002e26:	4640      	mov	r0, r8
 8002e28:	4649      	mov	r1, r9
 8002e2a:	f7fd fe67 	bl	8000afc <__aeabi_dcmplt>
 8002e2e:	b110      	cbz	r0, 8002e36 <_printf_float+0x86>
 8002e30:	232d      	movs	r3, #45	@ 0x2d
 8002e32:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002e36:	4a91      	ldr	r2, [pc, #580]	@ (800307c <_printf_float+0x2cc>)
 8002e38:	4b91      	ldr	r3, [pc, #580]	@ (8003080 <_printf_float+0x2d0>)
 8002e3a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8002e3e:	bf94      	ite	ls
 8002e40:	4690      	movls	r8, r2
 8002e42:	4698      	movhi	r8, r3
 8002e44:	2303      	movs	r3, #3
 8002e46:	6123      	str	r3, [r4, #16]
 8002e48:	f02b 0304 	bic.w	r3, fp, #4
 8002e4c:	6023      	str	r3, [r4, #0]
 8002e4e:	f04f 0900 	mov.w	r9, #0
 8002e52:	9700      	str	r7, [sp, #0]
 8002e54:	4633      	mov	r3, r6
 8002e56:	aa0b      	add	r2, sp, #44	@ 0x2c
 8002e58:	4621      	mov	r1, r4
 8002e5a:	4628      	mov	r0, r5
 8002e5c:	f000 f9d2 	bl	8003204 <_printf_common>
 8002e60:	3001      	adds	r0, #1
 8002e62:	f040 808d 	bne.w	8002f80 <_printf_float+0x1d0>
 8002e66:	f04f 30ff 	mov.w	r0, #4294967295
 8002e6a:	b00d      	add	sp, #52	@ 0x34
 8002e6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e70:	4642      	mov	r2, r8
 8002e72:	464b      	mov	r3, r9
 8002e74:	4640      	mov	r0, r8
 8002e76:	4649      	mov	r1, r9
 8002e78:	f7fd fe68 	bl	8000b4c <__aeabi_dcmpun>
 8002e7c:	b140      	cbz	r0, 8002e90 <_printf_float+0xe0>
 8002e7e:	464b      	mov	r3, r9
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	bfbc      	itt	lt
 8002e84:	232d      	movlt	r3, #45	@ 0x2d
 8002e86:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8002e8a:	4a7e      	ldr	r2, [pc, #504]	@ (8003084 <_printf_float+0x2d4>)
 8002e8c:	4b7e      	ldr	r3, [pc, #504]	@ (8003088 <_printf_float+0x2d8>)
 8002e8e:	e7d4      	b.n	8002e3a <_printf_float+0x8a>
 8002e90:	6863      	ldr	r3, [r4, #4]
 8002e92:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8002e96:	9206      	str	r2, [sp, #24]
 8002e98:	1c5a      	adds	r2, r3, #1
 8002e9a:	d13b      	bne.n	8002f14 <_printf_float+0x164>
 8002e9c:	2306      	movs	r3, #6
 8002e9e:	6063      	str	r3, [r4, #4]
 8002ea0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	6022      	str	r2, [r4, #0]
 8002ea8:	9303      	str	r3, [sp, #12]
 8002eaa:	ab0a      	add	r3, sp, #40	@ 0x28
 8002eac:	e9cd a301 	strd	sl, r3, [sp, #4]
 8002eb0:	ab09      	add	r3, sp, #36	@ 0x24
 8002eb2:	9300      	str	r3, [sp, #0]
 8002eb4:	6861      	ldr	r1, [r4, #4]
 8002eb6:	ec49 8b10 	vmov	d0, r8, r9
 8002eba:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8002ebe:	4628      	mov	r0, r5
 8002ec0:	f7ff fed6 	bl	8002c70 <__cvt>
 8002ec4:	9b06      	ldr	r3, [sp, #24]
 8002ec6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8002ec8:	2b47      	cmp	r3, #71	@ 0x47
 8002eca:	4680      	mov	r8, r0
 8002ecc:	d129      	bne.n	8002f22 <_printf_float+0x172>
 8002ece:	1cc8      	adds	r0, r1, #3
 8002ed0:	db02      	blt.n	8002ed8 <_printf_float+0x128>
 8002ed2:	6863      	ldr	r3, [r4, #4]
 8002ed4:	4299      	cmp	r1, r3
 8002ed6:	dd41      	ble.n	8002f5c <_printf_float+0x1ac>
 8002ed8:	f1aa 0a02 	sub.w	sl, sl, #2
 8002edc:	fa5f fa8a 	uxtb.w	sl, sl
 8002ee0:	3901      	subs	r1, #1
 8002ee2:	4652      	mov	r2, sl
 8002ee4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8002ee8:	9109      	str	r1, [sp, #36]	@ 0x24
 8002eea:	f7ff ff26 	bl	8002d3a <__exponent>
 8002eee:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8002ef0:	1813      	adds	r3, r2, r0
 8002ef2:	2a01      	cmp	r2, #1
 8002ef4:	4681      	mov	r9, r0
 8002ef6:	6123      	str	r3, [r4, #16]
 8002ef8:	dc02      	bgt.n	8002f00 <_printf_float+0x150>
 8002efa:	6822      	ldr	r2, [r4, #0]
 8002efc:	07d2      	lsls	r2, r2, #31
 8002efe:	d501      	bpl.n	8002f04 <_printf_float+0x154>
 8002f00:	3301      	adds	r3, #1
 8002f02:	6123      	str	r3, [r4, #16]
 8002f04:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d0a2      	beq.n	8002e52 <_printf_float+0xa2>
 8002f0c:	232d      	movs	r3, #45	@ 0x2d
 8002f0e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002f12:	e79e      	b.n	8002e52 <_printf_float+0xa2>
 8002f14:	9a06      	ldr	r2, [sp, #24]
 8002f16:	2a47      	cmp	r2, #71	@ 0x47
 8002f18:	d1c2      	bne.n	8002ea0 <_printf_float+0xf0>
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d1c0      	bne.n	8002ea0 <_printf_float+0xf0>
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e7bd      	b.n	8002e9e <_printf_float+0xee>
 8002f22:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8002f26:	d9db      	bls.n	8002ee0 <_printf_float+0x130>
 8002f28:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8002f2c:	d118      	bne.n	8002f60 <_printf_float+0x1b0>
 8002f2e:	2900      	cmp	r1, #0
 8002f30:	6863      	ldr	r3, [r4, #4]
 8002f32:	dd0b      	ble.n	8002f4c <_printf_float+0x19c>
 8002f34:	6121      	str	r1, [r4, #16]
 8002f36:	b913      	cbnz	r3, 8002f3e <_printf_float+0x18e>
 8002f38:	6822      	ldr	r2, [r4, #0]
 8002f3a:	07d0      	lsls	r0, r2, #31
 8002f3c:	d502      	bpl.n	8002f44 <_printf_float+0x194>
 8002f3e:	3301      	adds	r3, #1
 8002f40:	440b      	add	r3, r1
 8002f42:	6123      	str	r3, [r4, #16]
 8002f44:	65a1      	str	r1, [r4, #88]	@ 0x58
 8002f46:	f04f 0900 	mov.w	r9, #0
 8002f4a:	e7db      	b.n	8002f04 <_printf_float+0x154>
 8002f4c:	b913      	cbnz	r3, 8002f54 <_printf_float+0x1a4>
 8002f4e:	6822      	ldr	r2, [r4, #0]
 8002f50:	07d2      	lsls	r2, r2, #31
 8002f52:	d501      	bpl.n	8002f58 <_printf_float+0x1a8>
 8002f54:	3302      	adds	r3, #2
 8002f56:	e7f4      	b.n	8002f42 <_printf_float+0x192>
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e7f2      	b.n	8002f42 <_printf_float+0x192>
 8002f5c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8002f60:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002f62:	4299      	cmp	r1, r3
 8002f64:	db05      	blt.n	8002f72 <_printf_float+0x1c2>
 8002f66:	6823      	ldr	r3, [r4, #0]
 8002f68:	6121      	str	r1, [r4, #16]
 8002f6a:	07d8      	lsls	r0, r3, #31
 8002f6c:	d5ea      	bpl.n	8002f44 <_printf_float+0x194>
 8002f6e:	1c4b      	adds	r3, r1, #1
 8002f70:	e7e7      	b.n	8002f42 <_printf_float+0x192>
 8002f72:	2900      	cmp	r1, #0
 8002f74:	bfd4      	ite	le
 8002f76:	f1c1 0202 	rsble	r2, r1, #2
 8002f7a:	2201      	movgt	r2, #1
 8002f7c:	4413      	add	r3, r2
 8002f7e:	e7e0      	b.n	8002f42 <_printf_float+0x192>
 8002f80:	6823      	ldr	r3, [r4, #0]
 8002f82:	055a      	lsls	r2, r3, #21
 8002f84:	d407      	bmi.n	8002f96 <_printf_float+0x1e6>
 8002f86:	6923      	ldr	r3, [r4, #16]
 8002f88:	4642      	mov	r2, r8
 8002f8a:	4631      	mov	r1, r6
 8002f8c:	4628      	mov	r0, r5
 8002f8e:	47b8      	blx	r7
 8002f90:	3001      	adds	r0, #1
 8002f92:	d12b      	bne.n	8002fec <_printf_float+0x23c>
 8002f94:	e767      	b.n	8002e66 <_printf_float+0xb6>
 8002f96:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8002f9a:	f240 80dd 	bls.w	8003158 <_printf_float+0x3a8>
 8002f9e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	f7fd fd9f 	bl	8000ae8 <__aeabi_dcmpeq>
 8002faa:	2800      	cmp	r0, #0
 8002fac:	d033      	beq.n	8003016 <_printf_float+0x266>
 8002fae:	4a37      	ldr	r2, [pc, #220]	@ (800308c <_printf_float+0x2dc>)
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	4631      	mov	r1, r6
 8002fb4:	4628      	mov	r0, r5
 8002fb6:	47b8      	blx	r7
 8002fb8:	3001      	adds	r0, #1
 8002fba:	f43f af54 	beq.w	8002e66 <_printf_float+0xb6>
 8002fbe:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8002fc2:	4543      	cmp	r3, r8
 8002fc4:	db02      	blt.n	8002fcc <_printf_float+0x21c>
 8002fc6:	6823      	ldr	r3, [r4, #0]
 8002fc8:	07d8      	lsls	r0, r3, #31
 8002fca:	d50f      	bpl.n	8002fec <_printf_float+0x23c>
 8002fcc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002fd0:	4631      	mov	r1, r6
 8002fd2:	4628      	mov	r0, r5
 8002fd4:	47b8      	blx	r7
 8002fd6:	3001      	adds	r0, #1
 8002fd8:	f43f af45 	beq.w	8002e66 <_printf_float+0xb6>
 8002fdc:	f04f 0900 	mov.w	r9, #0
 8002fe0:	f108 38ff 	add.w	r8, r8, #4294967295
 8002fe4:	f104 0a1a 	add.w	sl, r4, #26
 8002fe8:	45c8      	cmp	r8, r9
 8002fea:	dc09      	bgt.n	8003000 <_printf_float+0x250>
 8002fec:	6823      	ldr	r3, [r4, #0]
 8002fee:	079b      	lsls	r3, r3, #30
 8002ff0:	f100 8103 	bmi.w	80031fa <_printf_float+0x44a>
 8002ff4:	68e0      	ldr	r0, [r4, #12]
 8002ff6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8002ff8:	4298      	cmp	r0, r3
 8002ffa:	bfb8      	it	lt
 8002ffc:	4618      	movlt	r0, r3
 8002ffe:	e734      	b.n	8002e6a <_printf_float+0xba>
 8003000:	2301      	movs	r3, #1
 8003002:	4652      	mov	r2, sl
 8003004:	4631      	mov	r1, r6
 8003006:	4628      	mov	r0, r5
 8003008:	47b8      	blx	r7
 800300a:	3001      	adds	r0, #1
 800300c:	f43f af2b 	beq.w	8002e66 <_printf_float+0xb6>
 8003010:	f109 0901 	add.w	r9, r9, #1
 8003014:	e7e8      	b.n	8002fe8 <_printf_float+0x238>
 8003016:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003018:	2b00      	cmp	r3, #0
 800301a:	dc39      	bgt.n	8003090 <_printf_float+0x2e0>
 800301c:	4a1b      	ldr	r2, [pc, #108]	@ (800308c <_printf_float+0x2dc>)
 800301e:	2301      	movs	r3, #1
 8003020:	4631      	mov	r1, r6
 8003022:	4628      	mov	r0, r5
 8003024:	47b8      	blx	r7
 8003026:	3001      	adds	r0, #1
 8003028:	f43f af1d 	beq.w	8002e66 <_printf_float+0xb6>
 800302c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8003030:	ea59 0303 	orrs.w	r3, r9, r3
 8003034:	d102      	bne.n	800303c <_printf_float+0x28c>
 8003036:	6823      	ldr	r3, [r4, #0]
 8003038:	07d9      	lsls	r1, r3, #31
 800303a:	d5d7      	bpl.n	8002fec <_printf_float+0x23c>
 800303c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003040:	4631      	mov	r1, r6
 8003042:	4628      	mov	r0, r5
 8003044:	47b8      	blx	r7
 8003046:	3001      	adds	r0, #1
 8003048:	f43f af0d 	beq.w	8002e66 <_printf_float+0xb6>
 800304c:	f04f 0a00 	mov.w	sl, #0
 8003050:	f104 0b1a 	add.w	fp, r4, #26
 8003054:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003056:	425b      	negs	r3, r3
 8003058:	4553      	cmp	r3, sl
 800305a:	dc01      	bgt.n	8003060 <_printf_float+0x2b0>
 800305c:	464b      	mov	r3, r9
 800305e:	e793      	b.n	8002f88 <_printf_float+0x1d8>
 8003060:	2301      	movs	r3, #1
 8003062:	465a      	mov	r2, fp
 8003064:	4631      	mov	r1, r6
 8003066:	4628      	mov	r0, r5
 8003068:	47b8      	blx	r7
 800306a:	3001      	adds	r0, #1
 800306c:	f43f aefb 	beq.w	8002e66 <_printf_float+0xb6>
 8003070:	f10a 0a01 	add.w	sl, sl, #1
 8003074:	e7ee      	b.n	8003054 <_printf_float+0x2a4>
 8003076:	bf00      	nop
 8003078:	7fefffff 	.word	0x7fefffff
 800307c:	08005a2c 	.word	0x08005a2c
 8003080:	08005a30 	.word	0x08005a30
 8003084:	08005a34 	.word	0x08005a34
 8003088:	08005a38 	.word	0x08005a38
 800308c:	08005a3c 	.word	0x08005a3c
 8003090:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003092:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8003096:	4553      	cmp	r3, sl
 8003098:	bfa8      	it	ge
 800309a:	4653      	movge	r3, sl
 800309c:	2b00      	cmp	r3, #0
 800309e:	4699      	mov	r9, r3
 80030a0:	dc36      	bgt.n	8003110 <_printf_float+0x360>
 80030a2:	f04f 0b00 	mov.w	fp, #0
 80030a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80030aa:	f104 021a 	add.w	r2, r4, #26
 80030ae:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80030b0:	9306      	str	r3, [sp, #24]
 80030b2:	eba3 0309 	sub.w	r3, r3, r9
 80030b6:	455b      	cmp	r3, fp
 80030b8:	dc31      	bgt.n	800311e <_printf_float+0x36e>
 80030ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80030bc:	459a      	cmp	sl, r3
 80030be:	dc3a      	bgt.n	8003136 <_printf_float+0x386>
 80030c0:	6823      	ldr	r3, [r4, #0]
 80030c2:	07da      	lsls	r2, r3, #31
 80030c4:	d437      	bmi.n	8003136 <_printf_float+0x386>
 80030c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80030c8:	ebaa 0903 	sub.w	r9, sl, r3
 80030cc:	9b06      	ldr	r3, [sp, #24]
 80030ce:	ebaa 0303 	sub.w	r3, sl, r3
 80030d2:	4599      	cmp	r9, r3
 80030d4:	bfa8      	it	ge
 80030d6:	4699      	movge	r9, r3
 80030d8:	f1b9 0f00 	cmp.w	r9, #0
 80030dc:	dc33      	bgt.n	8003146 <_printf_float+0x396>
 80030de:	f04f 0800 	mov.w	r8, #0
 80030e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80030e6:	f104 0b1a 	add.w	fp, r4, #26
 80030ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80030ec:	ebaa 0303 	sub.w	r3, sl, r3
 80030f0:	eba3 0309 	sub.w	r3, r3, r9
 80030f4:	4543      	cmp	r3, r8
 80030f6:	f77f af79 	ble.w	8002fec <_printf_float+0x23c>
 80030fa:	2301      	movs	r3, #1
 80030fc:	465a      	mov	r2, fp
 80030fe:	4631      	mov	r1, r6
 8003100:	4628      	mov	r0, r5
 8003102:	47b8      	blx	r7
 8003104:	3001      	adds	r0, #1
 8003106:	f43f aeae 	beq.w	8002e66 <_printf_float+0xb6>
 800310a:	f108 0801 	add.w	r8, r8, #1
 800310e:	e7ec      	b.n	80030ea <_printf_float+0x33a>
 8003110:	4642      	mov	r2, r8
 8003112:	4631      	mov	r1, r6
 8003114:	4628      	mov	r0, r5
 8003116:	47b8      	blx	r7
 8003118:	3001      	adds	r0, #1
 800311a:	d1c2      	bne.n	80030a2 <_printf_float+0x2f2>
 800311c:	e6a3      	b.n	8002e66 <_printf_float+0xb6>
 800311e:	2301      	movs	r3, #1
 8003120:	4631      	mov	r1, r6
 8003122:	4628      	mov	r0, r5
 8003124:	9206      	str	r2, [sp, #24]
 8003126:	47b8      	blx	r7
 8003128:	3001      	adds	r0, #1
 800312a:	f43f ae9c 	beq.w	8002e66 <_printf_float+0xb6>
 800312e:	9a06      	ldr	r2, [sp, #24]
 8003130:	f10b 0b01 	add.w	fp, fp, #1
 8003134:	e7bb      	b.n	80030ae <_printf_float+0x2fe>
 8003136:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800313a:	4631      	mov	r1, r6
 800313c:	4628      	mov	r0, r5
 800313e:	47b8      	blx	r7
 8003140:	3001      	adds	r0, #1
 8003142:	d1c0      	bne.n	80030c6 <_printf_float+0x316>
 8003144:	e68f      	b.n	8002e66 <_printf_float+0xb6>
 8003146:	9a06      	ldr	r2, [sp, #24]
 8003148:	464b      	mov	r3, r9
 800314a:	4442      	add	r2, r8
 800314c:	4631      	mov	r1, r6
 800314e:	4628      	mov	r0, r5
 8003150:	47b8      	blx	r7
 8003152:	3001      	adds	r0, #1
 8003154:	d1c3      	bne.n	80030de <_printf_float+0x32e>
 8003156:	e686      	b.n	8002e66 <_printf_float+0xb6>
 8003158:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800315c:	f1ba 0f01 	cmp.w	sl, #1
 8003160:	dc01      	bgt.n	8003166 <_printf_float+0x3b6>
 8003162:	07db      	lsls	r3, r3, #31
 8003164:	d536      	bpl.n	80031d4 <_printf_float+0x424>
 8003166:	2301      	movs	r3, #1
 8003168:	4642      	mov	r2, r8
 800316a:	4631      	mov	r1, r6
 800316c:	4628      	mov	r0, r5
 800316e:	47b8      	blx	r7
 8003170:	3001      	adds	r0, #1
 8003172:	f43f ae78 	beq.w	8002e66 <_printf_float+0xb6>
 8003176:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800317a:	4631      	mov	r1, r6
 800317c:	4628      	mov	r0, r5
 800317e:	47b8      	blx	r7
 8003180:	3001      	adds	r0, #1
 8003182:	f43f ae70 	beq.w	8002e66 <_printf_float+0xb6>
 8003186:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800318a:	2200      	movs	r2, #0
 800318c:	2300      	movs	r3, #0
 800318e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003192:	f7fd fca9 	bl	8000ae8 <__aeabi_dcmpeq>
 8003196:	b9c0      	cbnz	r0, 80031ca <_printf_float+0x41a>
 8003198:	4653      	mov	r3, sl
 800319a:	f108 0201 	add.w	r2, r8, #1
 800319e:	4631      	mov	r1, r6
 80031a0:	4628      	mov	r0, r5
 80031a2:	47b8      	blx	r7
 80031a4:	3001      	adds	r0, #1
 80031a6:	d10c      	bne.n	80031c2 <_printf_float+0x412>
 80031a8:	e65d      	b.n	8002e66 <_printf_float+0xb6>
 80031aa:	2301      	movs	r3, #1
 80031ac:	465a      	mov	r2, fp
 80031ae:	4631      	mov	r1, r6
 80031b0:	4628      	mov	r0, r5
 80031b2:	47b8      	blx	r7
 80031b4:	3001      	adds	r0, #1
 80031b6:	f43f ae56 	beq.w	8002e66 <_printf_float+0xb6>
 80031ba:	f108 0801 	add.w	r8, r8, #1
 80031be:	45d0      	cmp	r8, sl
 80031c0:	dbf3      	blt.n	80031aa <_printf_float+0x3fa>
 80031c2:	464b      	mov	r3, r9
 80031c4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80031c8:	e6df      	b.n	8002f8a <_printf_float+0x1da>
 80031ca:	f04f 0800 	mov.w	r8, #0
 80031ce:	f104 0b1a 	add.w	fp, r4, #26
 80031d2:	e7f4      	b.n	80031be <_printf_float+0x40e>
 80031d4:	2301      	movs	r3, #1
 80031d6:	4642      	mov	r2, r8
 80031d8:	e7e1      	b.n	800319e <_printf_float+0x3ee>
 80031da:	2301      	movs	r3, #1
 80031dc:	464a      	mov	r2, r9
 80031de:	4631      	mov	r1, r6
 80031e0:	4628      	mov	r0, r5
 80031e2:	47b8      	blx	r7
 80031e4:	3001      	adds	r0, #1
 80031e6:	f43f ae3e 	beq.w	8002e66 <_printf_float+0xb6>
 80031ea:	f108 0801 	add.w	r8, r8, #1
 80031ee:	68e3      	ldr	r3, [r4, #12]
 80031f0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80031f2:	1a5b      	subs	r3, r3, r1
 80031f4:	4543      	cmp	r3, r8
 80031f6:	dcf0      	bgt.n	80031da <_printf_float+0x42a>
 80031f8:	e6fc      	b.n	8002ff4 <_printf_float+0x244>
 80031fa:	f04f 0800 	mov.w	r8, #0
 80031fe:	f104 0919 	add.w	r9, r4, #25
 8003202:	e7f4      	b.n	80031ee <_printf_float+0x43e>

08003204 <_printf_common>:
 8003204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003208:	4616      	mov	r6, r2
 800320a:	4698      	mov	r8, r3
 800320c:	688a      	ldr	r2, [r1, #8]
 800320e:	690b      	ldr	r3, [r1, #16]
 8003210:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003214:	4293      	cmp	r3, r2
 8003216:	bfb8      	it	lt
 8003218:	4613      	movlt	r3, r2
 800321a:	6033      	str	r3, [r6, #0]
 800321c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003220:	4607      	mov	r7, r0
 8003222:	460c      	mov	r4, r1
 8003224:	b10a      	cbz	r2, 800322a <_printf_common+0x26>
 8003226:	3301      	adds	r3, #1
 8003228:	6033      	str	r3, [r6, #0]
 800322a:	6823      	ldr	r3, [r4, #0]
 800322c:	0699      	lsls	r1, r3, #26
 800322e:	bf42      	ittt	mi
 8003230:	6833      	ldrmi	r3, [r6, #0]
 8003232:	3302      	addmi	r3, #2
 8003234:	6033      	strmi	r3, [r6, #0]
 8003236:	6825      	ldr	r5, [r4, #0]
 8003238:	f015 0506 	ands.w	r5, r5, #6
 800323c:	d106      	bne.n	800324c <_printf_common+0x48>
 800323e:	f104 0a19 	add.w	sl, r4, #25
 8003242:	68e3      	ldr	r3, [r4, #12]
 8003244:	6832      	ldr	r2, [r6, #0]
 8003246:	1a9b      	subs	r3, r3, r2
 8003248:	42ab      	cmp	r3, r5
 800324a:	dc26      	bgt.n	800329a <_printf_common+0x96>
 800324c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003250:	6822      	ldr	r2, [r4, #0]
 8003252:	3b00      	subs	r3, #0
 8003254:	bf18      	it	ne
 8003256:	2301      	movne	r3, #1
 8003258:	0692      	lsls	r2, r2, #26
 800325a:	d42b      	bmi.n	80032b4 <_printf_common+0xb0>
 800325c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003260:	4641      	mov	r1, r8
 8003262:	4638      	mov	r0, r7
 8003264:	47c8      	blx	r9
 8003266:	3001      	adds	r0, #1
 8003268:	d01e      	beq.n	80032a8 <_printf_common+0xa4>
 800326a:	6823      	ldr	r3, [r4, #0]
 800326c:	6922      	ldr	r2, [r4, #16]
 800326e:	f003 0306 	and.w	r3, r3, #6
 8003272:	2b04      	cmp	r3, #4
 8003274:	bf02      	ittt	eq
 8003276:	68e5      	ldreq	r5, [r4, #12]
 8003278:	6833      	ldreq	r3, [r6, #0]
 800327a:	1aed      	subeq	r5, r5, r3
 800327c:	68a3      	ldr	r3, [r4, #8]
 800327e:	bf0c      	ite	eq
 8003280:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003284:	2500      	movne	r5, #0
 8003286:	4293      	cmp	r3, r2
 8003288:	bfc4      	itt	gt
 800328a:	1a9b      	subgt	r3, r3, r2
 800328c:	18ed      	addgt	r5, r5, r3
 800328e:	2600      	movs	r6, #0
 8003290:	341a      	adds	r4, #26
 8003292:	42b5      	cmp	r5, r6
 8003294:	d11a      	bne.n	80032cc <_printf_common+0xc8>
 8003296:	2000      	movs	r0, #0
 8003298:	e008      	b.n	80032ac <_printf_common+0xa8>
 800329a:	2301      	movs	r3, #1
 800329c:	4652      	mov	r2, sl
 800329e:	4641      	mov	r1, r8
 80032a0:	4638      	mov	r0, r7
 80032a2:	47c8      	blx	r9
 80032a4:	3001      	adds	r0, #1
 80032a6:	d103      	bne.n	80032b0 <_printf_common+0xac>
 80032a8:	f04f 30ff 	mov.w	r0, #4294967295
 80032ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032b0:	3501      	adds	r5, #1
 80032b2:	e7c6      	b.n	8003242 <_printf_common+0x3e>
 80032b4:	18e1      	adds	r1, r4, r3
 80032b6:	1c5a      	adds	r2, r3, #1
 80032b8:	2030      	movs	r0, #48	@ 0x30
 80032ba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80032be:	4422      	add	r2, r4
 80032c0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80032c4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80032c8:	3302      	adds	r3, #2
 80032ca:	e7c7      	b.n	800325c <_printf_common+0x58>
 80032cc:	2301      	movs	r3, #1
 80032ce:	4622      	mov	r2, r4
 80032d0:	4641      	mov	r1, r8
 80032d2:	4638      	mov	r0, r7
 80032d4:	47c8      	blx	r9
 80032d6:	3001      	adds	r0, #1
 80032d8:	d0e6      	beq.n	80032a8 <_printf_common+0xa4>
 80032da:	3601      	adds	r6, #1
 80032dc:	e7d9      	b.n	8003292 <_printf_common+0x8e>
	...

080032e0 <_printf_i>:
 80032e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80032e4:	7e0f      	ldrb	r7, [r1, #24]
 80032e6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80032e8:	2f78      	cmp	r7, #120	@ 0x78
 80032ea:	4691      	mov	r9, r2
 80032ec:	4680      	mov	r8, r0
 80032ee:	460c      	mov	r4, r1
 80032f0:	469a      	mov	sl, r3
 80032f2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80032f6:	d807      	bhi.n	8003308 <_printf_i+0x28>
 80032f8:	2f62      	cmp	r7, #98	@ 0x62
 80032fa:	d80a      	bhi.n	8003312 <_printf_i+0x32>
 80032fc:	2f00      	cmp	r7, #0
 80032fe:	f000 80d2 	beq.w	80034a6 <_printf_i+0x1c6>
 8003302:	2f58      	cmp	r7, #88	@ 0x58
 8003304:	f000 80b9 	beq.w	800347a <_printf_i+0x19a>
 8003308:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800330c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003310:	e03a      	b.n	8003388 <_printf_i+0xa8>
 8003312:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003316:	2b15      	cmp	r3, #21
 8003318:	d8f6      	bhi.n	8003308 <_printf_i+0x28>
 800331a:	a101      	add	r1, pc, #4	@ (adr r1, 8003320 <_printf_i+0x40>)
 800331c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003320:	08003379 	.word	0x08003379
 8003324:	0800338d 	.word	0x0800338d
 8003328:	08003309 	.word	0x08003309
 800332c:	08003309 	.word	0x08003309
 8003330:	08003309 	.word	0x08003309
 8003334:	08003309 	.word	0x08003309
 8003338:	0800338d 	.word	0x0800338d
 800333c:	08003309 	.word	0x08003309
 8003340:	08003309 	.word	0x08003309
 8003344:	08003309 	.word	0x08003309
 8003348:	08003309 	.word	0x08003309
 800334c:	0800348d 	.word	0x0800348d
 8003350:	080033b7 	.word	0x080033b7
 8003354:	08003447 	.word	0x08003447
 8003358:	08003309 	.word	0x08003309
 800335c:	08003309 	.word	0x08003309
 8003360:	080034af 	.word	0x080034af
 8003364:	08003309 	.word	0x08003309
 8003368:	080033b7 	.word	0x080033b7
 800336c:	08003309 	.word	0x08003309
 8003370:	08003309 	.word	0x08003309
 8003374:	0800344f 	.word	0x0800344f
 8003378:	6833      	ldr	r3, [r6, #0]
 800337a:	1d1a      	adds	r2, r3, #4
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	6032      	str	r2, [r6, #0]
 8003380:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003384:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003388:	2301      	movs	r3, #1
 800338a:	e09d      	b.n	80034c8 <_printf_i+0x1e8>
 800338c:	6833      	ldr	r3, [r6, #0]
 800338e:	6820      	ldr	r0, [r4, #0]
 8003390:	1d19      	adds	r1, r3, #4
 8003392:	6031      	str	r1, [r6, #0]
 8003394:	0606      	lsls	r6, r0, #24
 8003396:	d501      	bpl.n	800339c <_printf_i+0xbc>
 8003398:	681d      	ldr	r5, [r3, #0]
 800339a:	e003      	b.n	80033a4 <_printf_i+0xc4>
 800339c:	0645      	lsls	r5, r0, #25
 800339e:	d5fb      	bpl.n	8003398 <_printf_i+0xb8>
 80033a0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80033a4:	2d00      	cmp	r5, #0
 80033a6:	da03      	bge.n	80033b0 <_printf_i+0xd0>
 80033a8:	232d      	movs	r3, #45	@ 0x2d
 80033aa:	426d      	negs	r5, r5
 80033ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80033b0:	4859      	ldr	r0, [pc, #356]	@ (8003518 <_printf_i+0x238>)
 80033b2:	230a      	movs	r3, #10
 80033b4:	e011      	b.n	80033da <_printf_i+0xfa>
 80033b6:	6821      	ldr	r1, [r4, #0]
 80033b8:	6833      	ldr	r3, [r6, #0]
 80033ba:	0608      	lsls	r0, r1, #24
 80033bc:	f853 5b04 	ldr.w	r5, [r3], #4
 80033c0:	d402      	bmi.n	80033c8 <_printf_i+0xe8>
 80033c2:	0649      	lsls	r1, r1, #25
 80033c4:	bf48      	it	mi
 80033c6:	b2ad      	uxthmi	r5, r5
 80033c8:	2f6f      	cmp	r7, #111	@ 0x6f
 80033ca:	4853      	ldr	r0, [pc, #332]	@ (8003518 <_printf_i+0x238>)
 80033cc:	6033      	str	r3, [r6, #0]
 80033ce:	bf14      	ite	ne
 80033d0:	230a      	movne	r3, #10
 80033d2:	2308      	moveq	r3, #8
 80033d4:	2100      	movs	r1, #0
 80033d6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80033da:	6866      	ldr	r6, [r4, #4]
 80033dc:	60a6      	str	r6, [r4, #8]
 80033de:	2e00      	cmp	r6, #0
 80033e0:	bfa2      	ittt	ge
 80033e2:	6821      	ldrge	r1, [r4, #0]
 80033e4:	f021 0104 	bicge.w	r1, r1, #4
 80033e8:	6021      	strge	r1, [r4, #0]
 80033ea:	b90d      	cbnz	r5, 80033f0 <_printf_i+0x110>
 80033ec:	2e00      	cmp	r6, #0
 80033ee:	d04b      	beq.n	8003488 <_printf_i+0x1a8>
 80033f0:	4616      	mov	r6, r2
 80033f2:	fbb5 f1f3 	udiv	r1, r5, r3
 80033f6:	fb03 5711 	mls	r7, r3, r1, r5
 80033fa:	5dc7      	ldrb	r7, [r0, r7]
 80033fc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003400:	462f      	mov	r7, r5
 8003402:	42bb      	cmp	r3, r7
 8003404:	460d      	mov	r5, r1
 8003406:	d9f4      	bls.n	80033f2 <_printf_i+0x112>
 8003408:	2b08      	cmp	r3, #8
 800340a:	d10b      	bne.n	8003424 <_printf_i+0x144>
 800340c:	6823      	ldr	r3, [r4, #0]
 800340e:	07df      	lsls	r7, r3, #31
 8003410:	d508      	bpl.n	8003424 <_printf_i+0x144>
 8003412:	6923      	ldr	r3, [r4, #16]
 8003414:	6861      	ldr	r1, [r4, #4]
 8003416:	4299      	cmp	r1, r3
 8003418:	bfde      	ittt	le
 800341a:	2330      	movle	r3, #48	@ 0x30
 800341c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003420:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003424:	1b92      	subs	r2, r2, r6
 8003426:	6122      	str	r2, [r4, #16]
 8003428:	f8cd a000 	str.w	sl, [sp]
 800342c:	464b      	mov	r3, r9
 800342e:	aa03      	add	r2, sp, #12
 8003430:	4621      	mov	r1, r4
 8003432:	4640      	mov	r0, r8
 8003434:	f7ff fee6 	bl	8003204 <_printf_common>
 8003438:	3001      	adds	r0, #1
 800343a:	d14a      	bne.n	80034d2 <_printf_i+0x1f2>
 800343c:	f04f 30ff 	mov.w	r0, #4294967295
 8003440:	b004      	add	sp, #16
 8003442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003446:	6823      	ldr	r3, [r4, #0]
 8003448:	f043 0320 	orr.w	r3, r3, #32
 800344c:	6023      	str	r3, [r4, #0]
 800344e:	4833      	ldr	r0, [pc, #204]	@ (800351c <_printf_i+0x23c>)
 8003450:	2778      	movs	r7, #120	@ 0x78
 8003452:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003456:	6823      	ldr	r3, [r4, #0]
 8003458:	6831      	ldr	r1, [r6, #0]
 800345a:	061f      	lsls	r7, r3, #24
 800345c:	f851 5b04 	ldr.w	r5, [r1], #4
 8003460:	d402      	bmi.n	8003468 <_printf_i+0x188>
 8003462:	065f      	lsls	r7, r3, #25
 8003464:	bf48      	it	mi
 8003466:	b2ad      	uxthmi	r5, r5
 8003468:	6031      	str	r1, [r6, #0]
 800346a:	07d9      	lsls	r1, r3, #31
 800346c:	bf44      	itt	mi
 800346e:	f043 0320 	orrmi.w	r3, r3, #32
 8003472:	6023      	strmi	r3, [r4, #0]
 8003474:	b11d      	cbz	r5, 800347e <_printf_i+0x19e>
 8003476:	2310      	movs	r3, #16
 8003478:	e7ac      	b.n	80033d4 <_printf_i+0xf4>
 800347a:	4827      	ldr	r0, [pc, #156]	@ (8003518 <_printf_i+0x238>)
 800347c:	e7e9      	b.n	8003452 <_printf_i+0x172>
 800347e:	6823      	ldr	r3, [r4, #0]
 8003480:	f023 0320 	bic.w	r3, r3, #32
 8003484:	6023      	str	r3, [r4, #0]
 8003486:	e7f6      	b.n	8003476 <_printf_i+0x196>
 8003488:	4616      	mov	r6, r2
 800348a:	e7bd      	b.n	8003408 <_printf_i+0x128>
 800348c:	6833      	ldr	r3, [r6, #0]
 800348e:	6825      	ldr	r5, [r4, #0]
 8003490:	6961      	ldr	r1, [r4, #20]
 8003492:	1d18      	adds	r0, r3, #4
 8003494:	6030      	str	r0, [r6, #0]
 8003496:	062e      	lsls	r6, r5, #24
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	d501      	bpl.n	80034a0 <_printf_i+0x1c0>
 800349c:	6019      	str	r1, [r3, #0]
 800349e:	e002      	b.n	80034a6 <_printf_i+0x1c6>
 80034a0:	0668      	lsls	r0, r5, #25
 80034a2:	d5fb      	bpl.n	800349c <_printf_i+0x1bc>
 80034a4:	8019      	strh	r1, [r3, #0]
 80034a6:	2300      	movs	r3, #0
 80034a8:	6123      	str	r3, [r4, #16]
 80034aa:	4616      	mov	r6, r2
 80034ac:	e7bc      	b.n	8003428 <_printf_i+0x148>
 80034ae:	6833      	ldr	r3, [r6, #0]
 80034b0:	1d1a      	adds	r2, r3, #4
 80034b2:	6032      	str	r2, [r6, #0]
 80034b4:	681e      	ldr	r6, [r3, #0]
 80034b6:	6862      	ldr	r2, [r4, #4]
 80034b8:	2100      	movs	r1, #0
 80034ba:	4630      	mov	r0, r6
 80034bc:	f7fc fe98 	bl	80001f0 <memchr>
 80034c0:	b108      	cbz	r0, 80034c6 <_printf_i+0x1e6>
 80034c2:	1b80      	subs	r0, r0, r6
 80034c4:	6060      	str	r0, [r4, #4]
 80034c6:	6863      	ldr	r3, [r4, #4]
 80034c8:	6123      	str	r3, [r4, #16]
 80034ca:	2300      	movs	r3, #0
 80034cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80034d0:	e7aa      	b.n	8003428 <_printf_i+0x148>
 80034d2:	6923      	ldr	r3, [r4, #16]
 80034d4:	4632      	mov	r2, r6
 80034d6:	4649      	mov	r1, r9
 80034d8:	4640      	mov	r0, r8
 80034da:	47d0      	blx	sl
 80034dc:	3001      	adds	r0, #1
 80034de:	d0ad      	beq.n	800343c <_printf_i+0x15c>
 80034e0:	6823      	ldr	r3, [r4, #0]
 80034e2:	079b      	lsls	r3, r3, #30
 80034e4:	d413      	bmi.n	800350e <_printf_i+0x22e>
 80034e6:	68e0      	ldr	r0, [r4, #12]
 80034e8:	9b03      	ldr	r3, [sp, #12]
 80034ea:	4298      	cmp	r0, r3
 80034ec:	bfb8      	it	lt
 80034ee:	4618      	movlt	r0, r3
 80034f0:	e7a6      	b.n	8003440 <_printf_i+0x160>
 80034f2:	2301      	movs	r3, #1
 80034f4:	4632      	mov	r2, r6
 80034f6:	4649      	mov	r1, r9
 80034f8:	4640      	mov	r0, r8
 80034fa:	47d0      	blx	sl
 80034fc:	3001      	adds	r0, #1
 80034fe:	d09d      	beq.n	800343c <_printf_i+0x15c>
 8003500:	3501      	adds	r5, #1
 8003502:	68e3      	ldr	r3, [r4, #12]
 8003504:	9903      	ldr	r1, [sp, #12]
 8003506:	1a5b      	subs	r3, r3, r1
 8003508:	42ab      	cmp	r3, r5
 800350a:	dcf2      	bgt.n	80034f2 <_printf_i+0x212>
 800350c:	e7eb      	b.n	80034e6 <_printf_i+0x206>
 800350e:	2500      	movs	r5, #0
 8003510:	f104 0619 	add.w	r6, r4, #25
 8003514:	e7f5      	b.n	8003502 <_printf_i+0x222>
 8003516:	bf00      	nop
 8003518:	08005a3e 	.word	0x08005a3e
 800351c:	08005a4f 	.word	0x08005a4f

08003520 <std>:
 8003520:	2300      	movs	r3, #0
 8003522:	b510      	push	{r4, lr}
 8003524:	4604      	mov	r4, r0
 8003526:	e9c0 3300 	strd	r3, r3, [r0]
 800352a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800352e:	6083      	str	r3, [r0, #8]
 8003530:	8181      	strh	r1, [r0, #12]
 8003532:	6643      	str	r3, [r0, #100]	@ 0x64
 8003534:	81c2      	strh	r2, [r0, #14]
 8003536:	6183      	str	r3, [r0, #24]
 8003538:	4619      	mov	r1, r3
 800353a:	2208      	movs	r2, #8
 800353c:	305c      	adds	r0, #92	@ 0x5c
 800353e:	f000 f915 	bl	800376c <memset>
 8003542:	4b0d      	ldr	r3, [pc, #52]	@ (8003578 <std+0x58>)
 8003544:	6263      	str	r3, [r4, #36]	@ 0x24
 8003546:	4b0d      	ldr	r3, [pc, #52]	@ (800357c <std+0x5c>)
 8003548:	62a3      	str	r3, [r4, #40]	@ 0x28
 800354a:	4b0d      	ldr	r3, [pc, #52]	@ (8003580 <std+0x60>)
 800354c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800354e:	4b0d      	ldr	r3, [pc, #52]	@ (8003584 <std+0x64>)
 8003550:	6323      	str	r3, [r4, #48]	@ 0x30
 8003552:	4b0d      	ldr	r3, [pc, #52]	@ (8003588 <std+0x68>)
 8003554:	6224      	str	r4, [r4, #32]
 8003556:	429c      	cmp	r4, r3
 8003558:	d006      	beq.n	8003568 <std+0x48>
 800355a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800355e:	4294      	cmp	r4, r2
 8003560:	d002      	beq.n	8003568 <std+0x48>
 8003562:	33d0      	adds	r3, #208	@ 0xd0
 8003564:	429c      	cmp	r4, r3
 8003566:	d105      	bne.n	8003574 <std+0x54>
 8003568:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800356c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003570:	f000 b978 	b.w	8003864 <__retarget_lock_init_recursive>
 8003574:	bd10      	pop	{r4, pc}
 8003576:	bf00      	nop
 8003578:	080036a5 	.word	0x080036a5
 800357c:	080036c7 	.word	0x080036c7
 8003580:	080036ff 	.word	0x080036ff
 8003584:	08003723 	.word	0x08003723
 8003588:	200002a4 	.word	0x200002a4

0800358c <stdio_exit_handler>:
 800358c:	4a02      	ldr	r2, [pc, #8]	@ (8003598 <stdio_exit_handler+0xc>)
 800358e:	4903      	ldr	r1, [pc, #12]	@ (800359c <stdio_exit_handler+0x10>)
 8003590:	4803      	ldr	r0, [pc, #12]	@ (80035a0 <stdio_exit_handler+0x14>)
 8003592:	f000 b869 	b.w	8003668 <_fwalk_sglue>
 8003596:	bf00      	nop
 8003598:	20000004 	.word	0x20000004
 800359c:	080051c5 	.word	0x080051c5
 80035a0:	20000014 	.word	0x20000014

080035a4 <cleanup_stdio>:
 80035a4:	6841      	ldr	r1, [r0, #4]
 80035a6:	4b0c      	ldr	r3, [pc, #48]	@ (80035d8 <cleanup_stdio+0x34>)
 80035a8:	4299      	cmp	r1, r3
 80035aa:	b510      	push	{r4, lr}
 80035ac:	4604      	mov	r4, r0
 80035ae:	d001      	beq.n	80035b4 <cleanup_stdio+0x10>
 80035b0:	f001 fe08 	bl	80051c4 <_fflush_r>
 80035b4:	68a1      	ldr	r1, [r4, #8]
 80035b6:	4b09      	ldr	r3, [pc, #36]	@ (80035dc <cleanup_stdio+0x38>)
 80035b8:	4299      	cmp	r1, r3
 80035ba:	d002      	beq.n	80035c2 <cleanup_stdio+0x1e>
 80035bc:	4620      	mov	r0, r4
 80035be:	f001 fe01 	bl	80051c4 <_fflush_r>
 80035c2:	68e1      	ldr	r1, [r4, #12]
 80035c4:	4b06      	ldr	r3, [pc, #24]	@ (80035e0 <cleanup_stdio+0x3c>)
 80035c6:	4299      	cmp	r1, r3
 80035c8:	d004      	beq.n	80035d4 <cleanup_stdio+0x30>
 80035ca:	4620      	mov	r0, r4
 80035cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80035d0:	f001 bdf8 	b.w	80051c4 <_fflush_r>
 80035d4:	bd10      	pop	{r4, pc}
 80035d6:	bf00      	nop
 80035d8:	200002a4 	.word	0x200002a4
 80035dc:	2000030c 	.word	0x2000030c
 80035e0:	20000374 	.word	0x20000374

080035e4 <global_stdio_init.part.0>:
 80035e4:	b510      	push	{r4, lr}
 80035e6:	4b0b      	ldr	r3, [pc, #44]	@ (8003614 <global_stdio_init.part.0+0x30>)
 80035e8:	4c0b      	ldr	r4, [pc, #44]	@ (8003618 <global_stdio_init.part.0+0x34>)
 80035ea:	4a0c      	ldr	r2, [pc, #48]	@ (800361c <global_stdio_init.part.0+0x38>)
 80035ec:	601a      	str	r2, [r3, #0]
 80035ee:	4620      	mov	r0, r4
 80035f0:	2200      	movs	r2, #0
 80035f2:	2104      	movs	r1, #4
 80035f4:	f7ff ff94 	bl	8003520 <std>
 80035f8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80035fc:	2201      	movs	r2, #1
 80035fe:	2109      	movs	r1, #9
 8003600:	f7ff ff8e 	bl	8003520 <std>
 8003604:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003608:	2202      	movs	r2, #2
 800360a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800360e:	2112      	movs	r1, #18
 8003610:	f7ff bf86 	b.w	8003520 <std>
 8003614:	200003dc 	.word	0x200003dc
 8003618:	200002a4 	.word	0x200002a4
 800361c:	0800358d 	.word	0x0800358d

08003620 <__sfp_lock_acquire>:
 8003620:	4801      	ldr	r0, [pc, #4]	@ (8003628 <__sfp_lock_acquire+0x8>)
 8003622:	f000 b920 	b.w	8003866 <__retarget_lock_acquire_recursive>
 8003626:	bf00      	nop
 8003628:	200003e5 	.word	0x200003e5

0800362c <__sfp_lock_release>:
 800362c:	4801      	ldr	r0, [pc, #4]	@ (8003634 <__sfp_lock_release+0x8>)
 800362e:	f000 b91b 	b.w	8003868 <__retarget_lock_release_recursive>
 8003632:	bf00      	nop
 8003634:	200003e5 	.word	0x200003e5

08003638 <__sinit>:
 8003638:	b510      	push	{r4, lr}
 800363a:	4604      	mov	r4, r0
 800363c:	f7ff fff0 	bl	8003620 <__sfp_lock_acquire>
 8003640:	6a23      	ldr	r3, [r4, #32]
 8003642:	b11b      	cbz	r3, 800364c <__sinit+0x14>
 8003644:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003648:	f7ff bff0 	b.w	800362c <__sfp_lock_release>
 800364c:	4b04      	ldr	r3, [pc, #16]	@ (8003660 <__sinit+0x28>)
 800364e:	6223      	str	r3, [r4, #32]
 8003650:	4b04      	ldr	r3, [pc, #16]	@ (8003664 <__sinit+0x2c>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d1f5      	bne.n	8003644 <__sinit+0xc>
 8003658:	f7ff ffc4 	bl	80035e4 <global_stdio_init.part.0>
 800365c:	e7f2      	b.n	8003644 <__sinit+0xc>
 800365e:	bf00      	nop
 8003660:	080035a5 	.word	0x080035a5
 8003664:	200003dc 	.word	0x200003dc

08003668 <_fwalk_sglue>:
 8003668:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800366c:	4607      	mov	r7, r0
 800366e:	4688      	mov	r8, r1
 8003670:	4614      	mov	r4, r2
 8003672:	2600      	movs	r6, #0
 8003674:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003678:	f1b9 0901 	subs.w	r9, r9, #1
 800367c:	d505      	bpl.n	800368a <_fwalk_sglue+0x22>
 800367e:	6824      	ldr	r4, [r4, #0]
 8003680:	2c00      	cmp	r4, #0
 8003682:	d1f7      	bne.n	8003674 <_fwalk_sglue+0xc>
 8003684:	4630      	mov	r0, r6
 8003686:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800368a:	89ab      	ldrh	r3, [r5, #12]
 800368c:	2b01      	cmp	r3, #1
 800368e:	d907      	bls.n	80036a0 <_fwalk_sglue+0x38>
 8003690:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003694:	3301      	adds	r3, #1
 8003696:	d003      	beq.n	80036a0 <_fwalk_sglue+0x38>
 8003698:	4629      	mov	r1, r5
 800369a:	4638      	mov	r0, r7
 800369c:	47c0      	blx	r8
 800369e:	4306      	orrs	r6, r0
 80036a0:	3568      	adds	r5, #104	@ 0x68
 80036a2:	e7e9      	b.n	8003678 <_fwalk_sglue+0x10>

080036a4 <__sread>:
 80036a4:	b510      	push	{r4, lr}
 80036a6:	460c      	mov	r4, r1
 80036a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036ac:	f000 f88c 	bl	80037c8 <_read_r>
 80036b0:	2800      	cmp	r0, #0
 80036b2:	bfab      	itete	ge
 80036b4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80036b6:	89a3      	ldrhlt	r3, [r4, #12]
 80036b8:	181b      	addge	r3, r3, r0
 80036ba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80036be:	bfac      	ite	ge
 80036c0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80036c2:	81a3      	strhlt	r3, [r4, #12]
 80036c4:	bd10      	pop	{r4, pc}

080036c6 <__swrite>:
 80036c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036ca:	461f      	mov	r7, r3
 80036cc:	898b      	ldrh	r3, [r1, #12]
 80036ce:	05db      	lsls	r3, r3, #23
 80036d0:	4605      	mov	r5, r0
 80036d2:	460c      	mov	r4, r1
 80036d4:	4616      	mov	r6, r2
 80036d6:	d505      	bpl.n	80036e4 <__swrite+0x1e>
 80036d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036dc:	2302      	movs	r3, #2
 80036de:	2200      	movs	r2, #0
 80036e0:	f000 f860 	bl	80037a4 <_lseek_r>
 80036e4:	89a3      	ldrh	r3, [r4, #12]
 80036e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80036ea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80036ee:	81a3      	strh	r3, [r4, #12]
 80036f0:	4632      	mov	r2, r6
 80036f2:	463b      	mov	r3, r7
 80036f4:	4628      	mov	r0, r5
 80036f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80036fa:	f000 b877 	b.w	80037ec <_write_r>

080036fe <__sseek>:
 80036fe:	b510      	push	{r4, lr}
 8003700:	460c      	mov	r4, r1
 8003702:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003706:	f000 f84d 	bl	80037a4 <_lseek_r>
 800370a:	1c43      	adds	r3, r0, #1
 800370c:	89a3      	ldrh	r3, [r4, #12]
 800370e:	bf15      	itete	ne
 8003710:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003712:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003716:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800371a:	81a3      	strheq	r3, [r4, #12]
 800371c:	bf18      	it	ne
 800371e:	81a3      	strhne	r3, [r4, #12]
 8003720:	bd10      	pop	{r4, pc}

08003722 <__sclose>:
 8003722:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003726:	f000 b82d 	b.w	8003784 <_close_r>
	...

0800372c <_vsiprintf_r>:
 800372c:	b500      	push	{lr}
 800372e:	b09b      	sub	sp, #108	@ 0x6c
 8003730:	9100      	str	r1, [sp, #0]
 8003732:	9104      	str	r1, [sp, #16]
 8003734:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003738:	9105      	str	r1, [sp, #20]
 800373a:	9102      	str	r1, [sp, #8]
 800373c:	4905      	ldr	r1, [pc, #20]	@ (8003754 <_vsiprintf_r+0x28>)
 800373e:	9103      	str	r1, [sp, #12]
 8003740:	4669      	mov	r1, sp
 8003742:	f001 fbbf 	bl	8004ec4 <_svfiprintf_r>
 8003746:	9b00      	ldr	r3, [sp, #0]
 8003748:	2200      	movs	r2, #0
 800374a:	701a      	strb	r2, [r3, #0]
 800374c:	b01b      	add	sp, #108	@ 0x6c
 800374e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003752:	bf00      	nop
 8003754:	ffff0208 	.word	0xffff0208

08003758 <vsiprintf>:
 8003758:	4613      	mov	r3, r2
 800375a:	460a      	mov	r2, r1
 800375c:	4601      	mov	r1, r0
 800375e:	4802      	ldr	r0, [pc, #8]	@ (8003768 <vsiprintf+0x10>)
 8003760:	6800      	ldr	r0, [r0, #0]
 8003762:	f7ff bfe3 	b.w	800372c <_vsiprintf_r>
 8003766:	bf00      	nop
 8003768:	20000010 	.word	0x20000010

0800376c <memset>:
 800376c:	4402      	add	r2, r0
 800376e:	4603      	mov	r3, r0
 8003770:	4293      	cmp	r3, r2
 8003772:	d100      	bne.n	8003776 <memset+0xa>
 8003774:	4770      	bx	lr
 8003776:	f803 1b01 	strb.w	r1, [r3], #1
 800377a:	e7f9      	b.n	8003770 <memset+0x4>

0800377c <_localeconv_r>:
 800377c:	4800      	ldr	r0, [pc, #0]	@ (8003780 <_localeconv_r+0x4>)
 800377e:	4770      	bx	lr
 8003780:	20000150 	.word	0x20000150

08003784 <_close_r>:
 8003784:	b538      	push	{r3, r4, r5, lr}
 8003786:	4d06      	ldr	r5, [pc, #24]	@ (80037a0 <_close_r+0x1c>)
 8003788:	2300      	movs	r3, #0
 800378a:	4604      	mov	r4, r0
 800378c:	4608      	mov	r0, r1
 800378e:	602b      	str	r3, [r5, #0]
 8003790:	f7fe fb54 	bl	8001e3c <_close>
 8003794:	1c43      	adds	r3, r0, #1
 8003796:	d102      	bne.n	800379e <_close_r+0x1a>
 8003798:	682b      	ldr	r3, [r5, #0]
 800379a:	b103      	cbz	r3, 800379e <_close_r+0x1a>
 800379c:	6023      	str	r3, [r4, #0]
 800379e:	bd38      	pop	{r3, r4, r5, pc}
 80037a0:	200003e0 	.word	0x200003e0

080037a4 <_lseek_r>:
 80037a4:	b538      	push	{r3, r4, r5, lr}
 80037a6:	4d07      	ldr	r5, [pc, #28]	@ (80037c4 <_lseek_r+0x20>)
 80037a8:	4604      	mov	r4, r0
 80037aa:	4608      	mov	r0, r1
 80037ac:	4611      	mov	r1, r2
 80037ae:	2200      	movs	r2, #0
 80037b0:	602a      	str	r2, [r5, #0]
 80037b2:	461a      	mov	r2, r3
 80037b4:	f7fe fb69 	bl	8001e8a <_lseek>
 80037b8:	1c43      	adds	r3, r0, #1
 80037ba:	d102      	bne.n	80037c2 <_lseek_r+0x1e>
 80037bc:	682b      	ldr	r3, [r5, #0]
 80037be:	b103      	cbz	r3, 80037c2 <_lseek_r+0x1e>
 80037c0:	6023      	str	r3, [r4, #0]
 80037c2:	bd38      	pop	{r3, r4, r5, pc}
 80037c4:	200003e0 	.word	0x200003e0

080037c8 <_read_r>:
 80037c8:	b538      	push	{r3, r4, r5, lr}
 80037ca:	4d07      	ldr	r5, [pc, #28]	@ (80037e8 <_read_r+0x20>)
 80037cc:	4604      	mov	r4, r0
 80037ce:	4608      	mov	r0, r1
 80037d0:	4611      	mov	r1, r2
 80037d2:	2200      	movs	r2, #0
 80037d4:	602a      	str	r2, [r5, #0]
 80037d6:	461a      	mov	r2, r3
 80037d8:	f7fe faf7 	bl	8001dca <_read>
 80037dc:	1c43      	adds	r3, r0, #1
 80037de:	d102      	bne.n	80037e6 <_read_r+0x1e>
 80037e0:	682b      	ldr	r3, [r5, #0]
 80037e2:	b103      	cbz	r3, 80037e6 <_read_r+0x1e>
 80037e4:	6023      	str	r3, [r4, #0]
 80037e6:	bd38      	pop	{r3, r4, r5, pc}
 80037e8:	200003e0 	.word	0x200003e0

080037ec <_write_r>:
 80037ec:	b538      	push	{r3, r4, r5, lr}
 80037ee:	4d07      	ldr	r5, [pc, #28]	@ (800380c <_write_r+0x20>)
 80037f0:	4604      	mov	r4, r0
 80037f2:	4608      	mov	r0, r1
 80037f4:	4611      	mov	r1, r2
 80037f6:	2200      	movs	r2, #0
 80037f8:	602a      	str	r2, [r5, #0]
 80037fa:	461a      	mov	r2, r3
 80037fc:	f7fe fb02 	bl	8001e04 <_write>
 8003800:	1c43      	adds	r3, r0, #1
 8003802:	d102      	bne.n	800380a <_write_r+0x1e>
 8003804:	682b      	ldr	r3, [r5, #0]
 8003806:	b103      	cbz	r3, 800380a <_write_r+0x1e>
 8003808:	6023      	str	r3, [r4, #0]
 800380a:	bd38      	pop	{r3, r4, r5, pc}
 800380c:	200003e0 	.word	0x200003e0

08003810 <__errno>:
 8003810:	4b01      	ldr	r3, [pc, #4]	@ (8003818 <__errno+0x8>)
 8003812:	6818      	ldr	r0, [r3, #0]
 8003814:	4770      	bx	lr
 8003816:	bf00      	nop
 8003818:	20000010 	.word	0x20000010

0800381c <__libc_init_array>:
 800381c:	b570      	push	{r4, r5, r6, lr}
 800381e:	4d0d      	ldr	r5, [pc, #52]	@ (8003854 <__libc_init_array+0x38>)
 8003820:	4c0d      	ldr	r4, [pc, #52]	@ (8003858 <__libc_init_array+0x3c>)
 8003822:	1b64      	subs	r4, r4, r5
 8003824:	10a4      	asrs	r4, r4, #2
 8003826:	2600      	movs	r6, #0
 8003828:	42a6      	cmp	r6, r4
 800382a:	d109      	bne.n	8003840 <__libc_init_array+0x24>
 800382c:	4d0b      	ldr	r5, [pc, #44]	@ (800385c <__libc_init_array+0x40>)
 800382e:	4c0c      	ldr	r4, [pc, #48]	@ (8003860 <__libc_init_array+0x44>)
 8003830:	f002 f8e2 	bl	80059f8 <_init>
 8003834:	1b64      	subs	r4, r4, r5
 8003836:	10a4      	asrs	r4, r4, #2
 8003838:	2600      	movs	r6, #0
 800383a:	42a6      	cmp	r6, r4
 800383c:	d105      	bne.n	800384a <__libc_init_array+0x2e>
 800383e:	bd70      	pop	{r4, r5, r6, pc}
 8003840:	f855 3b04 	ldr.w	r3, [r5], #4
 8003844:	4798      	blx	r3
 8003846:	3601      	adds	r6, #1
 8003848:	e7ee      	b.n	8003828 <__libc_init_array+0xc>
 800384a:	f855 3b04 	ldr.w	r3, [r5], #4
 800384e:	4798      	blx	r3
 8003850:	3601      	adds	r6, #1
 8003852:	e7f2      	b.n	800383a <__libc_init_array+0x1e>
 8003854:	08005da8 	.word	0x08005da8
 8003858:	08005da8 	.word	0x08005da8
 800385c:	08005da8 	.word	0x08005da8
 8003860:	08005dac 	.word	0x08005dac

08003864 <__retarget_lock_init_recursive>:
 8003864:	4770      	bx	lr

08003866 <__retarget_lock_acquire_recursive>:
 8003866:	4770      	bx	lr

08003868 <__retarget_lock_release_recursive>:
 8003868:	4770      	bx	lr

0800386a <quorem>:
 800386a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800386e:	6903      	ldr	r3, [r0, #16]
 8003870:	690c      	ldr	r4, [r1, #16]
 8003872:	42a3      	cmp	r3, r4
 8003874:	4607      	mov	r7, r0
 8003876:	db7e      	blt.n	8003976 <quorem+0x10c>
 8003878:	3c01      	subs	r4, #1
 800387a:	f101 0814 	add.w	r8, r1, #20
 800387e:	00a3      	lsls	r3, r4, #2
 8003880:	f100 0514 	add.w	r5, r0, #20
 8003884:	9300      	str	r3, [sp, #0]
 8003886:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800388a:	9301      	str	r3, [sp, #4]
 800388c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003890:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003894:	3301      	adds	r3, #1
 8003896:	429a      	cmp	r2, r3
 8003898:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800389c:	fbb2 f6f3 	udiv	r6, r2, r3
 80038a0:	d32e      	bcc.n	8003900 <quorem+0x96>
 80038a2:	f04f 0a00 	mov.w	sl, #0
 80038a6:	46c4      	mov	ip, r8
 80038a8:	46ae      	mov	lr, r5
 80038aa:	46d3      	mov	fp, sl
 80038ac:	f85c 3b04 	ldr.w	r3, [ip], #4
 80038b0:	b298      	uxth	r0, r3
 80038b2:	fb06 a000 	mla	r0, r6, r0, sl
 80038b6:	0c02      	lsrs	r2, r0, #16
 80038b8:	0c1b      	lsrs	r3, r3, #16
 80038ba:	fb06 2303 	mla	r3, r6, r3, r2
 80038be:	f8de 2000 	ldr.w	r2, [lr]
 80038c2:	b280      	uxth	r0, r0
 80038c4:	b292      	uxth	r2, r2
 80038c6:	1a12      	subs	r2, r2, r0
 80038c8:	445a      	add	r2, fp
 80038ca:	f8de 0000 	ldr.w	r0, [lr]
 80038ce:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80038d2:	b29b      	uxth	r3, r3
 80038d4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80038d8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80038dc:	b292      	uxth	r2, r2
 80038de:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80038e2:	45e1      	cmp	r9, ip
 80038e4:	f84e 2b04 	str.w	r2, [lr], #4
 80038e8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80038ec:	d2de      	bcs.n	80038ac <quorem+0x42>
 80038ee:	9b00      	ldr	r3, [sp, #0]
 80038f0:	58eb      	ldr	r3, [r5, r3]
 80038f2:	b92b      	cbnz	r3, 8003900 <quorem+0x96>
 80038f4:	9b01      	ldr	r3, [sp, #4]
 80038f6:	3b04      	subs	r3, #4
 80038f8:	429d      	cmp	r5, r3
 80038fa:	461a      	mov	r2, r3
 80038fc:	d32f      	bcc.n	800395e <quorem+0xf4>
 80038fe:	613c      	str	r4, [r7, #16]
 8003900:	4638      	mov	r0, r7
 8003902:	f001 f97b 	bl	8004bfc <__mcmp>
 8003906:	2800      	cmp	r0, #0
 8003908:	db25      	blt.n	8003956 <quorem+0xec>
 800390a:	4629      	mov	r1, r5
 800390c:	2000      	movs	r0, #0
 800390e:	f858 2b04 	ldr.w	r2, [r8], #4
 8003912:	f8d1 c000 	ldr.w	ip, [r1]
 8003916:	fa1f fe82 	uxth.w	lr, r2
 800391a:	fa1f f38c 	uxth.w	r3, ip
 800391e:	eba3 030e 	sub.w	r3, r3, lr
 8003922:	4403      	add	r3, r0
 8003924:	0c12      	lsrs	r2, r2, #16
 8003926:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800392a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800392e:	b29b      	uxth	r3, r3
 8003930:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003934:	45c1      	cmp	r9, r8
 8003936:	f841 3b04 	str.w	r3, [r1], #4
 800393a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800393e:	d2e6      	bcs.n	800390e <quorem+0xa4>
 8003940:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003944:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003948:	b922      	cbnz	r2, 8003954 <quorem+0xea>
 800394a:	3b04      	subs	r3, #4
 800394c:	429d      	cmp	r5, r3
 800394e:	461a      	mov	r2, r3
 8003950:	d30b      	bcc.n	800396a <quorem+0x100>
 8003952:	613c      	str	r4, [r7, #16]
 8003954:	3601      	adds	r6, #1
 8003956:	4630      	mov	r0, r6
 8003958:	b003      	add	sp, #12
 800395a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800395e:	6812      	ldr	r2, [r2, #0]
 8003960:	3b04      	subs	r3, #4
 8003962:	2a00      	cmp	r2, #0
 8003964:	d1cb      	bne.n	80038fe <quorem+0x94>
 8003966:	3c01      	subs	r4, #1
 8003968:	e7c6      	b.n	80038f8 <quorem+0x8e>
 800396a:	6812      	ldr	r2, [r2, #0]
 800396c:	3b04      	subs	r3, #4
 800396e:	2a00      	cmp	r2, #0
 8003970:	d1ef      	bne.n	8003952 <quorem+0xe8>
 8003972:	3c01      	subs	r4, #1
 8003974:	e7ea      	b.n	800394c <quorem+0xe2>
 8003976:	2000      	movs	r0, #0
 8003978:	e7ee      	b.n	8003958 <quorem+0xee>
 800397a:	0000      	movs	r0, r0
 800397c:	0000      	movs	r0, r0
	...

08003980 <_dtoa_r>:
 8003980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003984:	69c7      	ldr	r7, [r0, #28]
 8003986:	b099      	sub	sp, #100	@ 0x64
 8003988:	ed8d 0b02 	vstr	d0, [sp, #8]
 800398c:	ec55 4b10 	vmov	r4, r5, d0
 8003990:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8003992:	9109      	str	r1, [sp, #36]	@ 0x24
 8003994:	4683      	mov	fp, r0
 8003996:	920e      	str	r2, [sp, #56]	@ 0x38
 8003998:	9313      	str	r3, [sp, #76]	@ 0x4c
 800399a:	b97f      	cbnz	r7, 80039bc <_dtoa_r+0x3c>
 800399c:	2010      	movs	r0, #16
 800399e:	f000 fdfd 	bl	800459c <malloc>
 80039a2:	4602      	mov	r2, r0
 80039a4:	f8cb 001c 	str.w	r0, [fp, #28]
 80039a8:	b920      	cbnz	r0, 80039b4 <_dtoa_r+0x34>
 80039aa:	4ba7      	ldr	r3, [pc, #668]	@ (8003c48 <_dtoa_r+0x2c8>)
 80039ac:	21ef      	movs	r1, #239	@ 0xef
 80039ae:	48a7      	ldr	r0, [pc, #668]	@ (8003c4c <_dtoa_r+0x2cc>)
 80039b0:	f001 fc68 	bl	8005284 <__assert_func>
 80039b4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80039b8:	6007      	str	r7, [r0, #0]
 80039ba:	60c7      	str	r7, [r0, #12]
 80039bc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80039c0:	6819      	ldr	r1, [r3, #0]
 80039c2:	b159      	cbz	r1, 80039dc <_dtoa_r+0x5c>
 80039c4:	685a      	ldr	r2, [r3, #4]
 80039c6:	604a      	str	r2, [r1, #4]
 80039c8:	2301      	movs	r3, #1
 80039ca:	4093      	lsls	r3, r2
 80039cc:	608b      	str	r3, [r1, #8]
 80039ce:	4658      	mov	r0, fp
 80039d0:	f000 feda 	bl	8004788 <_Bfree>
 80039d4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80039d8:	2200      	movs	r2, #0
 80039da:	601a      	str	r2, [r3, #0]
 80039dc:	1e2b      	subs	r3, r5, #0
 80039de:	bfb9      	ittee	lt
 80039e0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80039e4:	9303      	strlt	r3, [sp, #12]
 80039e6:	2300      	movge	r3, #0
 80039e8:	6033      	strge	r3, [r6, #0]
 80039ea:	9f03      	ldr	r7, [sp, #12]
 80039ec:	4b98      	ldr	r3, [pc, #608]	@ (8003c50 <_dtoa_r+0x2d0>)
 80039ee:	bfbc      	itt	lt
 80039f0:	2201      	movlt	r2, #1
 80039f2:	6032      	strlt	r2, [r6, #0]
 80039f4:	43bb      	bics	r3, r7
 80039f6:	d112      	bne.n	8003a1e <_dtoa_r+0x9e>
 80039f8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80039fa:	f242 730f 	movw	r3, #9999	@ 0x270f
 80039fe:	6013      	str	r3, [r2, #0]
 8003a00:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8003a04:	4323      	orrs	r3, r4
 8003a06:	f000 854d 	beq.w	80044a4 <_dtoa_r+0xb24>
 8003a0a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8003a0c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8003c64 <_dtoa_r+0x2e4>
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	f000 854f 	beq.w	80044b4 <_dtoa_r+0xb34>
 8003a16:	f10a 0303 	add.w	r3, sl, #3
 8003a1a:	f000 bd49 	b.w	80044b0 <_dtoa_r+0xb30>
 8003a1e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8003a22:	2200      	movs	r2, #0
 8003a24:	ec51 0b17 	vmov	r0, r1, d7
 8003a28:	2300      	movs	r3, #0
 8003a2a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8003a2e:	f7fd f85b 	bl	8000ae8 <__aeabi_dcmpeq>
 8003a32:	4680      	mov	r8, r0
 8003a34:	b158      	cbz	r0, 8003a4e <_dtoa_r+0xce>
 8003a36:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8003a38:	2301      	movs	r3, #1
 8003a3a:	6013      	str	r3, [r2, #0]
 8003a3c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8003a3e:	b113      	cbz	r3, 8003a46 <_dtoa_r+0xc6>
 8003a40:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8003a42:	4b84      	ldr	r3, [pc, #528]	@ (8003c54 <_dtoa_r+0x2d4>)
 8003a44:	6013      	str	r3, [r2, #0]
 8003a46:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8003c68 <_dtoa_r+0x2e8>
 8003a4a:	f000 bd33 	b.w	80044b4 <_dtoa_r+0xb34>
 8003a4e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8003a52:	aa16      	add	r2, sp, #88	@ 0x58
 8003a54:	a917      	add	r1, sp, #92	@ 0x5c
 8003a56:	4658      	mov	r0, fp
 8003a58:	f001 f980 	bl	8004d5c <__d2b>
 8003a5c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8003a60:	4681      	mov	r9, r0
 8003a62:	2e00      	cmp	r6, #0
 8003a64:	d077      	beq.n	8003b56 <_dtoa_r+0x1d6>
 8003a66:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003a68:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8003a6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a70:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003a74:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8003a78:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8003a7c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8003a80:	4619      	mov	r1, r3
 8003a82:	2200      	movs	r2, #0
 8003a84:	4b74      	ldr	r3, [pc, #464]	@ (8003c58 <_dtoa_r+0x2d8>)
 8003a86:	f7fc fc0f 	bl	80002a8 <__aeabi_dsub>
 8003a8a:	a369      	add	r3, pc, #420	@ (adr r3, 8003c30 <_dtoa_r+0x2b0>)
 8003a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a90:	f7fc fdc2 	bl	8000618 <__aeabi_dmul>
 8003a94:	a368      	add	r3, pc, #416	@ (adr r3, 8003c38 <_dtoa_r+0x2b8>)
 8003a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a9a:	f7fc fc07 	bl	80002ac <__adddf3>
 8003a9e:	4604      	mov	r4, r0
 8003aa0:	4630      	mov	r0, r6
 8003aa2:	460d      	mov	r5, r1
 8003aa4:	f7fc fd4e 	bl	8000544 <__aeabi_i2d>
 8003aa8:	a365      	add	r3, pc, #404	@ (adr r3, 8003c40 <_dtoa_r+0x2c0>)
 8003aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aae:	f7fc fdb3 	bl	8000618 <__aeabi_dmul>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	460b      	mov	r3, r1
 8003ab6:	4620      	mov	r0, r4
 8003ab8:	4629      	mov	r1, r5
 8003aba:	f7fc fbf7 	bl	80002ac <__adddf3>
 8003abe:	4604      	mov	r4, r0
 8003ac0:	460d      	mov	r5, r1
 8003ac2:	f7fd f859 	bl	8000b78 <__aeabi_d2iz>
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	4607      	mov	r7, r0
 8003aca:	2300      	movs	r3, #0
 8003acc:	4620      	mov	r0, r4
 8003ace:	4629      	mov	r1, r5
 8003ad0:	f7fd f814 	bl	8000afc <__aeabi_dcmplt>
 8003ad4:	b140      	cbz	r0, 8003ae8 <_dtoa_r+0x168>
 8003ad6:	4638      	mov	r0, r7
 8003ad8:	f7fc fd34 	bl	8000544 <__aeabi_i2d>
 8003adc:	4622      	mov	r2, r4
 8003ade:	462b      	mov	r3, r5
 8003ae0:	f7fd f802 	bl	8000ae8 <__aeabi_dcmpeq>
 8003ae4:	b900      	cbnz	r0, 8003ae8 <_dtoa_r+0x168>
 8003ae6:	3f01      	subs	r7, #1
 8003ae8:	2f16      	cmp	r7, #22
 8003aea:	d851      	bhi.n	8003b90 <_dtoa_r+0x210>
 8003aec:	4b5b      	ldr	r3, [pc, #364]	@ (8003c5c <_dtoa_r+0x2dc>)
 8003aee:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8003af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003af6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003afa:	f7fc ffff 	bl	8000afc <__aeabi_dcmplt>
 8003afe:	2800      	cmp	r0, #0
 8003b00:	d048      	beq.n	8003b94 <_dtoa_r+0x214>
 8003b02:	3f01      	subs	r7, #1
 8003b04:	2300      	movs	r3, #0
 8003b06:	9312      	str	r3, [sp, #72]	@ 0x48
 8003b08:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8003b0a:	1b9b      	subs	r3, r3, r6
 8003b0c:	1e5a      	subs	r2, r3, #1
 8003b0e:	bf44      	itt	mi
 8003b10:	f1c3 0801 	rsbmi	r8, r3, #1
 8003b14:	2300      	movmi	r3, #0
 8003b16:	9208      	str	r2, [sp, #32]
 8003b18:	bf54      	ite	pl
 8003b1a:	f04f 0800 	movpl.w	r8, #0
 8003b1e:	9308      	strmi	r3, [sp, #32]
 8003b20:	2f00      	cmp	r7, #0
 8003b22:	db39      	blt.n	8003b98 <_dtoa_r+0x218>
 8003b24:	9b08      	ldr	r3, [sp, #32]
 8003b26:	970f      	str	r7, [sp, #60]	@ 0x3c
 8003b28:	443b      	add	r3, r7
 8003b2a:	9308      	str	r3, [sp, #32]
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	930a      	str	r3, [sp, #40]	@ 0x28
 8003b30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003b32:	2b09      	cmp	r3, #9
 8003b34:	d864      	bhi.n	8003c00 <_dtoa_r+0x280>
 8003b36:	2b05      	cmp	r3, #5
 8003b38:	bfc4      	itt	gt
 8003b3a:	3b04      	subgt	r3, #4
 8003b3c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8003b3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003b40:	f1a3 0302 	sub.w	r3, r3, #2
 8003b44:	bfcc      	ite	gt
 8003b46:	2400      	movgt	r4, #0
 8003b48:	2401      	movle	r4, #1
 8003b4a:	2b03      	cmp	r3, #3
 8003b4c:	d863      	bhi.n	8003c16 <_dtoa_r+0x296>
 8003b4e:	e8df f003 	tbb	[pc, r3]
 8003b52:	372a      	.short	0x372a
 8003b54:	5535      	.short	0x5535
 8003b56:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8003b5a:	441e      	add	r6, r3
 8003b5c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8003b60:	2b20      	cmp	r3, #32
 8003b62:	bfc1      	itttt	gt
 8003b64:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8003b68:	409f      	lslgt	r7, r3
 8003b6a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8003b6e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8003b72:	bfd6      	itet	le
 8003b74:	f1c3 0320 	rsble	r3, r3, #32
 8003b78:	ea47 0003 	orrgt.w	r0, r7, r3
 8003b7c:	fa04 f003 	lslle.w	r0, r4, r3
 8003b80:	f7fc fcd0 	bl	8000524 <__aeabi_ui2d>
 8003b84:	2201      	movs	r2, #1
 8003b86:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8003b8a:	3e01      	subs	r6, #1
 8003b8c:	9214      	str	r2, [sp, #80]	@ 0x50
 8003b8e:	e777      	b.n	8003a80 <_dtoa_r+0x100>
 8003b90:	2301      	movs	r3, #1
 8003b92:	e7b8      	b.n	8003b06 <_dtoa_r+0x186>
 8003b94:	9012      	str	r0, [sp, #72]	@ 0x48
 8003b96:	e7b7      	b.n	8003b08 <_dtoa_r+0x188>
 8003b98:	427b      	negs	r3, r7
 8003b9a:	930a      	str	r3, [sp, #40]	@ 0x28
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	eba8 0807 	sub.w	r8, r8, r7
 8003ba2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8003ba4:	e7c4      	b.n	8003b30 <_dtoa_r+0x1b0>
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003baa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	dc35      	bgt.n	8003c1c <_dtoa_r+0x29c>
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	9300      	str	r3, [sp, #0]
 8003bb4:	9307      	str	r3, [sp, #28]
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	920e      	str	r2, [sp, #56]	@ 0x38
 8003bba:	e00b      	b.n	8003bd4 <_dtoa_r+0x254>
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e7f3      	b.n	8003ba8 <_dtoa_r+0x228>
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003bc4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003bc6:	18fb      	adds	r3, r7, r3
 8003bc8:	9300      	str	r3, [sp, #0]
 8003bca:	3301      	adds	r3, #1
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	9307      	str	r3, [sp, #28]
 8003bd0:	bfb8      	it	lt
 8003bd2:	2301      	movlt	r3, #1
 8003bd4:	f8db 001c 	ldr.w	r0, [fp, #28]
 8003bd8:	2100      	movs	r1, #0
 8003bda:	2204      	movs	r2, #4
 8003bdc:	f102 0514 	add.w	r5, r2, #20
 8003be0:	429d      	cmp	r5, r3
 8003be2:	d91f      	bls.n	8003c24 <_dtoa_r+0x2a4>
 8003be4:	6041      	str	r1, [r0, #4]
 8003be6:	4658      	mov	r0, fp
 8003be8:	f000 fd8e 	bl	8004708 <_Balloc>
 8003bec:	4682      	mov	sl, r0
 8003bee:	2800      	cmp	r0, #0
 8003bf0:	d13c      	bne.n	8003c6c <_dtoa_r+0x2ec>
 8003bf2:	4b1b      	ldr	r3, [pc, #108]	@ (8003c60 <_dtoa_r+0x2e0>)
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	f240 11af 	movw	r1, #431	@ 0x1af
 8003bfa:	e6d8      	b.n	80039ae <_dtoa_r+0x2e>
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e7e0      	b.n	8003bc2 <_dtoa_r+0x242>
 8003c00:	2401      	movs	r4, #1
 8003c02:	2300      	movs	r3, #0
 8003c04:	9309      	str	r3, [sp, #36]	@ 0x24
 8003c06:	940b      	str	r4, [sp, #44]	@ 0x2c
 8003c08:	f04f 33ff 	mov.w	r3, #4294967295
 8003c0c:	9300      	str	r3, [sp, #0]
 8003c0e:	9307      	str	r3, [sp, #28]
 8003c10:	2200      	movs	r2, #0
 8003c12:	2312      	movs	r3, #18
 8003c14:	e7d0      	b.n	8003bb8 <_dtoa_r+0x238>
 8003c16:	2301      	movs	r3, #1
 8003c18:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003c1a:	e7f5      	b.n	8003c08 <_dtoa_r+0x288>
 8003c1c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003c1e:	9300      	str	r3, [sp, #0]
 8003c20:	9307      	str	r3, [sp, #28]
 8003c22:	e7d7      	b.n	8003bd4 <_dtoa_r+0x254>
 8003c24:	3101      	adds	r1, #1
 8003c26:	0052      	lsls	r2, r2, #1
 8003c28:	e7d8      	b.n	8003bdc <_dtoa_r+0x25c>
 8003c2a:	bf00      	nop
 8003c2c:	f3af 8000 	nop.w
 8003c30:	636f4361 	.word	0x636f4361
 8003c34:	3fd287a7 	.word	0x3fd287a7
 8003c38:	8b60c8b3 	.word	0x8b60c8b3
 8003c3c:	3fc68a28 	.word	0x3fc68a28
 8003c40:	509f79fb 	.word	0x509f79fb
 8003c44:	3fd34413 	.word	0x3fd34413
 8003c48:	08005a6d 	.word	0x08005a6d
 8003c4c:	08005a84 	.word	0x08005a84
 8003c50:	7ff00000 	.word	0x7ff00000
 8003c54:	08005a3d 	.word	0x08005a3d
 8003c58:	3ff80000 	.word	0x3ff80000
 8003c5c:	08005b80 	.word	0x08005b80
 8003c60:	08005adc 	.word	0x08005adc
 8003c64:	08005a69 	.word	0x08005a69
 8003c68:	08005a3c 	.word	0x08005a3c
 8003c6c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8003c70:	6018      	str	r0, [r3, #0]
 8003c72:	9b07      	ldr	r3, [sp, #28]
 8003c74:	2b0e      	cmp	r3, #14
 8003c76:	f200 80a4 	bhi.w	8003dc2 <_dtoa_r+0x442>
 8003c7a:	2c00      	cmp	r4, #0
 8003c7c:	f000 80a1 	beq.w	8003dc2 <_dtoa_r+0x442>
 8003c80:	2f00      	cmp	r7, #0
 8003c82:	dd33      	ble.n	8003cec <_dtoa_r+0x36c>
 8003c84:	4bad      	ldr	r3, [pc, #692]	@ (8003f3c <_dtoa_r+0x5bc>)
 8003c86:	f007 020f 	and.w	r2, r7, #15
 8003c8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003c8e:	ed93 7b00 	vldr	d7, [r3]
 8003c92:	05f8      	lsls	r0, r7, #23
 8003c94:	ed8d 7b04 	vstr	d7, [sp, #16]
 8003c98:	ea4f 1427 	mov.w	r4, r7, asr #4
 8003c9c:	d516      	bpl.n	8003ccc <_dtoa_r+0x34c>
 8003c9e:	4ba8      	ldr	r3, [pc, #672]	@ (8003f40 <_dtoa_r+0x5c0>)
 8003ca0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003ca4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003ca8:	f7fc fde0 	bl	800086c <__aeabi_ddiv>
 8003cac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003cb0:	f004 040f 	and.w	r4, r4, #15
 8003cb4:	2603      	movs	r6, #3
 8003cb6:	4da2      	ldr	r5, [pc, #648]	@ (8003f40 <_dtoa_r+0x5c0>)
 8003cb8:	b954      	cbnz	r4, 8003cd0 <_dtoa_r+0x350>
 8003cba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003cbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003cc2:	f7fc fdd3 	bl	800086c <__aeabi_ddiv>
 8003cc6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003cca:	e028      	b.n	8003d1e <_dtoa_r+0x39e>
 8003ccc:	2602      	movs	r6, #2
 8003cce:	e7f2      	b.n	8003cb6 <_dtoa_r+0x336>
 8003cd0:	07e1      	lsls	r1, r4, #31
 8003cd2:	d508      	bpl.n	8003ce6 <_dtoa_r+0x366>
 8003cd4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003cd8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003cdc:	f7fc fc9c 	bl	8000618 <__aeabi_dmul>
 8003ce0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003ce4:	3601      	adds	r6, #1
 8003ce6:	1064      	asrs	r4, r4, #1
 8003ce8:	3508      	adds	r5, #8
 8003cea:	e7e5      	b.n	8003cb8 <_dtoa_r+0x338>
 8003cec:	f000 80d2 	beq.w	8003e94 <_dtoa_r+0x514>
 8003cf0:	427c      	negs	r4, r7
 8003cf2:	4b92      	ldr	r3, [pc, #584]	@ (8003f3c <_dtoa_r+0x5bc>)
 8003cf4:	4d92      	ldr	r5, [pc, #584]	@ (8003f40 <_dtoa_r+0x5c0>)
 8003cf6:	f004 020f 	and.w	r2, r4, #15
 8003cfa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d02:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003d06:	f7fc fc87 	bl	8000618 <__aeabi_dmul>
 8003d0a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003d0e:	1124      	asrs	r4, r4, #4
 8003d10:	2300      	movs	r3, #0
 8003d12:	2602      	movs	r6, #2
 8003d14:	2c00      	cmp	r4, #0
 8003d16:	f040 80b2 	bne.w	8003e7e <_dtoa_r+0x4fe>
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d1d3      	bne.n	8003cc6 <_dtoa_r+0x346>
 8003d1e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8003d20:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	f000 80b7 	beq.w	8003e98 <_dtoa_r+0x518>
 8003d2a:	4b86      	ldr	r3, [pc, #536]	@ (8003f44 <_dtoa_r+0x5c4>)
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	4620      	mov	r0, r4
 8003d30:	4629      	mov	r1, r5
 8003d32:	f7fc fee3 	bl	8000afc <__aeabi_dcmplt>
 8003d36:	2800      	cmp	r0, #0
 8003d38:	f000 80ae 	beq.w	8003e98 <_dtoa_r+0x518>
 8003d3c:	9b07      	ldr	r3, [sp, #28]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	f000 80aa 	beq.w	8003e98 <_dtoa_r+0x518>
 8003d44:	9b00      	ldr	r3, [sp, #0]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	dd37      	ble.n	8003dba <_dtoa_r+0x43a>
 8003d4a:	1e7b      	subs	r3, r7, #1
 8003d4c:	9304      	str	r3, [sp, #16]
 8003d4e:	4620      	mov	r0, r4
 8003d50:	4b7d      	ldr	r3, [pc, #500]	@ (8003f48 <_dtoa_r+0x5c8>)
 8003d52:	2200      	movs	r2, #0
 8003d54:	4629      	mov	r1, r5
 8003d56:	f7fc fc5f 	bl	8000618 <__aeabi_dmul>
 8003d5a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003d5e:	9c00      	ldr	r4, [sp, #0]
 8003d60:	3601      	adds	r6, #1
 8003d62:	4630      	mov	r0, r6
 8003d64:	f7fc fbee 	bl	8000544 <__aeabi_i2d>
 8003d68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003d6c:	f7fc fc54 	bl	8000618 <__aeabi_dmul>
 8003d70:	4b76      	ldr	r3, [pc, #472]	@ (8003f4c <_dtoa_r+0x5cc>)
 8003d72:	2200      	movs	r2, #0
 8003d74:	f7fc fa9a 	bl	80002ac <__adddf3>
 8003d78:	4605      	mov	r5, r0
 8003d7a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8003d7e:	2c00      	cmp	r4, #0
 8003d80:	f040 808d 	bne.w	8003e9e <_dtoa_r+0x51e>
 8003d84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003d88:	4b71      	ldr	r3, [pc, #452]	@ (8003f50 <_dtoa_r+0x5d0>)
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f7fc fa8c 	bl	80002a8 <__aeabi_dsub>
 8003d90:	4602      	mov	r2, r0
 8003d92:	460b      	mov	r3, r1
 8003d94:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003d98:	462a      	mov	r2, r5
 8003d9a:	4633      	mov	r3, r6
 8003d9c:	f7fc fecc 	bl	8000b38 <__aeabi_dcmpgt>
 8003da0:	2800      	cmp	r0, #0
 8003da2:	f040 828b 	bne.w	80042bc <_dtoa_r+0x93c>
 8003da6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003daa:	462a      	mov	r2, r5
 8003dac:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8003db0:	f7fc fea4 	bl	8000afc <__aeabi_dcmplt>
 8003db4:	2800      	cmp	r0, #0
 8003db6:	f040 8128 	bne.w	800400a <_dtoa_r+0x68a>
 8003dba:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8003dbe:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8003dc2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	f2c0 815a 	blt.w	800407e <_dtoa_r+0x6fe>
 8003dca:	2f0e      	cmp	r7, #14
 8003dcc:	f300 8157 	bgt.w	800407e <_dtoa_r+0x6fe>
 8003dd0:	4b5a      	ldr	r3, [pc, #360]	@ (8003f3c <_dtoa_r+0x5bc>)
 8003dd2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8003dd6:	ed93 7b00 	vldr	d7, [r3]
 8003dda:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	ed8d 7b00 	vstr	d7, [sp]
 8003de2:	da03      	bge.n	8003dec <_dtoa_r+0x46c>
 8003de4:	9b07      	ldr	r3, [sp, #28]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	f340 8101 	ble.w	8003fee <_dtoa_r+0x66e>
 8003dec:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8003df0:	4656      	mov	r6, sl
 8003df2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003df6:	4620      	mov	r0, r4
 8003df8:	4629      	mov	r1, r5
 8003dfa:	f7fc fd37 	bl	800086c <__aeabi_ddiv>
 8003dfe:	f7fc febb 	bl	8000b78 <__aeabi_d2iz>
 8003e02:	4680      	mov	r8, r0
 8003e04:	f7fc fb9e 	bl	8000544 <__aeabi_i2d>
 8003e08:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003e0c:	f7fc fc04 	bl	8000618 <__aeabi_dmul>
 8003e10:	4602      	mov	r2, r0
 8003e12:	460b      	mov	r3, r1
 8003e14:	4620      	mov	r0, r4
 8003e16:	4629      	mov	r1, r5
 8003e18:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8003e1c:	f7fc fa44 	bl	80002a8 <__aeabi_dsub>
 8003e20:	f806 4b01 	strb.w	r4, [r6], #1
 8003e24:	9d07      	ldr	r5, [sp, #28]
 8003e26:	eba6 040a 	sub.w	r4, r6, sl
 8003e2a:	42a5      	cmp	r5, r4
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	460b      	mov	r3, r1
 8003e30:	f040 8117 	bne.w	8004062 <_dtoa_r+0x6e2>
 8003e34:	f7fc fa3a 	bl	80002ac <__adddf3>
 8003e38:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003e3c:	4604      	mov	r4, r0
 8003e3e:	460d      	mov	r5, r1
 8003e40:	f7fc fe7a 	bl	8000b38 <__aeabi_dcmpgt>
 8003e44:	2800      	cmp	r0, #0
 8003e46:	f040 80f9 	bne.w	800403c <_dtoa_r+0x6bc>
 8003e4a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003e4e:	4620      	mov	r0, r4
 8003e50:	4629      	mov	r1, r5
 8003e52:	f7fc fe49 	bl	8000ae8 <__aeabi_dcmpeq>
 8003e56:	b118      	cbz	r0, 8003e60 <_dtoa_r+0x4e0>
 8003e58:	f018 0f01 	tst.w	r8, #1
 8003e5c:	f040 80ee 	bne.w	800403c <_dtoa_r+0x6bc>
 8003e60:	4649      	mov	r1, r9
 8003e62:	4658      	mov	r0, fp
 8003e64:	f000 fc90 	bl	8004788 <_Bfree>
 8003e68:	2300      	movs	r3, #0
 8003e6a:	7033      	strb	r3, [r6, #0]
 8003e6c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8003e6e:	3701      	adds	r7, #1
 8003e70:	601f      	str	r7, [r3, #0]
 8003e72:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	f000 831d 	beq.w	80044b4 <_dtoa_r+0xb34>
 8003e7a:	601e      	str	r6, [r3, #0]
 8003e7c:	e31a      	b.n	80044b4 <_dtoa_r+0xb34>
 8003e7e:	07e2      	lsls	r2, r4, #31
 8003e80:	d505      	bpl.n	8003e8e <_dtoa_r+0x50e>
 8003e82:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003e86:	f7fc fbc7 	bl	8000618 <__aeabi_dmul>
 8003e8a:	3601      	adds	r6, #1
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	1064      	asrs	r4, r4, #1
 8003e90:	3508      	adds	r5, #8
 8003e92:	e73f      	b.n	8003d14 <_dtoa_r+0x394>
 8003e94:	2602      	movs	r6, #2
 8003e96:	e742      	b.n	8003d1e <_dtoa_r+0x39e>
 8003e98:	9c07      	ldr	r4, [sp, #28]
 8003e9a:	9704      	str	r7, [sp, #16]
 8003e9c:	e761      	b.n	8003d62 <_dtoa_r+0x3e2>
 8003e9e:	4b27      	ldr	r3, [pc, #156]	@ (8003f3c <_dtoa_r+0x5bc>)
 8003ea0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8003ea2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003ea6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8003eaa:	4454      	add	r4, sl
 8003eac:	2900      	cmp	r1, #0
 8003eae:	d053      	beq.n	8003f58 <_dtoa_r+0x5d8>
 8003eb0:	4928      	ldr	r1, [pc, #160]	@ (8003f54 <_dtoa_r+0x5d4>)
 8003eb2:	2000      	movs	r0, #0
 8003eb4:	f7fc fcda 	bl	800086c <__aeabi_ddiv>
 8003eb8:	4633      	mov	r3, r6
 8003eba:	462a      	mov	r2, r5
 8003ebc:	f7fc f9f4 	bl	80002a8 <__aeabi_dsub>
 8003ec0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8003ec4:	4656      	mov	r6, sl
 8003ec6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003eca:	f7fc fe55 	bl	8000b78 <__aeabi_d2iz>
 8003ece:	4605      	mov	r5, r0
 8003ed0:	f7fc fb38 	bl	8000544 <__aeabi_i2d>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	460b      	mov	r3, r1
 8003ed8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003edc:	f7fc f9e4 	bl	80002a8 <__aeabi_dsub>
 8003ee0:	3530      	adds	r5, #48	@ 0x30
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	460b      	mov	r3, r1
 8003ee6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003eea:	f806 5b01 	strb.w	r5, [r6], #1
 8003eee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8003ef2:	f7fc fe03 	bl	8000afc <__aeabi_dcmplt>
 8003ef6:	2800      	cmp	r0, #0
 8003ef8:	d171      	bne.n	8003fde <_dtoa_r+0x65e>
 8003efa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003efe:	4911      	ldr	r1, [pc, #68]	@ (8003f44 <_dtoa_r+0x5c4>)
 8003f00:	2000      	movs	r0, #0
 8003f02:	f7fc f9d1 	bl	80002a8 <__aeabi_dsub>
 8003f06:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8003f0a:	f7fc fdf7 	bl	8000afc <__aeabi_dcmplt>
 8003f0e:	2800      	cmp	r0, #0
 8003f10:	f040 8095 	bne.w	800403e <_dtoa_r+0x6be>
 8003f14:	42a6      	cmp	r6, r4
 8003f16:	f43f af50 	beq.w	8003dba <_dtoa_r+0x43a>
 8003f1a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8003f1e:	4b0a      	ldr	r3, [pc, #40]	@ (8003f48 <_dtoa_r+0x5c8>)
 8003f20:	2200      	movs	r2, #0
 8003f22:	f7fc fb79 	bl	8000618 <__aeabi_dmul>
 8003f26:	4b08      	ldr	r3, [pc, #32]	@ (8003f48 <_dtoa_r+0x5c8>)
 8003f28:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003f32:	f7fc fb71 	bl	8000618 <__aeabi_dmul>
 8003f36:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003f3a:	e7c4      	b.n	8003ec6 <_dtoa_r+0x546>
 8003f3c:	08005b80 	.word	0x08005b80
 8003f40:	08005b58 	.word	0x08005b58
 8003f44:	3ff00000 	.word	0x3ff00000
 8003f48:	40240000 	.word	0x40240000
 8003f4c:	401c0000 	.word	0x401c0000
 8003f50:	40140000 	.word	0x40140000
 8003f54:	3fe00000 	.word	0x3fe00000
 8003f58:	4631      	mov	r1, r6
 8003f5a:	4628      	mov	r0, r5
 8003f5c:	f7fc fb5c 	bl	8000618 <__aeabi_dmul>
 8003f60:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8003f64:	9415      	str	r4, [sp, #84]	@ 0x54
 8003f66:	4656      	mov	r6, sl
 8003f68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003f6c:	f7fc fe04 	bl	8000b78 <__aeabi_d2iz>
 8003f70:	4605      	mov	r5, r0
 8003f72:	f7fc fae7 	bl	8000544 <__aeabi_i2d>
 8003f76:	4602      	mov	r2, r0
 8003f78:	460b      	mov	r3, r1
 8003f7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003f7e:	f7fc f993 	bl	80002a8 <__aeabi_dsub>
 8003f82:	3530      	adds	r5, #48	@ 0x30
 8003f84:	f806 5b01 	strb.w	r5, [r6], #1
 8003f88:	4602      	mov	r2, r0
 8003f8a:	460b      	mov	r3, r1
 8003f8c:	42a6      	cmp	r6, r4
 8003f8e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003f92:	f04f 0200 	mov.w	r2, #0
 8003f96:	d124      	bne.n	8003fe2 <_dtoa_r+0x662>
 8003f98:	4bac      	ldr	r3, [pc, #688]	@ (800424c <_dtoa_r+0x8cc>)
 8003f9a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8003f9e:	f7fc f985 	bl	80002ac <__adddf3>
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	460b      	mov	r3, r1
 8003fa6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003faa:	f7fc fdc5 	bl	8000b38 <__aeabi_dcmpgt>
 8003fae:	2800      	cmp	r0, #0
 8003fb0:	d145      	bne.n	800403e <_dtoa_r+0x6be>
 8003fb2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8003fb6:	49a5      	ldr	r1, [pc, #660]	@ (800424c <_dtoa_r+0x8cc>)
 8003fb8:	2000      	movs	r0, #0
 8003fba:	f7fc f975 	bl	80002a8 <__aeabi_dsub>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	460b      	mov	r3, r1
 8003fc2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003fc6:	f7fc fd99 	bl	8000afc <__aeabi_dcmplt>
 8003fca:	2800      	cmp	r0, #0
 8003fcc:	f43f aef5 	beq.w	8003dba <_dtoa_r+0x43a>
 8003fd0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8003fd2:	1e73      	subs	r3, r6, #1
 8003fd4:	9315      	str	r3, [sp, #84]	@ 0x54
 8003fd6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8003fda:	2b30      	cmp	r3, #48	@ 0x30
 8003fdc:	d0f8      	beq.n	8003fd0 <_dtoa_r+0x650>
 8003fde:	9f04      	ldr	r7, [sp, #16]
 8003fe0:	e73e      	b.n	8003e60 <_dtoa_r+0x4e0>
 8003fe2:	4b9b      	ldr	r3, [pc, #620]	@ (8004250 <_dtoa_r+0x8d0>)
 8003fe4:	f7fc fb18 	bl	8000618 <__aeabi_dmul>
 8003fe8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003fec:	e7bc      	b.n	8003f68 <_dtoa_r+0x5e8>
 8003fee:	d10c      	bne.n	800400a <_dtoa_r+0x68a>
 8003ff0:	4b98      	ldr	r3, [pc, #608]	@ (8004254 <_dtoa_r+0x8d4>)
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003ff8:	f7fc fb0e 	bl	8000618 <__aeabi_dmul>
 8003ffc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004000:	f7fc fd90 	bl	8000b24 <__aeabi_dcmpge>
 8004004:	2800      	cmp	r0, #0
 8004006:	f000 8157 	beq.w	80042b8 <_dtoa_r+0x938>
 800400a:	2400      	movs	r4, #0
 800400c:	4625      	mov	r5, r4
 800400e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004010:	43db      	mvns	r3, r3
 8004012:	9304      	str	r3, [sp, #16]
 8004014:	4656      	mov	r6, sl
 8004016:	2700      	movs	r7, #0
 8004018:	4621      	mov	r1, r4
 800401a:	4658      	mov	r0, fp
 800401c:	f000 fbb4 	bl	8004788 <_Bfree>
 8004020:	2d00      	cmp	r5, #0
 8004022:	d0dc      	beq.n	8003fde <_dtoa_r+0x65e>
 8004024:	b12f      	cbz	r7, 8004032 <_dtoa_r+0x6b2>
 8004026:	42af      	cmp	r7, r5
 8004028:	d003      	beq.n	8004032 <_dtoa_r+0x6b2>
 800402a:	4639      	mov	r1, r7
 800402c:	4658      	mov	r0, fp
 800402e:	f000 fbab 	bl	8004788 <_Bfree>
 8004032:	4629      	mov	r1, r5
 8004034:	4658      	mov	r0, fp
 8004036:	f000 fba7 	bl	8004788 <_Bfree>
 800403a:	e7d0      	b.n	8003fde <_dtoa_r+0x65e>
 800403c:	9704      	str	r7, [sp, #16]
 800403e:	4633      	mov	r3, r6
 8004040:	461e      	mov	r6, r3
 8004042:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004046:	2a39      	cmp	r2, #57	@ 0x39
 8004048:	d107      	bne.n	800405a <_dtoa_r+0x6da>
 800404a:	459a      	cmp	sl, r3
 800404c:	d1f8      	bne.n	8004040 <_dtoa_r+0x6c0>
 800404e:	9a04      	ldr	r2, [sp, #16]
 8004050:	3201      	adds	r2, #1
 8004052:	9204      	str	r2, [sp, #16]
 8004054:	2230      	movs	r2, #48	@ 0x30
 8004056:	f88a 2000 	strb.w	r2, [sl]
 800405a:	781a      	ldrb	r2, [r3, #0]
 800405c:	3201      	adds	r2, #1
 800405e:	701a      	strb	r2, [r3, #0]
 8004060:	e7bd      	b.n	8003fde <_dtoa_r+0x65e>
 8004062:	4b7b      	ldr	r3, [pc, #492]	@ (8004250 <_dtoa_r+0x8d0>)
 8004064:	2200      	movs	r2, #0
 8004066:	f7fc fad7 	bl	8000618 <__aeabi_dmul>
 800406a:	2200      	movs	r2, #0
 800406c:	2300      	movs	r3, #0
 800406e:	4604      	mov	r4, r0
 8004070:	460d      	mov	r5, r1
 8004072:	f7fc fd39 	bl	8000ae8 <__aeabi_dcmpeq>
 8004076:	2800      	cmp	r0, #0
 8004078:	f43f aebb 	beq.w	8003df2 <_dtoa_r+0x472>
 800407c:	e6f0      	b.n	8003e60 <_dtoa_r+0x4e0>
 800407e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004080:	2a00      	cmp	r2, #0
 8004082:	f000 80db 	beq.w	800423c <_dtoa_r+0x8bc>
 8004086:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004088:	2a01      	cmp	r2, #1
 800408a:	f300 80bf 	bgt.w	800420c <_dtoa_r+0x88c>
 800408e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8004090:	2a00      	cmp	r2, #0
 8004092:	f000 80b7 	beq.w	8004204 <_dtoa_r+0x884>
 8004096:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800409a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800409c:	4646      	mov	r6, r8
 800409e:	9a08      	ldr	r2, [sp, #32]
 80040a0:	2101      	movs	r1, #1
 80040a2:	441a      	add	r2, r3
 80040a4:	4658      	mov	r0, fp
 80040a6:	4498      	add	r8, r3
 80040a8:	9208      	str	r2, [sp, #32]
 80040aa:	f000 fc21 	bl	80048f0 <__i2b>
 80040ae:	4605      	mov	r5, r0
 80040b0:	b15e      	cbz	r6, 80040ca <_dtoa_r+0x74a>
 80040b2:	9b08      	ldr	r3, [sp, #32]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	dd08      	ble.n	80040ca <_dtoa_r+0x74a>
 80040b8:	42b3      	cmp	r3, r6
 80040ba:	9a08      	ldr	r2, [sp, #32]
 80040bc:	bfa8      	it	ge
 80040be:	4633      	movge	r3, r6
 80040c0:	eba8 0803 	sub.w	r8, r8, r3
 80040c4:	1af6      	subs	r6, r6, r3
 80040c6:	1ad3      	subs	r3, r2, r3
 80040c8:	9308      	str	r3, [sp, #32]
 80040ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80040cc:	b1f3      	cbz	r3, 800410c <_dtoa_r+0x78c>
 80040ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	f000 80b7 	beq.w	8004244 <_dtoa_r+0x8c4>
 80040d6:	b18c      	cbz	r4, 80040fc <_dtoa_r+0x77c>
 80040d8:	4629      	mov	r1, r5
 80040da:	4622      	mov	r2, r4
 80040dc:	4658      	mov	r0, fp
 80040de:	f000 fcc7 	bl	8004a70 <__pow5mult>
 80040e2:	464a      	mov	r2, r9
 80040e4:	4601      	mov	r1, r0
 80040e6:	4605      	mov	r5, r0
 80040e8:	4658      	mov	r0, fp
 80040ea:	f000 fc17 	bl	800491c <__multiply>
 80040ee:	4649      	mov	r1, r9
 80040f0:	9004      	str	r0, [sp, #16]
 80040f2:	4658      	mov	r0, fp
 80040f4:	f000 fb48 	bl	8004788 <_Bfree>
 80040f8:	9b04      	ldr	r3, [sp, #16]
 80040fa:	4699      	mov	r9, r3
 80040fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80040fe:	1b1a      	subs	r2, r3, r4
 8004100:	d004      	beq.n	800410c <_dtoa_r+0x78c>
 8004102:	4649      	mov	r1, r9
 8004104:	4658      	mov	r0, fp
 8004106:	f000 fcb3 	bl	8004a70 <__pow5mult>
 800410a:	4681      	mov	r9, r0
 800410c:	2101      	movs	r1, #1
 800410e:	4658      	mov	r0, fp
 8004110:	f000 fbee 	bl	80048f0 <__i2b>
 8004114:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004116:	4604      	mov	r4, r0
 8004118:	2b00      	cmp	r3, #0
 800411a:	f000 81cf 	beq.w	80044bc <_dtoa_r+0xb3c>
 800411e:	461a      	mov	r2, r3
 8004120:	4601      	mov	r1, r0
 8004122:	4658      	mov	r0, fp
 8004124:	f000 fca4 	bl	8004a70 <__pow5mult>
 8004128:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800412a:	2b01      	cmp	r3, #1
 800412c:	4604      	mov	r4, r0
 800412e:	f300 8095 	bgt.w	800425c <_dtoa_r+0x8dc>
 8004132:	9b02      	ldr	r3, [sp, #8]
 8004134:	2b00      	cmp	r3, #0
 8004136:	f040 8087 	bne.w	8004248 <_dtoa_r+0x8c8>
 800413a:	9b03      	ldr	r3, [sp, #12]
 800413c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004140:	2b00      	cmp	r3, #0
 8004142:	f040 8089 	bne.w	8004258 <_dtoa_r+0x8d8>
 8004146:	9b03      	ldr	r3, [sp, #12]
 8004148:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800414c:	0d1b      	lsrs	r3, r3, #20
 800414e:	051b      	lsls	r3, r3, #20
 8004150:	b12b      	cbz	r3, 800415e <_dtoa_r+0x7de>
 8004152:	9b08      	ldr	r3, [sp, #32]
 8004154:	3301      	adds	r3, #1
 8004156:	9308      	str	r3, [sp, #32]
 8004158:	f108 0801 	add.w	r8, r8, #1
 800415c:	2301      	movs	r3, #1
 800415e:	930a      	str	r3, [sp, #40]	@ 0x28
 8004160:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004162:	2b00      	cmp	r3, #0
 8004164:	f000 81b0 	beq.w	80044c8 <_dtoa_r+0xb48>
 8004168:	6923      	ldr	r3, [r4, #16]
 800416a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800416e:	6918      	ldr	r0, [r3, #16]
 8004170:	f000 fb72 	bl	8004858 <__hi0bits>
 8004174:	f1c0 0020 	rsb	r0, r0, #32
 8004178:	9b08      	ldr	r3, [sp, #32]
 800417a:	4418      	add	r0, r3
 800417c:	f010 001f 	ands.w	r0, r0, #31
 8004180:	d077      	beq.n	8004272 <_dtoa_r+0x8f2>
 8004182:	f1c0 0320 	rsb	r3, r0, #32
 8004186:	2b04      	cmp	r3, #4
 8004188:	dd6b      	ble.n	8004262 <_dtoa_r+0x8e2>
 800418a:	9b08      	ldr	r3, [sp, #32]
 800418c:	f1c0 001c 	rsb	r0, r0, #28
 8004190:	4403      	add	r3, r0
 8004192:	4480      	add	r8, r0
 8004194:	4406      	add	r6, r0
 8004196:	9308      	str	r3, [sp, #32]
 8004198:	f1b8 0f00 	cmp.w	r8, #0
 800419c:	dd05      	ble.n	80041aa <_dtoa_r+0x82a>
 800419e:	4649      	mov	r1, r9
 80041a0:	4642      	mov	r2, r8
 80041a2:	4658      	mov	r0, fp
 80041a4:	f000 fcbe 	bl	8004b24 <__lshift>
 80041a8:	4681      	mov	r9, r0
 80041aa:	9b08      	ldr	r3, [sp, #32]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	dd05      	ble.n	80041bc <_dtoa_r+0x83c>
 80041b0:	4621      	mov	r1, r4
 80041b2:	461a      	mov	r2, r3
 80041b4:	4658      	mov	r0, fp
 80041b6:	f000 fcb5 	bl	8004b24 <__lshift>
 80041ba:	4604      	mov	r4, r0
 80041bc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d059      	beq.n	8004276 <_dtoa_r+0x8f6>
 80041c2:	4621      	mov	r1, r4
 80041c4:	4648      	mov	r0, r9
 80041c6:	f000 fd19 	bl	8004bfc <__mcmp>
 80041ca:	2800      	cmp	r0, #0
 80041cc:	da53      	bge.n	8004276 <_dtoa_r+0x8f6>
 80041ce:	1e7b      	subs	r3, r7, #1
 80041d0:	9304      	str	r3, [sp, #16]
 80041d2:	4649      	mov	r1, r9
 80041d4:	2300      	movs	r3, #0
 80041d6:	220a      	movs	r2, #10
 80041d8:	4658      	mov	r0, fp
 80041da:	f000 faf7 	bl	80047cc <__multadd>
 80041de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80041e0:	4681      	mov	r9, r0
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	f000 8172 	beq.w	80044cc <_dtoa_r+0xb4c>
 80041e8:	2300      	movs	r3, #0
 80041ea:	4629      	mov	r1, r5
 80041ec:	220a      	movs	r2, #10
 80041ee:	4658      	mov	r0, fp
 80041f0:	f000 faec 	bl	80047cc <__multadd>
 80041f4:	9b00      	ldr	r3, [sp, #0]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	4605      	mov	r5, r0
 80041fa:	dc67      	bgt.n	80042cc <_dtoa_r+0x94c>
 80041fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80041fe:	2b02      	cmp	r3, #2
 8004200:	dc41      	bgt.n	8004286 <_dtoa_r+0x906>
 8004202:	e063      	b.n	80042cc <_dtoa_r+0x94c>
 8004204:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8004206:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800420a:	e746      	b.n	800409a <_dtoa_r+0x71a>
 800420c:	9b07      	ldr	r3, [sp, #28]
 800420e:	1e5c      	subs	r4, r3, #1
 8004210:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004212:	42a3      	cmp	r3, r4
 8004214:	bfbf      	itttt	lt
 8004216:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8004218:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800421a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800421c:	1ae3      	sublt	r3, r4, r3
 800421e:	bfb4      	ite	lt
 8004220:	18d2      	addlt	r2, r2, r3
 8004222:	1b1c      	subge	r4, r3, r4
 8004224:	9b07      	ldr	r3, [sp, #28]
 8004226:	bfbc      	itt	lt
 8004228:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800422a:	2400      	movlt	r4, #0
 800422c:	2b00      	cmp	r3, #0
 800422e:	bfb5      	itete	lt
 8004230:	eba8 0603 	sublt.w	r6, r8, r3
 8004234:	9b07      	ldrge	r3, [sp, #28]
 8004236:	2300      	movlt	r3, #0
 8004238:	4646      	movge	r6, r8
 800423a:	e730      	b.n	800409e <_dtoa_r+0x71e>
 800423c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800423e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8004240:	4646      	mov	r6, r8
 8004242:	e735      	b.n	80040b0 <_dtoa_r+0x730>
 8004244:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004246:	e75c      	b.n	8004102 <_dtoa_r+0x782>
 8004248:	2300      	movs	r3, #0
 800424a:	e788      	b.n	800415e <_dtoa_r+0x7de>
 800424c:	3fe00000 	.word	0x3fe00000
 8004250:	40240000 	.word	0x40240000
 8004254:	40140000 	.word	0x40140000
 8004258:	9b02      	ldr	r3, [sp, #8]
 800425a:	e780      	b.n	800415e <_dtoa_r+0x7de>
 800425c:	2300      	movs	r3, #0
 800425e:	930a      	str	r3, [sp, #40]	@ 0x28
 8004260:	e782      	b.n	8004168 <_dtoa_r+0x7e8>
 8004262:	d099      	beq.n	8004198 <_dtoa_r+0x818>
 8004264:	9a08      	ldr	r2, [sp, #32]
 8004266:	331c      	adds	r3, #28
 8004268:	441a      	add	r2, r3
 800426a:	4498      	add	r8, r3
 800426c:	441e      	add	r6, r3
 800426e:	9208      	str	r2, [sp, #32]
 8004270:	e792      	b.n	8004198 <_dtoa_r+0x818>
 8004272:	4603      	mov	r3, r0
 8004274:	e7f6      	b.n	8004264 <_dtoa_r+0x8e4>
 8004276:	9b07      	ldr	r3, [sp, #28]
 8004278:	9704      	str	r7, [sp, #16]
 800427a:	2b00      	cmp	r3, #0
 800427c:	dc20      	bgt.n	80042c0 <_dtoa_r+0x940>
 800427e:	9300      	str	r3, [sp, #0]
 8004280:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004282:	2b02      	cmp	r3, #2
 8004284:	dd1e      	ble.n	80042c4 <_dtoa_r+0x944>
 8004286:	9b00      	ldr	r3, [sp, #0]
 8004288:	2b00      	cmp	r3, #0
 800428a:	f47f aec0 	bne.w	800400e <_dtoa_r+0x68e>
 800428e:	4621      	mov	r1, r4
 8004290:	2205      	movs	r2, #5
 8004292:	4658      	mov	r0, fp
 8004294:	f000 fa9a 	bl	80047cc <__multadd>
 8004298:	4601      	mov	r1, r0
 800429a:	4604      	mov	r4, r0
 800429c:	4648      	mov	r0, r9
 800429e:	f000 fcad 	bl	8004bfc <__mcmp>
 80042a2:	2800      	cmp	r0, #0
 80042a4:	f77f aeb3 	ble.w	800400e <_dtoa_r+0x68e>
 80042a8:	4656      	mov	r6, sl
 80042aa:	2331      	movs	r3, #49	@ 0x31
 80042ac:	f806 3b01 	strb.w	r3, [r6], #1
 80042b0:	9b04      	ldr	r3, [sp, #16]
 80042b2:	3301      	adds	r3, #1
 80042b4:	9304      	str	r3, [sp, #16]
 80042b6:	e6ae      	b.n	8004016 <_dtoa_r+0x696>
 80042b8:	9c07      	ldr	r4, [sp, #28]
 80042ba:	9704      	str	r7, [sp, #16]
 80042bc:	4625      	mov	r5, r4
 80042be:	e7f3      	b.n	80042a8 <_dtoa_r+0x928>
 80042c0:	9b07      	ldr	r3, [sp, #28]
 80042c2:	9300      	str	r3, [sp, #0]
 80042c4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	f000 8104 	beq.w	80044d4 <_dtoa_r+0xb54>
 80042cc:	2e00      	cmp	r6, #0
 80042ce:	dd05      	ble.n	80042dc <_dtoa_r+0x95c>
 80042d0:	4629      	mov	r1, r5
 80042d2:	4632      	mov	r2, r6
 80042d4:	4658      	mov	r0, fp
 80042d6:	f000 fc25 	bl	8004b24 <__lshift>
 80042da:	4605      	mov	r5, r0
 80042dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d05a      	beq.n	8004398 <_dtoa_r+0xa18>
 80042e2:	6869      	ldr	r1, [r5, #4]
 80042e4:	4658      	mov	r0, fp
 80042e6:	f000 fa0f 	bl	8004708 <_Balloc>
 80042ea:	4606      	mov	r6, r0
 80042ec:	b928      	cbnz	r0, 80042fa <_dtoa_r+0x97a>
 80042ee:	4b84      	ldr	r3, [pc, #528]	@ (8004500 <_dtoa_r+0xb80>)
 80042f0:	4602      	mov	r2, r0
 80042f2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80042f6:	f7ff bb5a 	b.w	80039ae <_dtoa_r+0x2e>
 80042fa:	692a      	ldr	r2, [r5, #16]
 80042fc:	3202      	adds	r2, #2
 80042fe:	0092      	lsls	r2, r2, #2
 8004300:	f105 010c 	add.w	r1, r5, #12
 8004304:	300c      	adds	r0, #12
 8004306:	f000 ffaf 	bl	8005268 <memcpy>
 800430a:	2201      	movs	r2, #1
 800430c:	4631      	mov	r1, r6
 800430e:	4658      	mov	r0, fp
 8004310:	f000 fc08 	bl	8004b24 <__lshift>
 8004314:	f10a 0301 	add.w	r3, sl, #1
 8004318:	9307      	str	r3, [sp, #28]
 800431a:	9b00      	ldr	r3, [sp, #0]
 800431c:	4453      	add	r3, sl
 800431e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004320:	9b02      	ldr	r3, [sp, #8]
 8004322:	f003 0301 	and.w	r3, r3, #1
 8004326:	462f      	mov	r7, r5
 8004328:	930a      	str	r3, [sp, #40]	@ 0x28
 800432a:	4605      	mov	r5, r0
 800432c:	9b07      	ldr	r3, [sp, #28]
 800432e:	4621      	mov	r1, r4
 8004330:	3b01      	subs	r3, #1
 8004332:	4648      	mov	r0, r9
 8004334:	9300      	str	r3, [sp, #0]
 8004336:	f7ff fa98 	bl	800386a <quorem>
 800433a:	4639      	mov	r1, r7
 800433c:	9002      	str	r0, [sp, #8]
 800433e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8004342:	4648      	mov	r0, r9
 8004344:	f000 fc5a 	bl	8004bfc <__mcmp>
 8004348:	462a      	mov	r2, r5
 800434a:	9008      	str	r0, [sp, #32]
 800434c:	4621      	mov	r1, r4
 800434e:	4658      	mov	r0, fp
 8004350:	f000 fc70 	bl	8004c34 <__mdiff>
 8004354:	68c2      	ldr	r2, [r0, #12]
 8004356:	4606      	mov	r6, r0
 8004358:	bb02      	cbnz	r2, 800439c <_dtoa_r+0xa1c>
 800435a:	4601      	mov	r1, r0
 800435c:	4648      	mov	r0, r9
 800435e:	f000 fc4d 	bl	8004bfc <__mcmp>
 8004362:	4602      	mov	r2, r0
 8004364:	4631      	mov	r1, r6
 8004366:	4658      	mov	r0, fp
 8004368:	920e      	str	r2, [sp, #56]	@ 0x38
 800436a:	f000 fa0d 	bl	8004788 <_Bfree>
 800436e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004370:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004372:	9e07      	ldr	r6, [sp, #28]
 8004374:	ea43 0102 	orr.w	r1, r3, r2
 8004378:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800437a:	4319      	orrs	r1, r3
 800437c:	d110      	bne.n	80043a0 <_dtoa_r+0xa20>
 800437e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004382:	d029      	beq.n	80043d8 <_dtoa_r+0xa58>
 8004384:	9b08      	ldr	r3, [sp, #32]
 8004386:	2b00      	cmp	r3, #0
 8004388:	dd02      	ble.n	8004390 <_dtoa_r+0xa10>
 800438a:	9b02      	ldr	r3, [sp, #8]
 800438c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8004390:	9b00      	ldr	r3, [sp, #0]
 8004392:	f883 8000 	strb.w	r8, [r3]
 8004396:	e63f      	b.n	8004018 <_dtoa_r+0x698>
 8004398:	4628      	mov	r0, r5
 800439a:	e7bb      	b.n	8004314 <_dtoa_r+0x994>
 800439c:	2201      	movs	r2, #1
 800439e:	e7e1      	b.n	8004364 <_dtoa_r+0x9e4>
 80043a0:	9b08      	ldr	r3, [sp, #32]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	db04      	blt.n	80043b0 <_dtoa_r+0xa30>
 80043a6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80043a8:	430b      	orrs	r3, r1
 80043aa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80043ac:	430b      	orrs	r3, r1
 80043ae:	d120      	bne.n	80043f2 <_dtoa_r+0xa72>
 80043b0:	2a00      	cmp	r2, #0
 80043b2:	dded      	ble.n	8004390 <_dtoa_r+0xa10>
 80043b4:	4649      	mov	r1, r9
 80043b6:	2201      	movs	r2, #1
 80043b8:	4658      	mov	r0, fp
 80043ba:	f000 fbb3 	bl	8004b24 <__lshift>
 80043be:	4621      	mov	r1, r4
 80043c0:	4681      	mov	r9, r0
 80043c2:	f000 fc1b 	bl	8004bfc <__mcmp>
 80043c6:	2800      	cmp	r0, #0
 80043c8:	dc03      	bgt.n	80043d2 <_dtoa_r+0xa52>
 80043ca:	d1e1      	bne.n	8004390 <_dtoa_r+0xa10>
 80043cc:	f018 0f01 	tst.w	r8, #1
 80043d0:	d0de      	beq.n	8004390 <_dtoa_r+0xa10>
 80043d2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80043d6:	d1d8      	bne.n	800438a <_dtoa_r+0xa0a>
 80043d8:	9a00      	ldr	r2, [sp, #0]
 80043da:	2339      	movs	r3, #57	@ 0x39
 80043dc:	7013      	strb	r3, [r2, #0]
 80043de:	4633      	mov	r3, r6
 80043e0:	461e      	mov	r6, r3
 80043e2:	3b01      	subs	r3, #1
 80043e4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80043e8:	2a39      	cmp	r2, #57	@ 0x39
 80043ea:	d052      	beq.n	8004492 <_dtoa_r+0xb12>
 80043ec:	3201      	adds	r2, #1
 80043ee:	701a      	strb	r2, [r3, #0]
 80043f0:	e612      	b.n	8004018 <_dtoa_r+0x698>
 80043f2:	2a00      	cmp	r2, #0
 80043f4:	dd07      	ble.n	8004406 <_dtoa_r+0xa86>
 80043f6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80043fa:	d0ed      	beq.n	80043d8 <_dtoa_r+0xa58>
 80043fc:	9a00      	ldr	r2, [sp, #0]
 80043fe:	f108 0301 	add.w	r3, r8, #1
 8004402:	7013      	strb	r3, [r2, #0]
 8004404:	e608      	b.n	8004018 <_dtoa_r+0x698>
 8004406:	9b07      	ldr	r3, [sp, #28]
 8004408:	9a07      	ldr	r2, [sp, #28]
 800440a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800440e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004410:	4293      	cmp	r3, r2
 8004412:	d028      	beq.n	8004466 <_dtoa_r+0xae6>
 8004414:	4649      	mov	r1, r9
 8004416:	2300      	movs	r3, #0
 8004418:	220a      	movs	r2, #10
 800441a:	4658      	mov	r0, fp
 800441c:	f000 f9d6 	bl	80047cc <__multadd>
 8004420:	42af      	cmp	r7, r5
 8004422:	4681      	mov	r9, r0
 8004424:	f04f 0300 	mov.w	r3, #0
 8004428:	f04f 020a 	mov.w	r2, #10
 800442c:	4639      	mov	r1, r7
 800442e:	4658      	mov	r0, fp
 8004430:	d107      	bne.n	8004442 <_dtoa_r+0xac2>
 8004432:	f000 f9cb 	bl	80047cc <__multadd>
 8004436:	4607      	mov	r7, r0
 8004438:	4605      	mov	r5, r0
 800443a:	9b07      	ldr	r3, [sp, #28]
 800443c:	3301      	adds	r3, #1
 800443e:	9307      	str	r3, [sp, #28]
 8004440:	e774      	b.n	800432c <_dtoa_r+0x9ac>
 8004442:	f000 f9c3 	bl	80047cc <__multadd>
 8004446:	4629      	mov	r1, r5
 8004448:	4607      	mov	r7, r0
 800444a:	2300      	movs	r3, #0
 800444c:	220a      	movs	r2, #10
 800444e:	4658      	mov	r0, fp
 8004450:	f000 f9bc 	bl	80047cc <__multadd>
 8004454:	4605      	mov	r5, r0
 8004456:	e7f0      	b.n	800443a <_dtoa_r+0xaba>
 8004458:	9b00      	ldr	r3, [sp, #0]
 800445a:	2b00      	cmp	r3, #0
 800445c:	bfcc      	ite	gt
 800445e:	461e      	movgt	r6, r3
 8004460:	2601      	movle	r6, #1
 8004462:	4456      	add	r6, sl
 8004464:	2700      	movs	r7, #0
 8004466:	4649      	mov	r1, r9
 8004468:	2201      	movs	r2, #1
 800446a:	4658      	mov	r0, fp
 800446c:	f000 fb5a 	bl	8004b24 <__lshift>
 8004470:	4621      	mov	r1, r4
 8004472:	4681      	mov	r9, r0
 8004474:	f000 fbc2 	bl	8004bfc <__mcmp>
 8004478:	2800      	cmp	r0, #0
 800447a:	dcb0      	bgt.n	80043de <_dtoa_r+0xa5e>
 800447c:	d102      	bne.n	8004484 <_dtoa_r+0xb04>
 800447e:	f018 0f01 	tst.w	r8, #1
 8004482:	d1ac      	bne.n	80043de <_dtoa_r+0xa5e>
 8004484:	4633      	mov	r3, r6
 8004486:	461e      	mov	r6, r3
 8004488:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800448c:	2a30      	cmp	r2, #48	@ 0x30
 800448e:	d0fa      	beq.n	8004486 <_dtoa_r+0xb06>
 8004490:	e5c2      	b.n	8004018 <_dtoa_r+0x698>
 8004492:	459a      	cmp	sl, r3
 8004494:	d1a4      	bne.n	80043e0 <_dtoa_r+0xa60>
 8004496:	9b04      	ldr	r3, [sp, #16]
 8004498:	3301      	adds	r3, #1
 800449a:	9304      	str	r3, [sp, #16]
 800449c:	2331      	movs	r3, #49	@ 0x31
 800449e:	f88a 3000 	strb.w	r3, [sl]
 80044a2:	e5b9      	b.n	8004018 <_dtoa_r+0x698>
 80044a4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80044a6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8004504 <_dtoa_r+0xb84>
 80044aa:	b11b      	cbz	r3, 80044b4 <_dtoa_r+0xb34>
 80044ac:	f10a 0308 	add.w	r3, sl, #8
 80044b0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80044b2:	6013      	str	r3, [r2, #0]
 80044b4:	4650      	mov	r0, sl
 80044b6:	b019      	add	sp, #100	@ 0x64
 80044b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80044be:	2b01      	cmp	r3, #1
 80044c0:	f77f ae37 	ble.w	8004132 <_dtoa_r+0x7b2>
 80044c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80044c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80044c8:	2001      	movs	r0, #1
 80044ca:	e655      	b.n	8004178 <_dtoa_r+0x7f8>
 80044cc:	9b00      	ldr	r3, [sp, #0]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	f77f aed6 	ble.w	8004280 <_dtoa_r+0x900>
 80044d4:	4656      	mov	r6, sl
 80044d6:	4621      	mov	r1, r4
 80044d8:	4648      	mov	r0, r9
 80044da:	f7ff f9c6 	bl	800386a <quorem>
 80044de:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80044e2:	f806 8b01 	strb.w	r8, [r6], #1
 80044e6:	9b00      	ldr	r3, [sp, #0]
 80044e8:	eba6 020a 	sub.w	r2, r6, sl
 80044ec:	4293      	cmp	r3, r2
 80044ee:	ddb3      	ble.n	8004458 <_dtoa_r+0xad8>
 80044f0:	4649      	mov	r1, r9
 80044f2:	2300      	movs	r3, #0
 80044f4:	220a      	movs	r2, #10
 80044f6:	4658      	mov	r0, fp
 80044f8:	f000 f968 	bl	80047cc <__multadd>
 80044fc:	4681      	mov	r9, r0
 80044fe:	e7ea      	b.n	80044d6 <_dtoa_r+0xb56>
 8004500:	08005adc 	.word	0x08005adc
 8004504:	08005a60 	.word	0x08005a60

08004508 <_free_r>:
 8004508:	b538      	push	{r3, r4, r5, lr}
 800450a:	4605      	mov	r5, r0
 800450c:	2900      	cmp	r1, #0
 800450e:	d041      	beq.n	8004594 <_free_r+0x8c>
 8004510:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004514:	1f0c      	subs	r4, r1, #4
 8004516:	2b00      	cmp	r3, #0
 8004518:	bfb8      	it	lt
 800451a:	18e4      	addlt	r4, r4, r3
 800451c:	f000 f8e8 	bl	80046f0 <__malloc_lock>
 8004520:	4a1d      	ldr	r2, [pc, #116]	@ (8004598 <_free_r+0x90>)
 8004522:	6813      	ldr	r3, [r2, #0]
 8004524:	b933      	cbnz	r3, 8004534 <_free_r+0x2c>
 8004526:	6063      	str	r3, [r4, #4]
 8004528:	6014      	str	r4, [r2, #0]
 800452a:	4628      	mov	r0, r5
 800452c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004530:	f000 b8e4 	b.w	80046fc <__malloc_unlock>
 8004534:	42a3      	cmp	r3, r4
 8004536:	d908      	bls.n	800454a <_free_r+0x42>
 8004538:	6820      	ldr	r0, [r4, #0]
 800453a:	1821      	adds	r1, r4, r0
 800453c:	428b      	cmp	r3, r1
 800453e:	bf01      	itttt	eq
 8004540:	6819      	ldreq	r1, [r3, #0]
 8004542:	685b      	ldreq	r3, [r3, #4]
 8004544:	1809      	addeq	r1, r1, r0
 8004546:	6021      	streq	r1, [r4, #0]
 8004548:	e7ed      	b.n	8004526 <_free_r+0x1e>
 800454a:	461a      	mov	r2, r3
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	b10b      	cbz	r3, 8004554 <_free_r+0x4c>
 8004550:	42a3      	cmp	r3, r4
 8004552:	d9fa      	bls.n	800454a <_free_r+0x42>
 8004554:	6811      	ldr	r1, [r2, #0]
 8004556:	1850      	adds	r0, r2, r1
 8004558:	42a0      	cmp	r0, r4
 800455a:	d10b      	bne.n	8004574 <_free_r+0x6c>
 800455c:	6820      	ldr	r0, [r4, #0]
 800455e:	4401      	add	r1, r0
 8004560:	1850      	adds	r0, r2, r1
 8004562:	4283      	cmp	r3, r0
 8004564:	6011      	str	r1, [r2, #0]
 8004566:	d1e0      	bne.n	800452a <_free_r+0x22>
 8004568:	6818      	ldr	r0, [r3, #0]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	6053      	str	r3, [r2, #4]
 800456e:	4408      	add	r0, r1
 8004570:	6010      	str	r0, [r2, #0]
 8004572:	e7da      	b.n	800452a <_free_r+0x22>
 8004574:	d902      	bls.n	800457c <_free_r+0x74>
 8004576:	230c      	movs	r3, #12
 8004578:	602b      	str	r3, [r5, #0]
 800457a:	e7d6      	b.n	800452a <_free_r+0x22>
 800457c:	6820      	ldr	r0, [r4, #0]
 800457e:	1821      	adds	r1, r4, r0
 8004580:	428b      	cmp	r3, r1
 8004582:	bf04      	itt	eq
 8004584:	6819      	ldreq	r1, [r3, #0]
 8004586:	685b      	ldreq	r3, [r3, #4]
 8004588:	6063      	str	r3, [r4, #4]
 800458a:	bf04      	itt	eq
 800458c:	1809      	addeq	r1, r1, r0
 800458e:	6021      	streq	r1, [r4, #0]
 8004590:	6054      	str	r4, [r2, #4]
 8004592:	e7ca      	b.n	800452a <_free_r+0x22>
 8004594:	bd38      	pop	{r3, r4, r5, pc}
 8004596:	bf00      	nop
 8004598:	200003ec 	.word	0x200003ec

0800459c <malloc>:
 800459c:	4b02      	ldr	r3, [pc, #8]	@ (80045a8 <malloc+0xc>)
 800459e:	4601      	mov	r1, r0
 80045a0:	6818      	ldr	r0, [r3, #0]
 80045a2:	f000 b825 	b.w	80045f0 <_malloc_r>
 80045a6:	bf00      	nop
 80045a8:	20000010 	.word	0x20000010

080045ac <sbrk_aligned>:
 80045ac:	b570      	push	{r4, r5, r6, lr}
 80045ae:	4e0f      	ldr	r6, [pc, #60]	@ (80045ec <sbrk_aligned+0x40>)
 80045b0:	460c      	mov	r4, r1
 80045b2:	6831      	ldr	r1, [r6, #0]
 80045b4:	4605      	mov	r5, r0
 80045b6:	b911      	cbnz	r1, 80045be <sbrk_aligned+0x12>
 80045b8:	f000 fe46 	bl	8005248 <_sbrk_r>
 80045bc:	6030      	str	r0, [r6, #0]
 80045be:	4621      	mov	r1, r4
 80045c0:	4628      	mov	r0, r5
 80045c2:	f000 fe41 	bl	8005248 <_sbrk_r>
 80045c6:	1c43      	adds	r3, r0, #1
 80045c8:	d103      	bne.n	80045d2 <sbrk_aligned+0x26>
 80045ca:	f04f 34ff 	mov.w	r4, #4294967295
 80045ce:	4620      	mov	r0, r4
 80045d0:	bd70      	pop	{r4, r5, r6, pc}
 80045d2:	1cc4      	adds	r4, r0, #3
 80045d4:	f024 0403 	bic.w	r4, r4, #3
 80045d8:	42a0      	cmp	r0, r4
 80045da:	d0f8      	beq.n	80045ce <sbrk_aligned+0x22>
 80045dc:	1a21      	subs	r1, r4, r0
 80045de:	4628      	mov	r0, r5
 80045e0:	f000 fe32 	bl	8005248 <_sbrk_r>
 80045e4:	3001      	adds	r0, #1
 80045e6:	d1f2      	bne.n	80045ce <sbrk_aligned+0x22>
 80045e8:	e7ef      	b.n	80045ca <sbrk_aligned+0x1e>
 80045ea:	bf00      	nop
 80045ec:	200003e8 	.word	0x200003e8

080045f0 <_malloc_r>:
 80045f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80045f4:	1ccd      	adds	r5, r1, #3
 80045f6:	f025 0503 	bic.w	r5, r5, #3
 80045fa:	3508      	adds	r5, #8
 80045fc:	2d0c      	cmp	r5, #12
 80045fe:	bf38      	it	cc
 8004600:	250c      	movcc	r5, #12
 8004602:	2d00      	cmp	r5, #0
 8004604:	4606      	mov	r6, r0
 8004606:	db01      	blt.n	800460c <_malloc_r+0x1c>
 8004608:	42a9      	cmp	r1, r5
 800460a:	d904      	bls.n	8004616 <_malloc_r+0x26>
 800460c:	230c      	movs	r3, #12
 800460e:	6033      	str	r3, [r6, #0]
 8004610:	2000      	movs	r0, #0
 8004612:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004616:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80046ec <_malloc_r+0xfc>
 800461a:	f000 f869 	bl	80046f0 <__malloc_lock>
 800461e:	f8d8 3000 	ldr.w	r3, [r8]
 8004622:	461c      	mov	r4, r3
 8004624:	bb44      	cbnz	r4, 8004678 <_malloc_r+0x88>
 8004626:	4629      	mov	r1, r5
 8004628:	4630      	mov	r0, r6
 800462a:	f7ff ffbf 	bl	80045ac <sbrk_aligned>
 800462e:	1c43      	adds	r3, r0, #1
 8004630:	4604      	mov	r4, r0
 8004632:	d158      	bne.n	80046e6 <_malloc_r+0xf6>
 8004634:	f8d8 4000 	ldr.w	r4, [r8]
 8004638:	4627      	mov	r7, r4
 800463a:	2f00      	cmp	r7, #0
 800463c:	d143      	bne.n	80046c6 <_malloc_r+0xd6>
 800463e:	2c00      	cmp	r4, #0
 8004640:	d04b      	beq.n	80046da <_malloc_r+0xea>
 8004642:	6823      	ldr	r3, [r4, #0]
 8004644:	4639      	mov	r1, r7
 8004646:	4630      	mov	r0, r6
 8004648:	eb04 0903 	add.w	r9, r4, r3
 800464c:	f000 fdfc 	bl	8005248 <_sbrk_r>
 8004650:	4581      	cmp	r9, r0
 8004652:	d142      	bne.n	80046da <_malloc_r+0xea>
 8004654:	6821      	ldr	r1, [r4, #0]
 8004656:	1a6d      	subs	r5, r5, r1
 8004658:	4629      	mov	r1, r5
 800465a:	4630      	mov	r0, r6
 800465c:	f7ff ffa6 	bl	80045ac <sbrk_aligned>
 8004660:	3001      	adds	r0, #1
 8004662:	d03a      	beq.n	80046da <_malloc_r+0xea>
 8004664:	6823      	ldr	r3, [r4, #0]
 8004666:	442b      	add	r3, r5
 8004668:	6023      	str	r3, [r4, #0]
 800466a:	f8d8 3000 	ldr.w	r3, [r8]
 800466e:	685a      	ldr	r2, [r3, #4]
 8004670:	bb62      	cbnz	r2, 80046cc <_malloc_r+0xdc>
 8004672:	f8c8 7000 	str.w	r7, [r8]
 8004676:	e00f      	b.n	8004698 <_malloc_r+0xa8>
 8004678:	6822      	ldr	r2, [r4, #0]
 800467a:	1b52      	subs	r2, r2, r5
 800467c:	d420      	bmi.n	80046c0 <_malloc_r+0xd0>
 800467e:	2a0b      	cmp	r2, #11
 8004680:	d917      	bls.n	80046b2 <_malloc_r+0xc2>
 8004682:	1961      	adds	r1, r4, r5
 8004684:	42a3      	cmp	r3, r4
 8004686:	6025      	str	r5, [r4, #0]
 8004688:	bf18      	it	ne
 800468a:	6059      	strne	r1, [r3, #4]
 800468c:	6863      	ldr	r3, [r4, #4]
 800468e:	bf08      	it	eq
 8004690:	f8c8 1000 	streq.w	r1, [r8]
 8004694:	5162      	str	r2, [r4, r5]
 8004696:	604b      	str	r3, [r1, #4]
 8004698:	4630      	mov	r0, r6
 800469a:	f000 f82f 	bl	80046fc <__malloc_unlock>
 800469e:	f104 000b 	add.w	r0, r4, #11
 80046a2:	1d23      	adds	r3, r4, #4
 80046a4:	f020 0007 	bic.w	r0, r0, #7
 80046a8:	1ac2      	subs	r2, r0, r3
 80046aa:	bf1c      	itt	ne
 80046ac:	1a1b      	subne	r3, r3, r0
 80046ae:	50a3      	strne	r3, [r4, r2]
 80046b0:	e7af      	b.n	8004612 <_malloc_r+0x22>
 80046b2:	6862      	ldr	r2, [r4, #4]
 80046b4:	42a3      	cmp	r3, r4
 80046b6:	bf0c      	ite	eq
 80046b8:	f8c8 2000 	streq.w	r2, [r8]
 80046bc:	605a      	strne	r2, [r3, #4]
 80046be:	e7eb      	b.n	8004698 <_malloc_r+0xa8>
 80046c0:	4623      	mov	r3, r4
 80046c2:	6864      	ldr	r4, [r4, #4]
 80046c4:	e7ae      	b.n	8004624 <_malloc_r+0x34>
 80046c6:	463c      	mov	r4, r7
 80046c8:	687f      	ldr	r7, [r7, #4]
 80046ca:	e7b6      	b.n	800463a <_malloc_r+0x4a>
 80046cc:	461a      	mov	r2, r3
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	42a3      	cmp	r3, r4
 80046d2:	d1fb      	bne.n	80046cc <_malloc_r+0xdc>
 80046d4:	2300      	movs	r3, #0
 80046d6:	6053      	str	r3, [r2, #4]
 80046d8:	e7de      	b.n	8004698 <_malloc_r+0xa8>
 80046da:	230c      	movs	r3, #12
 80046dc:	6033      	str	r3, [r6, #0]
 80046de:	4630      	mov	r0, r6
 80046e0:	f000 f80c 	bl	80046fc <__malloc_unlock>
 80046e4:	e794      	b.n	8004610 <_malloc_r+0x20>
 80046e6:	6005      	str	r5, [r0, #0]
 80046e8:	e7d6      	b.n	8004698 <_malloc_r+0xa8>
 80046ea:	bf00      	nop
 80046ec:	200003ec 	.word	0x200003ec

080046f0 <__malloc_lock>:
 80046f0:	4801      	ldr	r0, [pc, #4]	@ (80046f8 <__malloc_lock+0x8>)
 80046f2:	f7ff b8b8 	b.w	8003866 <__retarget_lock_acquire_recursive>
 80046f6:	bf00      	nop
 80046f8:	200003e4 	.word	0x200003e4

080046fc <__malloc_unlock>:
 80046fc:	4801      	ldr	r0, [pc, #4]	@ (8004704 <__malloc_unlock+0x8>)
 80046fe:	f7ff b8b3 	b.w	8003868 <__retarget_lock_release_recursive>
 8004702:	bf00      	nop
 8004704:	200003e4 	.word	0x200003e4

08004708 <_Balloc>:
 8004708:	b570      	push	{r4, r5, r6, lr}
 800470a:	69c6      	ldr	r6, [r0, #28]
 800470c:	4604      	mov	r4, r0
 800470e:	460d      	mov	r5, r1
 8004710:	b976      	cbnz	r6, 8004730 <_Balloc+0x28>
 8004712:	2010      	movs	r0, #16
 8004714:	f7ff ff42 	bl	800459c <malloc>
 8004718:	4602      	mov	r2, r0
 800471a:	61e0      	str	r0, [r4, #28]
 800471c:	b920      	cbnz	r0, 8004728 <_Balloc+0x20>
 800471e:	4b18      	ldr	r3, [pc, #96]	@ (8004780 <_Balloc+0x78>)
 8004720:	4818      	ldr	r0, [pc, #96]	@ (8004784 <_Balloc+0x7c>)
 8004722:	216b      	movs	r1, #107	@ 0x6b
 8004724:	f000 fdae 	bl	8005284 <__assert_func>
 8004728:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800472c:	6006      	str	r6, [r0, #0]
 800472e:	60c6      	str	r6, [r0, #12]
 8004730:	69e6      	ldr	r6, [r4, #28]
 8004732:	68f3      	ldr	r3, [r6, #12]
 8004734:	b183      	cbz	r3, 8004758 <_Balloc+0x50>
 8004736:	69e3      	ldr	r3, [r4, #28]
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800473e:	b9b8      	cbnz	r0, 8004770 <_Balloc+0x68>
 8004740:	2101      	movs	r1, #1
 8004742:	fa01 f605 	lsl.w	r6, r1, r5
 8004746:	1d72      	adds	r2, r6, #5
 8004748:	0092      	lsls	r2, r2, #2
 800474a:	4620      	mov	r0, r4
 800474c:	f000 fdb8 	bl	80052c0 <_calloc_r>
 8004750:	b160      	cbz	r0, 800476c <_Balloc+0x64>
 8004752:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004756:	e00e      	b.n	8004776 <_Balloc+0x6e>
 8004758:	2221      	movs	r2, #33	@ 0x21
 800475a:	2104      	movs	r1, #4
 800475c:	4620      	mov	r0, r4
 800475e:	f000 fdaf 	bl	80052c0 <_calloc_r>
 8004762:	69e3      	ldr	r3, [r4, #28]
 8004764:	60f0      	str	r0, [r6, #12]
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d1e4      	bne.n	8004736 <_Balloc+0x2e>
 800476c:	2000      	movs	r0, #0
 800476e:	bd70      	pop	{r4, r5, r6, pc}
 8004770:	6802      	ldr	r2, [r0, #0]
 8004772:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004776:	2300      	movs	r3, #0
 8004778:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800477c:	e7f7      	b.n	800476e <_Balloc+0x66>
 800477e:	bf00      	nop
 8004780:	08005a6d 	.word	0x08005a6d
 8004784:	08005aed 	.word	0x08005aed

08004788 <_Bfree>:
 8004788:	b570      	push	{r4, r5, r6, lr}
 800478a:	69c6      	ldr	r6, [r0, #28]
 800478c:	4605      	mov	r5, r0
 800478e:	460c      	mov	r4, r1
 8004790:	b976      	cbnz	r6, 80047b0 <_Bfree+0x28>
 8004792:	2010      	movs	r0, #16
 8004794:	f7ff ff02 	bl	800459c <malloc>
 8004798:	4602      	mov	r2, r0
 800479a:	61e8      	str	r0, [r5, #28]
 800479c:	b920      	cbnz	r0, 80047a8 <_Bfree+0x20>
 800479e:	4b09      	ldr	r3, [pc, #36]	@ (80047c4 <_Bfree+0x3c>)
 80047a0:	4809      	ldr	r0, [pc, #36]	@ (80047c8 <_Bfree+0x40>)
 80047a2:	218f      	movs	r1, #143	@ 0x8f
 80047a4:	f000 fd6e 	bl	8005284 <__assert_func>
 80047a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80047ac:	6006      	str	r6, [r0, #0]
 80047ae:	60c6      	str	r6, [r0, #12]
 80047b0:	b13c      	cbz	r4, 80047c2 <_Bfree+0x3a>
 80047b2:	69eb      	ldr	r3, [r5, #28]
 80047b4:	6862      	ldr	r2, [r4, #4]
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80047bc:	6021      	str	r1, [r4, #0]
 80047be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80047c2:	bd70      	pop	{r4, r5, r6, pc}
 80047c4:	08005a6d 	.word	0x08005a6d
 80047c8:	08005aed 	.word	0x08005aed

080047cc <__multadd>:
 80047cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047d0:	690d      	ldr	r5, [r1, #16]
 80047d2:	4607      	mov	r7, r0
 80047d4:	460c      	mov	r4, r1
 80047d6:	461e      	mov	r6, r3
 80047d8:	f101 0c14 	add.w	ip, r1, #20
 80047dc:	2000      	movs	r0, #0
 80047de:	f8dc 3000 	ldr.w	r3, [ip]
 80047e2:	b299      	uxth	r1, r3
 80047e4:	fb02 6101 	mla	r1, r2, r1, r6
 80047e8:	0c1e      	lsrs	r6, r3, #16
 80047ea:	0c0b      	lsrs	r3, r1, #16
 80047ec:	fb02 3306 	mla	r3, r2, r6, r3
 80047f0:	b289      	uxth	r1, r1
 80047f2:	3001      	adds	r0, #1
 80047f4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80047f8:	4285      	cmp	r5, r0
 80047fa:	f84c 1b04 	str.w	r1, [ip], #4
 80047fe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004802:	dcec      	bgt.n	80047de <__multadd+0x12>
 8004804:	b30e      	cbz	r6, 800484a <__multadd+0x7e>
 8004806:	68a3      	ldr	r3, [r4, #8]
 8004808:	42ab      	cmp	r3, r5
 800480a:	dc19      	bgt.n	8004840 <__multadd+0x74>
 800480c:	6861      	ldr	r1, [r4, #4]
 800480e:	4638      	mov	r0, r7
 8004810:	3101      	adds	r1, #1
 8004812:	f7ff ff79 	bl	8004708 <_Balloc>
 8004816:	4680      	mov	r8, r0
 8004818:	b928      	cbnz	r0, 8004826 <__multadd+0x5a>
 800481a:	4602      	mov	r2, r0
 800481c:	4b0c      	ldr	r3, [pc, #48]	@ (8004850 <__multadd+0x84>)
 800481e:	480d      	ldr	r0, [pc, #52]	@ (8004854 <__multadd+0x88>)
 8004820:	21ba      	movs	r1, #186	@ 0xba
 8004822:	f000 fd2f 	bl	8005284 <__assert_func>
 8004826:	6922      	ldr	r2, [r4, #16]
 8004828:	3202      	adds	r2, #2
 800482a:	f104 010c 	add.w	r1, r4, #12
 800482e:	0092      	lsls	r2, r2, #2
 8004830:	300c      	adds	r0, #12
 8004832:	f000 fd19 	bl	8005268 <memcpy>
 8004836:	4621      	mov	r1, r4
 8004838:	4638      	mov	r0, r7
 800483a:	f7ff ffa5 	bl	8004788 <_Bfree>
 800483e:	4644      	mov	r4, r8
 8004840:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004844:	3501      	adds	r5, #1
 8004846:	615e      	str	r6, [r3, #20]
 8004848:	6125      	str	r5, [r4, #16]
 800484a:	4620      	mov	r0, r4
 800484c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004850:	08005adc 	.word	0x08005adc
 8004854:	08005aed 	.word	0x08005aed

08004858 <__hi0bits>:
 8004858:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800485c:	4603      	mov	r3, r0
 800485e:	bf36      	itet	cc
 8004860:	0403      	lslcc	r3, r0, #16
 8004862:	2000      	movcs	r0, #0
 8004864:	2010      	movcc	r0, #16
 8004866:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800486a:	bf3c      	itt	cc
 800486c:	021b      	lslcc	r3, r3, #8
 800486e:	3008      	addcc	r0, #8
 8004870:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004874:	bf3c      	itt	cc
 8004876:	011b      	lslcc	r3, r3, #4
 8004878:	3004      	addcc	r0, #4
 800487a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800487e:	bf3c      	itt	cc
 8004880:	009b      	lslcc	r3, r3, #2
 8004882:	3002      	addcc	r0, #2
 8004884:	2b00      	cmp	r3, #0
 8004886:	db05      	blt.n	8004894 <__hi0bits+0x3c>
 8004888:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800488c:	f100 0001 	add.w	r0, r0, #1
 8004890:	bf08      	it	eq
 8004892:	2020      	moveq	r0, #32
 8004894:	4770      	bx	lr

08004896 <__lo0bits>:
 8004896:	6803      	ldr	r3, [r0, #0]
 8004898:	4602      	mov	r2, r0
 800489a:	f013 0007 	ands.w	r0, r3, #7
 800489e:	d00b      	beq.n	80048b8 <__lo0bits+0x22>
 80048a0:	07d9      	lsls	r1, r3, #31
 80048a2:	d421      	bmi.n	80048e8 <__lo0bits+0x52>
 80048a4:	0798      	lsls	r0, r3, #30
 80048a6:	bf49      	itett	mi
 80048a8:	085b      	lsrmi	r3, r3, #1
 80048aa:	089b      	lsrpl	r3, r3, #2
 80048ac:	2001      	movmi	r0, #1
 80048ae:	6013      	strmi	r3, [r2, #0]
 80048b0:	bf5c      	itt	pl
 80048b2:	6013      	strpl	r3, [r2, #0]
 80048b4:	2002      	movpl	r0, #2
 80048b6:	4770      	bx	lr
 80048b8:	b299      	uxth	r1, r3
 80048ba:	b909      	cbnz	r1, 80048c0 <__lo0bits+0x2a>
 80048bc:	0c1b      	lsrs	r3, r3, #16
 80048be:	2010      	movs	r0, #16
 80048c0:	b2d9      	uxtb	r1, r3
 80048c2:	b909      	cbnz	r1, 80048c8 <__lo0bits+0x32>
 80048c4:	3008      	adds	r0, #8
 80048c6:	0a1b      	lsrs	r3, r3, #8
 80048c8:	0719      	lsls	r1, r3, #28
 80048ca:	bf04      	itt	eq
 80048cc:	091b      	lsreq	r3, r3, #4
 80048ce:	3004      	addeq	r0, #4
 80048d0:	0799      	lsls	r1, r3, #30
 80048d2:	bf04      	itt	eq
 80048d4:	089b      	lsreq	r3, r3, #2
 80048d6:	3002      	addeq	r0, #2
 80048d8:	07d9      	lsls	r1, r3, #31
 80048da:	d403      	bmi.n	80048e4 <__lo0bits+0x4e>
 80048dc:	085b      	lsrs	r3, r3, #1
 80048de:	f100 0001 	add.w	r0, r0, #1
 80048e2:	d003      	beq.n	80048ec <__lo0bits+0x56>
 80048e4:	6013      	str	r3, [r2, #0]
 80048e6:	4770      	bx	lr
 80048e8:	2000      	movs	r0, #0
 80048ea:	4770      	bx	lr
 80048ec:	2020      	movs	r0, #32
 80048ee:	4770      	bx	lr

080048f0 <__i2b>:
 80048f0:	b510      	push	{r4, lr}
 80048f2:	460c      	mov	r4, r1
 80048f4:	2101      	movs	r1, #1
 80048f6:	f7ff ff07 	bl	8004708 <_Balloc>
 80048fa:	4602      	mov	r2, r0
 80048fc:	b928      	cbnz	r0, 800490a <__i2b+0x1a>
 80048fe:	4b05      	ldr	r3, [pc, #20]	@ (8004914 <__i2b+0x24>)
 8004900:	4805      	ldr	r0, [pc, #20]	@ (8004918 <__i2b+0x28>)
 8004902:	f240 1145 	movw	r1, #325	@ 0x145
 8004906:	f000 fcbd 	bl	8005284 <__assert_func>
 800490a:	2301      	movs	r3, #1
 800490c:	6144      	str	r4, [r0, #20]
 800490e:	6103      	str	r3, [r0, #16]
 8004910:	bd10      	pop	{r4, pc}
 8004912:	bf00      	nop
 8004914:	08005adc 	.word	0x08005adc
 8004918:	08005aed 	.word	0x08005aed

0800491c <__multiply>:
 800491c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004920:	4614      	mov	r4, r2
 8004922:	690a      	ldr	r2, [r1, #16]
 8004924:	6923      	ldr	r3, [r4, #16]
 8004926:	429a      	cmp	r2, r3
 8004928:	bfa8      	it	ge
 800492a:	4623      	movge	r3, r4
 800492c:	460f      	mov	r7, r1
 800492e:	bfa4      	itt	ge
 8004930:	460c      	movge	r4, r1
 8004932:	461f      	movge	r7, r3
 8004934:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8004938:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800493c:	68a3      	ldr	r3, [r4, #8]
 800493e:	6861      	ldr	r1, [r4, #4]
 8004940:	eb0a 0609 	add.w	r6, sl, r9
 8004944:	42b3      	cmp	r3, r6
 8004946:	b085      	sub	sp, #20
 8004948:	bfb8      	it	lt
 800494a:	3101      	addlt	r1, #1
 800494c:	f7ff fedc 	bl	8004708 <_Balloc>
 8004950:	b930      	cbnz	r0, 8004960 <__multiply+0x44>
 8004952:	4602      	mov	r2, r0
 8004954:	4b44      	ldr	r3, [pc, #272]	@ (8004a68 <__multiply+0x14c>)
 8004956:	4845      	ldr	r0, [pc, #276]	@ (8004a6c <__multiply+0x150>)
 8004958:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800495c:	f000 fc92 	bl	8005284 <__assert_func>
 8004960:	f100 0514 	add.w	r5, r0, #20
 8004964:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004968:	462b      	mov	r3, r5
 800496a:	2200      	movs	r2, #0
 800496c:	4543      	cmp	r3, r8
 800496e:	d321      	bcc.n	80049b4 <__multiply+0x98>
 8004970:	f107 0114 	add.w	r1, r7, #20
 8004974:	f104 0214 	add.w	r2, r4, #20
 8004978:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800497c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8004980:	9302      	str	r3, [sp, #8]
 8004982:	1b13      	subs	r3, r2, r4
 8004984:	3b15      	subs	r3, #21
 8004986:	f023 0303 	bic.w	r3, r3, #3
 800498a:	3304      	adds	r3, #4
 800498c:	f104 0715 	add.w	r7, r4, #21
 8004990:	42ba      	cmp	r2, r7
 8004992:	bf38      	it	cc
 8004994:	2304      	movcc	r3, #4
 8004996:	9301      	str	r3, [sp, #4]
 8004998:	9b02      	ldr	r3, [sp, #8]
 800499a:	9103      	str	r1, [sp, #12]
 800499c:	428b      	cmp	r3, r1
 800499e:	d80c      	bhi.n	80049ba <__multiply+0x9e>
 80049a0:	2e00      	cmp	r6, #0
 80049a2:	dd03      	ble.n	80049ac <__multiply+0x90>
 80049a4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d05b      	beq.n	8004a64 <__multiply+0x148>
 80049ac:	6106      	str	r6, [r0, #16]
 80049ae:	b005      	add	sp, #20
 80049b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049b4:	f843 2b04 	str.w	r2, [r3], #4
 80049b8:	e7d8      	b.n	800496c <__multiply+0x50>
 80049ba:	f8b1 a000 	ldrh.w	sl, [r1]
 80049be:	f1ba 0f00 	cmp.w	sl, #0
 80049c2:	d024      	beq.n	8004a0e <__multiply+0xf2>
 80049c4:	f104 0e14 	add.w	lr, r4, #20
 80049c8:	46a9      	mov	r9, r5
 80049ca:	f04f 0c00 	mov.w	ip, #0
 80049ce:	f85e 7b04 	ldr.w	r7, [lr], #4
 80049d2:	f8d9 3000 	ldr.w	r3, [r9]
 80049d6:	fa1f fb87 	uxth.w	fp, r7
 80049da:	b29b      	uxth	r3, r3
 80049dc:	fb0a 330b 	mla	r3, sl, fp, r3
 80049e0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80049e4:	f8d9 7000 	ldr.w	r7, [r9]
 80049e8:	4463      	add	r3, ip
 80049ea:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80049ee:	fb0a c70b 	mla	r7, sl, fp, ip
 80049f2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80049f6:	b29b      	uxth	r3, r3
 80049f8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80049fc:	4572      	cmp	r2, lr
 80049fe:	f849 3b04 	str.w	r3, [r9], #4
 8004a02:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8004a06:	d8e2      	bhi.n	80049ce <__multiply+0xb2>
 8004a08:	9b01      	ldr	r3, [sp, #4]
 8004a0a:	f845 c003 	str.w	ip, [r5, r3]
 8004a0e:	9b03      	ldr	r3, [sp, #12]
 8004a10:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8004a14:	3104      	adds	r1, #4
 8004a16:	f1b9 0f00 	cmp.w	r9, #0
 8004a1a:	d021      	beq.n	8004a60 <__multiply+0x144>
 8004a1c:	682b      	ldr	r3, [r5, #0]
 8004a1e:	f104 0c14 	add.w	ip, r4, #20
 8004a22:	46ae      	mov	lr, r5
 8004a24:	f04f 0a00 	mov.w	sl, #0
 8004a28:	f8bc b000 	ldrh.w	fp, [ip]
 8004a2c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8004a30:	fb09 770b 	mla	r7, r9, fp, r7
 8004a34:	4457      	add	r7, sl
 8004a36:	b29b      	uxth	r3, r3
 8004a38:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8004a3c:	f84e 3b04 	str.w	r3, [lr], #4
 8004a40:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004a44:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004a48:	f8be 3000 	ldrh.w	r3, [lr]
 8004a4c:	fb09 330a 	mla	r3, r9, sl, r3
 8004a50:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8004a54:	4562      	cmp	r2, ip
 8004a56:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004a5a:	d8e5      	bhi.n	8004a28 <__multiply+0x10c>
 8004a5c:	9f01      	ldr	r7, [sp, #4]
 8004a5e:	51eb      	str	r3, [r5, r7]
 8004a60:	3504      	adds	r5, #4
 8004a62:	e799      	b.n	8004998 <__multiply+0x7c>
 8004a64:	3e01      	subs	r6, #1
 8004a66:	e79b      	b.n	80049a0 <__multiply+0x84>
 8004a68:	08005adc 	.word	0x08005adc
 8004a6c:	08005aed 	.word	0x08005aed

08004a70 <__pow5mult>:
 8004a70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a74:	4615      	mov	r5, r2
 8004a76:	f012 0203 	ands.w	r2, r2, #3
 8004a7a:	4607      	mov	r7, r0
 8004a7c:	460e      	mov	r6, r1
 8004a7e:	d007      	beq.n	8004a90 <__pow5mult+0x20>
 8004a80:	4c25      	ldr	r4, [pc, #148]	@ (8004b18 <__pow5mult+0xa8>)
 8004a82:	3a01      	subs	r2, #1
 8004a84:	2300      	movs	r3, #0
 8004a86:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004a8a:	f7ff fe9f 	bl	80047cc <__multadd>
 8004a8e:	4606      	mov	r6, r0
 8004a90:	10ad      	asrs	r5, r5, #2
 8004a92:	d03d      	beq.n	8004b10 <__pow5mult+0xa0>
 8004a94:	69fc      	ldr	r4, [r7, #28]
 8004a96:	b97c      	cbnz	r4, 8004ab8 <__pow5mult+0x48>
 8004a98:	2010      	movs	r0, #16
 8004a9a:	f7ff fd7f 	bl	800459c <malloc>
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	61f8      	str	r0, [r7, #28]
 8004aa2:	b928      	cbnz	r0, 8004ab0 <__pow5mult+0x40>
 8004aa4:	4b1d      	ldr	r3, [pc, #116]	@ (8004b1c <__pow5mult+0xac>)
 8004aa6:	481e      	ldr	r0, [pc, #120]	@ (8004b20 <__pow5mult+0xb0>)
 8004aa8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8004aac:	f000 fbea 	bl	8005284 <__assert_func>
 8004ab0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004ab4:	6004      	str	r4, [r0, #0]
 8004ab6:	60c4      	str	r4, [r0, #12]
 8004ab8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8004abc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004ac0:	b94c      	cbnz	r4, 8004ad6 <__pow5mult+0x66>
 8004ac2:	f240 2171 	movw	r1, #625	@ 0x271
 8004ac6:	4638      	mov	r0, r7
 8004ac8:	f7ff ff12 	bl	80048f0 <__i2b>
 8004acc:	2300      	movs	r3, #0
 8004ace:	f8c8 0008 	str.w	r0, [r8, #8]
 8004ad2:	4604      	mov	r4, r0
 8004ad4:	6003      	str	r3, [r0, #0]
 8004ad6:	f04f 0900 	mov.w	r9, #0
 8004ada:	07eb      	lsls	r3, r5, #31
 8004adc:	d50a      	bpl.n	8004af4 <__pow5mult+0x84>
 8004ade:	4631      	mov	r1, r6
 8004ae0:	4622      	mov	r2, r4
 8004ae2:	4638      	mov	r0, r7
 8004ae4:	f7ff ff1a 	bl	800491c <__multiply>
 8004ae8:	4631      	mov	r1, r6
 8004aea:	4680      	mov	r8, r0
 8004aec:	4638      	mov	r0, r7
 8004aee:	f7ff fe4b 	bl	8004788 <_Bfree>
 8004af2:	4646      	mov	r6, r8
 8004af4:	106d      	asrs	r5, r5, #1
 8004af6:	d00b      	beq.n	8004b10 <__pow5mult+0xa0>
 8004af8:	6820      	ldr	r0, [r4, #0]
 8004afa:	b938      	cbnz	r0, 8004b0c <__pow5mult+0x9c>
 8004afc:	4622      	mov	r2, r4
 8004afe:	4621      	mov	r1, r4
 8004b00:	4638      	mov	r0, r7
 8004b02:	f7ff ff0b 	bl	800491c <__multiply>
 8004b06:	6020      	str	r0, [r4, #0]
 8004b08:	f8c0 9000 	str.w	r9, [r0]
 8004b0c:	4604      	mov	r4, r0
 8004b0e:	e7e4      	b.n	8004ada <__pow5mult+0x6a>
 8004b10:	4630      	mov	r0, r6
 8004b12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b16:	bf00      	nop
 8004b18:	08005b48 	.word	0x08005b48
 8004b1c:	08005a6d 	.word	0x08005a6d
 8004b20:	08005aed 	.word	0x08005aed

08004b24 <__lshift>:
 8004b24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b28:	460c      	mov	r4, r1
 8004b2a:	6849      	ldr	r1, [r1, #4]
 8004b2c:	6923      	ldr	r3, [r4, #16]
 8004b2e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004b32:	68a3      	ldr	r3, [r4, #8]
 8004b34:	4607      	mov	r7, r0
 8004b36:	4691      	mov	r9, r2
 8004b38:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004b3c:	f108 0601 	add.w	r6, r8, #1
 8004b40:	42b3      	cmp	r3, r6
 8004b42:	db0b      	blt.n	8004b5c <__lshift+0x38>
 8004b44:	4638      	mov	r0, r7
 8004b46:	f7ff fddf 	bl	8004708 <_Balloc>
 8004b4a:	4605      	mov	r5, r0
 8004b4c:	b948      	cbnz	r0, 8004b62 <__lshift+0x3e>
 8004b4e:	4602      	mov	r2, r0
 8004b50:	4b28      	ldr	r3, [pc, #160]	@ (8004bf4 <__lshift+0xd0>)
 8004b52:	4829      	ldr	r0, [pc, #164]	@ (8004bf8 <__lshift+0xd4>)
 8004b54:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8004b58:	f000 fb94 	bl	8005284 <__assert_func>
 8004b5c:	3101      	adds	r1, #1
 8004b5e:	005b      	lsls	r3, r3, #1
 8004b60:	e7ee      	b.n	8004b40 <__lshift+0x1c>
 8004b62:	2300      	movs	r3, #0
 8004b64:	f100 0114 	add.w	r1, r0, #20
 8004b68:	f100 0210 	add.w	r2, r0, #16
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	4553      	cmp	r3, sl
 8004b70:	db33      	blt.n	8004bda <__lshift+0xb6>
 8004b72:	6920      	ldr	r0, [r4, #16]
 8004b74:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004b78:	f104 0314 	add.w	r3, r4, #20
 8004b7c:	f019 091f 	ands.w	r9, r9, #31
 8004b80:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004b84:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004b88:	d02b      	beq.n	8004be2 <__lshift+0xbe>
 8004b8a:	f1c9 0e20 	rsb	lr, r9, #32
 8004b8e:	468a      	mov	sl, r1
 8004b90:	2200      	movs	r2, #0
 8004b92:	6818      	ldr	r0, [r3, #0]
 8004b94:	fa00 f009 	lsl.w	r0, r0, r9
 8004b98:	4310      	orrs	r0, r2
 8004b9a:	f84a 0b04 	str.w	r0, [sl], #4
 8004b9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ba2:	459c      	cmp	ip, r3
 8004ba4:	fa22 f20e 	lsr.w	r2, r2, lr
 8004ba8:	d8f3      	bhi.n	8004b92 <__lshift+0x6e>
 8004baa:	ebac 0304 	sub.w	r3, ip, r4
 8004bae:	3b15      	subs	r3, #21
 8004bb0:	f023 0303 	bic.w	r3, r3, #3
 8004bb4:	3304      	adds	r3, #4
 8004bb6:	f104 0015 	add.w	r0, r4, #21
 8004bba:	4584      	cmp	ip, r0
 8004bbc:	bf38      	it	cc
 8004bbe:	2304      	movcc	r3, #4
 8004bc0:	50ca      	str	r2, [r1, r3]
 8004bc2:	b10a      	cbz	r2, 8004bc8 <__lshift+0xa4>
 8004bc4:	f108 0602 	add.w	r6, r8, #2
 8004bc8:	3e01      	subs	r6, #1
 8004bca:	4638      	mov	r0, r7
 8004bcc:	612e      	str	r6, [r5, #16]
 8004bce:	4621      	mov	r1, r4
 8004bd0:	f7ff fdda 	bl	8004788 <_Bfree>
 8004bd4:	4628      	mov	r0, r5
 8004bd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bda:	f842 0f04 	str.w	r0, [r2, #4]!
 8004bde:	3301      	adds	r3, #1
 8004be0:	e7c5      	b.n	8004b6e <__lshift+0x4a>
 8004be2:	3904      	subs	r1, #4
 8004be4:	f853 2b04 	ldr.w	r2, [r3], #4
 8004be8:	f841 2f04 	str.w	r2, [r1, #4]!
 8004bec:	459c      	cmp	ip, r3
 8004bee:	d8f9      	bhi.n	8004be4 <__lshift+0xc0>
 8004bf0:	e7ea      	b.n	8004bc8 <__lshift+0xa4>
 8004bf2:	bf00      	nop
 8004bf4:	08005adc 	.word	0x08005adc
 8004bf8:	08005aed 	.word	0x08005aed

08004bfc <__mcmp>:
 8004bfc:	690a      	ldr	r2, [r1, #16]
 8004bfe:	4603      	mov	r3, r0
 8004c00:	6900      	ldr	r0, [r0, #16]
 8004c02:	1a80      	subs	r0, r0, r2
 8004c04:	b530      	push	{r4, r5, lr}
 8004c06:	d10e      	bne.n	8004c26 <__mcmp+0x2a>
 8004c08:	3314      	adds	r3, #20
 8004c0a:	3114      	adds	r1, #20
 8004c0c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8004c10:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8004c14:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004c18:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004c1c:	4295      	cmp	r5, r2
 8004c1e:	d003      	beq.n	8004c28 <__mcmp+0x2c>
 8004c20:	d205      	bcs.n	8004c2e <__mcmp+0x32>
 8004c22:	f04f 30ff 	mov.w	r0, #4294967295
 8004c26:	bd30      	pop	{r4, r5, pc}
 8004c28:	42a3      	cmp	r3, r4
 8004c2a:	d3f3      	bcc.n	8004c14 <__mcmp+0x18>
 8004c2c:	e7fb      	b.n	8004c26 <__mcmp+0x2a>
 8004c2e:	2001      	movs	r0, #1
 8004c30:	e7f9      	b.n	8004c26 <__mcmp+0x2a>
	...

08004c34 <__mdiff>:
 8004c34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c38:	4689      	mov	r9, r1
 8004c3a:	4606      	mov	r6, r0
 8004c3c:	4611      	mov	r1, r2
 8004c3e:	4648      	mov	r0, r9
 8004c40:	4614      	mov	r4, r2
 8004c42:	f7ff ffdb 	bl	8004bfc <__mcmp>
 8004c46:	1e05      	subs	r5, r0, #0
 8004c48:	d112      	bne.n	8004c70 <__mdiff+0x3c>
 8004c4a:	4629      	mov	r1, r5
 8004c4c:	4630      	mov	r0, r6
 8004c4e:	f7ff fd5b 	bl	8004708 <_Balloc>
 8004c52:	4602      	mov	r2, r0
 8004c54:	b928      	cbnz	r0, 8004c62 <__mdiff+0x2e>
 8004c56:	4b3f      	ldr	r3, [pc, #252]	@ (8004d54 <__mdiff+0x120>)
 8004c58:	f240 2137 	movw	r1, #567	@ 0x237
 8004c5c:	483e      	ldr	r0, [pc, #248]	@ (8004d58 <__mdiff+0x124>)
 8004c5e:	f000 fb11 	bl	8005284 <__assert_func>
 8004c62:	2301      	movs	r3, #1
 8004c64:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004c68:	4610      	mov	r0, r2
 8004c6a:	b003      	add	sp, #12
 8004c6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c70:	bfbc      	itt	lt
 8004c72:	464b      	movlt	r3, r9
 8004c74:	46a1      	movlt	r9, r4
 8004c76:	4630      	mov	r0, r6
 8004c78:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8004c7c:	bfba      	itte	lt
 8004c7e:	461c      	movlt	r4, r3
 8004c80:	2501      	movlt	r5, #1
 8004c82:	2500      	movge	r5, #0
 8004c84:	f7ff fd40 	bl	8004708 <_Balloc>
 8004c88:	4602      	mov	r2, r0
 8004c8a:	b918      	cbnz	r0, 8004c94 <__mdiff+0x60>
 8004c8c:	4b31      	ldr	r3, [pc, #196]	@ (8004d54 <__mdiff+0x120>)
 8004c8e:	f240 2145 	movw	r1, #581	@ 0x245
 8004c92:	e7e3      	b.n	8004c5c <__mdiff+0x28>
 8004c94:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8004c98:	6926      	ldr	r6, [r4, #16]
 8004c9a:	60c5      	str	r5, [r0, #12]
 8004c9c:	f109 0310 	add.w	r3, r9, #16
 8004ca0:	f109 0514 	add.w	r5, r9, #20
 8004ca4:	f104 0e14 	add.w	lr, r4, #20
 8004ca8:	f100 0b14 	add.w	fp, r0, #20
 8004cac:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8004cb0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8004cb4:	9301      	str	r3, [sp, #4]
 8004cb6:	46d9      	mov	r9, fp
 8004cb8:	f04f 0c00 	mov.w	ip, #0
 8004cbc:	9b01      	ldr	r3, [sp, #4]
 8004cbe:	f85e 0b04 	ldr.w	r0, [lr], #4
 8004cc2:	f853 af04 	ldr.w	sl, [r3, #4]!
 8004cc6:	9301      	str	r3, [sp, #4]
 8004cc8:	fa1f f38a 	uxth.w	r3, sl
 8004ccc:	4619      	mov	r1, r3
 8004cce:	b283      	uxth	r3, r0
 8004cd0:	1acb      	subs	r3, r1, r3
 8004cd2:	0c00      	lsrs	r0, r0, #16
 8004cd4:	4463      	add	r3, ip
 8004cd6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8004cda:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8004ce4:	4576      	cmp	r6, lr
 8004ce6:	f849 3b04 	str.w	r3, [r9], #4
 8004cea:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8004cee:	d8e5      	bhi.n	8004cbc <__mdiff+0x88>
 8004cf0:	1b33      	subs	r3, r6, r4
 8004cf2:	3b15      	subs	r3, #21
 8004cf4:	f023 0303 	bic.w	r3, r3, #3
 8004cf8:	3415      	adds	r4, #21
 8004cfa:	3304      	adds	r3, #4
 8004cfc:	42a6      	cmp	r6, r4
 8004cfe:	bf38      	it	cc
 8004d00:	2304      	movcc	r3, #4
 8004d02:	441d      	add	r5, r3
 8004d04:	445b      	add	r3, fp
 8004d06:	461e      	mov	r6, r3
 8004d08:	462c      	mov	r4, r5
 8004d0a:	4544      	cmp	r4, r8
 8004d0c:	d30e      	bcc.n	8004d2c <__mdiff+0xf8>
 8004d0e:	f108 0103 	add.w	r1, r8, #3
 8004d12:	1b49      	subs	r1, r1, r5
 8004d14:	f021 0103 	bic.w	r1, r1, #3
 8004d18:	3d03      	subs	r5, #3
 8004d1a:	45a8      	cmp	r8, r5
 8004d1c:	bf38      	it	cc
 8004d1e:	2100      	movcc	r1, #0
 8004d20:	440b      	add	r3, r1
 8004d22:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8004d26:	b191      	cbz	r1, 8004d4e <__mdiff+0x11a>
 8004d28:	6117      	str	r7, [r2, #16]
 8004d2a:	e79d      	b.n	8004c68 <__mdiff+0x34>
 8004d2c:	f854 1b04 	ldr.w	r1, [r4], #4
 8004d30:	46e6      	mov	lr, ip
 8004d32:	0c08      	lsrs	r0, r1, #16
 8004d34:	fa1c fc81 	uxtah	ip, ip, r1
 8004d38:	4471      	add	r1, lr
 8004d3a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8004d3e:	b289      	uxth	r1, r1
 8004d40:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8004d44:	f846 1b04 	str.w	r1, [r6], #4
 8004d48:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8004d4c:	e7dd      	b.n	8004d0a <__mdiff+0xd6>
 8004d4e:	3f01      	subs	r7, #1
 8004d50:	e7e7      	b.n	8004d22 <__mdiff+0xee>
 8004d52:	bf00      	nop
 8004d54:	08005adc 	.word	0x08005adc
 8004d58:	08005aed 	.word	0x08005aed

08004d5c <__d2b>:
 8004d5c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004d60:	460f      	mov	r7, r1
 8004d62:	2101      	movs	r1, #1
 8004d64:	ec59 8b10 	vmov	r8, r9, d0
 8004d68:	4616      	mov	r6, r2
 8004d6a:	f7ff fccd 	bl	8004708 <_Balloc>
 8004d6e:	4604      	mov	r4, r0
 8004d70:	b930      	cbnz	r0, 8004d80 <__d2b+0x24>
 8004d72:	4602      	mov	r2, r0
 8004d74:	4b23      	ldr	r3, [pc, #140]	@ (8004e04 <__d2b+0xa8>)
 8004d76:	4824      	ldr	r0, [pc, #144]	@ (8004e08 <__d2b+0xac>)
 8004d78:	f240 310f 	movw	r1, #783	@ 0x30f
 8004d7c:	f000 fa82 	bl	8005284 <__assert_func>
 8004d80:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8004d84:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004d88:	b10d      	cbz	r5, 8004d8e <__d2b+0x32>
 8004d8a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004d8e:	9301      	str	r3, [sp, #4]
 8004d90:	f1b8 0300 	subs.w	r3, r8, #0
 8004d94:	d023      	beq.n	8004dde <__d2b+0x82>
 8004d96:	4668      	mov	r0, sp
 8004d98:	9300      	str	r3, [sp, #0]
 8004d9a:	f7ff fd7c 	bl	8004896 <__lo0bits>
 8004d9e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8004da2:	b1d0      	cbz	r0, 8004dda <__d2b+0x7e>
 8004da4:	f1c0 0320 	rsb	r3, r0, #32
 8004da8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dac:	430b      	orrs	r3, r1
 8004dae:	40c2      	lsrs	r2, r0
 8004db0:	6163      	str	r3, [r4, #20]
 8004db2:	9201      	str	r2, [sp, #4]
 8004db4:	9b01      	ldr	r3, [sp, #4]
 8004db6:	61a3      	str	r3, [r4, #24]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	bf0c      	ite	eq
 8004dbc:	2201      	moveq	r2, #1
 8004dbe:	2202      	movne	r2, #2
 8004dc0:	6122      	str	r2, [r4, #16]
 8004dc2:	b1a5      	cbz	r5, 8004dee <__d2b+0x92>
 8004dc4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8004dc8:	4405      	add	r5, r0
 8004dca:	603d      	str	r5, [r7, #0]
 8004dcc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8004dd0:	6030      	str	r0, [r6, #0]
 8004dd2:	4620      	mov	r0, r4
 8004dd4:	b003      	add	sp, #12
 8004dd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004dda:	6161      	str	r1, [r4, #20]
 8004ddc:	e7ea      	b.n	8004db4 <__d2b+0x58>
 8004dde:	a801      	add	r0, sp, #4
 8004de0:	f7ff fd59 	bl	8004896 <__lo0bits>
 8004de4:	9b01      	ldr	r3, [sp, #4]
 8004de6:	6163      	str	r3, [r4, #20]
 8004de8:	3020      	adds	r0, #32
 8004dea:	2201      	movs	r2, #1
 8004dec:	e7e8      	b.n	8004dc0 <__d2b+0x64>
 8004dee:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8004df2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8004df6:	6038      	str	r0, [r7, #0]
 8004df8:	6918      	ldr	r0, [r3, #16]
 8004dfa:	f7ff fd2d 	bl	8004858 <__hi0bits>
 8004dfe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8004e02:	e7e5      	b.n	8004dd0 <__d2b+0x74>
 8004e04:	08005adc 	.word	0x08005adc
 8004e08:	08005aed 	.word	0x08005aed

08004e0c <__ssputs_r>:
 8004e0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e10:	688e      	ldr	r6, [r1, #8]
 8004e12:	461f      	mov	r7, r3
 8004e14:	42be      	cmp	r6, r7
 8004e16:	680b      	ldr	r3, [r1, #0]
 8004e18:	4682      	mov	sl, r0
 8004e1a:	460c      	mov	r4, r1
 8004e1c:	4690      	mov	r8, r2
 8004e1e:	d82d      	bhi.n	8004e7c <__ssputs_r+0x70>
 8004e20:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004e24:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004e28:	d026      	beq.n	8004e78 <__ssputs_r+0x6c>
 8004e2a:	6965      	ldr	r5, [r4, #20]
 8004e2c:	6909      	ldr	r1, [r1, #16]
 8004e2e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004e32:	eba3 0901 	sub.w	r9, r3, r1
 8004e36:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004e3a:	1c7b      	adds	r3, r7, #1
 8004e3c:	444b      	add	r3, r9
 8004e3e:	106d      	asrs	r5, r5, #1
 8004e40:	429d      	cmp	r5, r3
 8004e42:	bf38      	it	cc
 8004e44:	461d      	movcc	r5, r3
 8004e46:	0553      	lsls	r3, r2, #21
 8004e48:	d527      	bpl.n	8004e9a <__ssputs_r+0x8e>
 8004e4a:	4629      	mov	r1, r5
 8004e4c:	f7ff fbd0 	bl	80045f0 <_malloc_r>
 8004e50:	4606      	mov	r6, r0
 8004e52:	b360      	cbz	r0, 8004eae <__ssputs_r+0xa2>
 8004e54:	6921      	ldr	r1, [r4, #16]
 8004e56:	464a      	mov	r2, r9
 8004e58:	f000 fa06 	bl	8005268 <memcpy>
 8004e5c:	89a3      	ldrh	r3, [r4, #12]
 8004e5e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004e62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e66:	81a3      	strh	r3, [r4, #12]
 8004e68:	6126      	str	r6, [r4, #16]
 8004e6a:	6165      	str	r5, [r4, #20]
 8004e6c:	444e      	add	r6, r9
 8004e6e:	eba5 0509 	sub.w	r5, r5, r9
 8004e72:	6026      	str	r6, [r4, #0]
 8004e74:	60a5      	str	r5, [r4, #8]
 8004e76:	463e      	mov	r6, r7
 8004e78:	42be      	cmp	r6, r7
 8004e7a:	d900      	bls.n	8004e7e <__ssputs_r+0x72>
 8004e7c:	463e      	mov	r6, r7
 8004e7e:	6820      	ldr	r0, [r4, #0]
 8004e80:	4632      	mov	r2, r6
 8004e82:	4641      	mov	r1, r8
 8004e84:	f000 f9c6 	bl	8005214 <memmove>
 8004e88:	68a3      	ldr	r3, [r4, #8]
 8004e8a:	1b9b      	subs	r3, r3, r6
 8004e8c:	60a3      	str	r3, [r4, #8]
 8004e8e:	6823      	ldr	r3, [r4, #0]
 8004e90:	4433      	add	r3, r6
 8004e92:	6023      	str	r3, [r4, #0]
 8004e94:	2000      	movs	r0, #0
 8004e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e9a:	462a      	mov	r2, r5
 8004e9c:	f000 fa36 	bl	800530c <_realloc_r>
 8004ea0:	4606      	mov	r6, r0
 8004ea2:	2800      	cmp	r0, #0
 8004ea4:	d1e0      	bne.n	8004e68 <__ssputs_r+0x5c>
 8004ea6:	6921      	ldr	r1, [r4, #16]
 8004ea8:	4650      	mov	r0, sl
 8004eaa:	f7ff fb2d 	bl	8004508 <_free_r>
 8004eae:	230c      	movs	r3, #12
 8004eb0:	f8ca 3000 	str.w	r3, [sl]
 8004eb4:	89a3      	ldrh	r3, [r4, #12]
 8004eb6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004eba:	81a3      	strh	r3, [r4, #12]
 8004ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8004ec0:	e7e9      	b.n	8004e96 <__ssputs_r+0x8a>
	...

08004ec4 <_svfiprintf_r>:
 8004ec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ec8:	4698      	mov	r8, r3
 8004eca:	898b      	ldrh	r3, [r1, #12]
 8004ecc:	061b      	lsls	r3, r3, #24
 8004ece:	b09d      	sub	sp, #116	@ 0x74
 8004ed0:	4607      	mov	r7, r0
 8004ed2:	460d      	mov	r5, r1
 8004ed4:	4614      	mov	r4, r2
 8004ed6:	d510      	bpl.n	8004efa <_svfiprintf_r+0x36>
 8004ed8:	690b      	ldr	r3, [r1, #16]
 8004eda:	b973      	cbnz	r3, 8004efa <_svfiprintf_r+0x36>
 8004edc:	2140      	movs	r1, #64	@ 0x40
 8004ede:	f7ff fb87 	bl	80045f0 <_malloc_r>
 8004ee2:	6028      	str	r0, [r5, #0]
 8004ee4:	6128      	str	r0, [r5, #16]
 8004ee6:	b930      	cbnz	r0, 8004ef6 <_svfiprintf_r+0x32>
 8004ee8:	230c      	movs	r3, #12
 8004eea:	603b      	str	r3, [r7, #0]
 8004eec:	f04f 30ff 	mov.w	r0, #4294967295
 8004ef0:	b01d      	add	sp, #116	@ 0x74
 8004ef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ef6:	2340      	movs	r3, #64	@ 0x40
 8004ef8:	616b      	str	r3, [r5, #20]
 8004efa:	2300      	movs	r3, #0
 8004efc:	9309      	str	r3, [sp, #36]	@ 0x24
 8004efe:	2320      	movs	r3, #32
 8004f00:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004f04:	f8cd 800c 	str.w	r8, [sp, #12]
 8004f08:	2330      	movs	r3, #48	@ 0x30
 8004f0a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80050a8 <_svfiprintf_r+0x1e4>
 8004f0e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004f12:	f04f 0901 	mov.w	r9, #1
 8004f16:	4623      	mov	r3, r4
 8004f18:	469a      	mov	sl, r3
 8004f1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004f1e:	b10a      	cbz	r2, 8004f24 <_svfiprintf_r+0x60>
 8004f20:	2a25      	cmp	r2, #37	@ 0x25
 8004f22:	d1f9      	bne.n	8004f18 <_svfiprintf_r+0x54>
 8004f24:	ebba 0b04 	subs.w	fp, sl, r4
 8004f28:	d00b      	beq.n	8004f42 <_svfiprintf_r+0x7e>
 8004f2a:	465b      	mov	r3, fp
 8004f2c:	4622      	mov	r2, r4
 8004f2e:	4629      	mov	r1, r5
 8004f30:	4638      	mov	r0, r7
 8004f32:	f7ff ff6b 	bl	8004e0c <__ssputs_r>
 8004f36:	3001      	adds	r0, #1
 8004f38:	f000 80a7 	beq.w	800508a <_svfiprintf_r+0x1c6>
 8004f3c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004f3e:	445a      	add	r2, fp
 8004f40:	9209      	str	r2, [sp, #36]	@ 0x24
 8004f42:	f89a 3000 	ldrb.w	r3, [sl]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	f000 809f 	beq.w	800508a <_svfiprintf_r+0x1c6>
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	f04f 32ff 	mov.w	r2, #4294967295
 8004f52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004f56:	f10a 0a01 	add.w	sl, sl, #1
 8004f5a:	9304      	str	r3, [sp, #16]
 8004f5c:	9307      	str	r3, [sp, #28]
 8004f5e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004f62:	931a      	str	r3, [sp, #104]	@ 0x68
 8004f64:	4654      	mov	r4, sl
 8004f66:	2205      	movs	r2, #5
 8004f68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f6c:	484e      	ldr	r0, [pc, #312]	@ (80050a8 <_svfiprintf_r+0x1e4>)
 8004f6e:	f7fb f93f 	bl	80001f0 <memchr>
 8004f72:	9a04      	ldr	r2, [sp, #16]
 8004f74:	b9d8      	cbnz	r0, 8004fae <_svfiprintf_r+0xea>
 8004f76:	06d0      	lsls	r0, r2, #27
 8004f78:	bf44      	itt	mi
 8004f7a:	2320      	movmi	r3, #32
 8004f7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004f80:	0711      	lsls	r1, r2, #28
 8004f82:	bf44      	itt	mi
 8004f84:	232b      	movmi	r3, #43	@ 0x2b
 8004f86:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004f8a:	f89a 3000 	ldrb.w	r3, [sl]
 8004f8e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004f90:	d015      	beq.n	8004fbe <_svfiprintf_r+0xfa>
 8004f92:	9a07      	ldr	r2, [sp, #28]
 8004f94:	4654      	mov	r4, sl
 8004f96:	2000      	movs	r0, #0
 8004f98:	f04f 0c0a 	mov.w	ip, #10
 8004f9c:	4621      	mov	r1, r4
 8004f9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004fa2:	3b30      	subs	r3, #48	@ 0x30
 8004fa4:	2b09      	cmp	r3, #9
 8004fa6:	d94b      	bls.n	8005040 <_svfiprintf_r+0x17c>
 8004fa8:	b1b0      	cbz	r0, 8004fd8 <_svfiprintf_r+0x114>
 8004faa:	9207      	str	r2, [sp, #28]
 8004fac:	e014      	b.n	8004fd8 <_svfiprintf_r+0x114>
 8004fae:	eba0 0308 	sub.w	r3, r0, r8
 8004fb2:	fa09 f303 	lsl.w	r3, r9, r3
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	9304      	str	r3, [sp, #16]
 8004fba:	46a2      	mov	sl, r4
 8004fbc:	e7d2      	b.n	8004f64 <_svfiprintf_r+0xa0>
 8004fbe:	9b03      	ldr	r3, [sp, #12]
 8004fc0:	1d19      	adds	r1, r3, #4
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	9103      	str	r1, [sp, #12]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	bfbb      	ittet	lt
 8004fca:	425b      	neglt	r3, r3
 8004fcc:	f042 0202 	orrlt.w	r2, r2, #2
 8004fd0:	9307      	strge	r3, [sp, #28]
 8004fd2:	9307      	strlt	r3, [sp, #28]
 8004fd4:	bfb8      	it	lt
 8004fd6:	9204      	strlt	r2, [sp, #16]
 8004fd8:	7823      	ldrb	r3, [r4, #0]
 8004fda:	2b2e      	cmp	r3, #46	@ 0x2e
 8004fdc:	d10a      	bne.n	8004ff4 <_svfiprintf_r+0x130>
 8004fde:	7863      	ldrb	r3, [r4, #1]
 8004fe0:	2b2a      	cmp	r3, #42	@ 0x2a
 8004fe2:	d132      	bne.n	800504a <_svfiprintf_r+0x186>
 8004fe4:	9b03      	ldr	r3, [sp, #12]
 8004fe6:	1d1a      	adds	r2, r3, #4
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	9203      	str	r2, [sp, #12]
 8004fec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004ff0:	3402      	adds	r4, #2
 8004ff2:	9305      	str	r3, [sp, #20]
 8004ff4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80050b8 <_svfiprintf_r+0x1f4>
 8004ff8:	7821      	ldrb	r1, [r4, #0]
 8004ffa:	2203      	movs	r2, #3
 8004ffc:	4650      	mov	r0, sl
 8004ffe:	f7fb f8f7 	bl	80001f0 <memchr>
 8005002:	b138      	cbz	r0, 8005014 <_svfiprintf_r+0x150>
 8005004:	9b04      	ldr	r3, [sp, #16]
 8005006:	eba0 000a 	sub.w	r0, r0, sl
 800500a:	2240      	movs	r2, #64	@ 0x40
 800500c:	4082      	lsls	r2, r0
 800500e:	4313      	orrs	r3, r2
 8005010:	3401      	adds	r4, #1
 8005012:	9304      	str	r3, [sp, #16]
 8005014:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005018:	4824      	ldr	r0, [pc, #144]	@ (80050ac <_svfiprintf_r+0x1e8>)
 800501a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800501e:	2206      	movs	r2, #6
 8005020:	f7fb f8e6 	bl	80001f0 <memchr>
 8005024:	2800      	cmp	r0, #0
 8005026:	d036      	beq.n	8005096 <_svfiprintf_r+0x1d2>
 8005028:	4b21      	ldr	r3, [pc, #132]	@ (80050b0 <_svfiprintf_r+0x1ec>)
 800502a:	bb1b      	cbnz	r3, 8005074 <_svfiprintf_r+0x1b0>
 800502c:	9b03      	ldr	r3, [sp, #12]
 800502e:	3307      	adds	r3, #7
 8005030:	f023 0307 	bic.w	r3, r3, #7
 8005034:	3308      	adds	r3, #8
 8005036:	9303      	str	r3, [sp, #12]
 8005038:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800503a:	4433      	add	r3, r6
 800503c:	9309      	str	r3, [sp, #36]	@ 0x24
 800503e:	e76a      	b.n	8004f16 <_svfiprintf_r+0x52>
 8005040:	fb0c 3202 	mla	r2, ip, r2, r3
 8005044:	460c      	mov	r4, r1
 8005046:	2001      	movs	r0, #1
 8005048:	e7a8      	b.n	8004f9c <_svfiprintf_r+0xd8>
 800504a:	2300      	movs	r3, #0
 800504c:	3401      	adds	r4, #1
 800504e:	9305      	str	r3, [sp, #20]
 8005050:	4619      	mov	r1, r3
 8005052:	f04f 0c0a 	mov.w	ip, #10
 8005056:	4620      	mov	r0, r4
 8005058:	f810 2b01 	ldrb.w	r2, [r0], #1
 800505c:	3a30      	subs	r2, #48	@ 0x30
 800505e:	2a09      	cmp	r2, #9
 8005060:	d903      	bls.n	800506a <_svfiprintf_r+0x1a6>
 8005062:	2b00      	cmp	r3, #0
 8005064:	d0c6      	beq.n	8004ff4 <_svfiprintf_r+0x130>
 8005066:	9105      	str	r1, [sp, #20]
 8005068:	e7c4      	b.n	8004ff4 <_svfiprintf_r+0x130>
 800506a:	fb0c 2101 	mla	r1, ip, r1, r2
 800506e:	4604      	mov	r4, r0
 8005070:	2301      	movs	r3, #1
 8005072:	e7f0      	b.n	8005056 <_svfiprintf_r+0x192>
 8005074:	ab03      	add	r3, sp, #12
 8005076:	9300      	str	r3, [sp, #0]
 8005078:	462a      	mov	r2, r5
 800507a:	4b0e      	ldr	r3, [pc, #56]	@ (80050b4 <_svfiprintf_r+0x1f0>)
 800507c:	a904      	add	r1, sp, #16
 800507e:	4638      	mov	r0, r7
 8005080:	f7fd fe96 	bl	8002db0 <_printf_float>
 8005084:	1c42      	adds	r2, r0, #1
 8005086:	4606      	mov	r6, r0
 8005088:	d1d6      	bne.n	8005038 <_svfiprintf_r+0x174>
 800508a:	89ab      	ldrh	r3, [r5, #12]
 800508c:	065b      	lsls	r3, r3, #25
 800508e:	f53f af2d 	bmi.w	8004eec <_svfiprintf_r+0x28>
 8005092:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005094:	e72c      	b.n	8004ef0 <_svfiprintf_r+0x2c>
 8005096:	ab03      	add	r3, sp, #12
 8005098:	9300      	str	r3, [sp, #0]
 800509a:	462a      	mov	r2, r5
 800509c:	4b05      	ldr	r3, [pc, #20]	@ (80050b4 <_svfiprintf_r+0x1f0>)
 800509e:	a904      	add	r1, sp, #16
 80050a0:	4638      	mov	r0, r7
 80050a2:	f7fe f91d 	bl	80032e0 <_printf_i>
 80050a6:	e7ed      	b.n	8005084 <_svfiprintf_r+0x1c0>
 80050a8:	08005c48 	.word	0x08005c48
 80050ac:	08005c52 	.word	0x08005c52
 80050b0:	08002db1 	.word	0x08002db1
 80050b4:	08004e0d 	.word	0x08004e0d
 80050b8:	08005c4e 	.word	0x08005c4e

080050bc <__sflush_r>:
 80050bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80050c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050c4:	0716      	lsls	r6, r2, #28
 80050c6:	4605      	mov	r5, r0
 80050c8:	460c      	mov	r4, r1
 80050ca:	d454      	bmi.n	8005176 <__sflush_r+0xba>
 80050cc:	684b      	ldr	r3, [r1, #4]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	dc02      	bgt.n	80050d8 <__sflush_r+0x1c>
 80050d2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	dd48      	ble.n	800516a <__sflush_r+0xae>
 80050d8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80050da:	2e00      	cmp	r6, #0
 80050dc:	d045      	beq.n	800516a <__sflush_r+0xae>
 80050de:	2300      	movs	r3, #0
 80050e0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80050e4:	682f      	ldr	r7, [r5, #0]
 80050e6:	6a21      	ldr	r1, [r4, #32]
 80050e8:	602b      	str	r3, [r5, #0]
 80050ea:	d030      	beq.n	800514e <__sflush_r+0x92>
 80050ec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80050ee:	89a3      	ldrh	r3, [r4, #12]
 80050f0:	0759      	lsls	r1, r3, #29
 80050f2:	d505      	bpl.n	8005100 <__sflush_r+0x44>
 80050f4:	6863      	ldr	r3, [r4, #4]
 80050f6:	1ad2      	subs	r2, r2, r3
 80050f8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80050fa:	b10b      	cbz	r3, 8005100 <__sflush_r+0x44>
 80050fc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80050fe:	1ad2      	subs	r2, r2, r3
 8005100:	2300      	movs	r3, #0
 8005102:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005104:	6a21      	ldr	r1, [r4, #32]
 8005106:	4628      	mov	r0, r5
 8005108:	47b0      	blx	r6
 800510a:	1c43      	adds	r3, r0, #1
 800510c:	89a3      	ldrh	r3, [r4, #12]
 800510e:	d106      	bne.n	800511e <__sflush_r+0x62>
 8005110:	6829      	ldr	r1, [r5, #0]
 8005112:	291d      	cmp	r1, #29
 8005114:	d82b      	bhi.n	800516e <__sflush_r+0xb2>
 8005116:	4a2a      	ldr	r2, [pc, #168]	@ (80051c0 <__sflush_r+0x104>)
 8005118:	410a      	asrs	r2, r1
 800511a:	07d6      	lsls	r6, r2, #31
 800511c:	d427      	bmi.n	800516e <__sflush_r+0xb2>
 800511e:	2200      	movs	r2, #0
 8005120:	6062      	str	r2, [r4, #4]
 8005122:	04d9      	lsls	r1, r3, #19
 8005124:	6922      	ldr	r2, [r4, #16]
 8005126:	6022      	str	r2, [r4, #0]
 8005128:	d504      	bpl.n	8005134 <__sflush_r+0x78>
 800512a:	1c42      	adds	r2, r0, #1
 800512c:	d101      	bne.n	8005132 <__sflush_r+0x76>
 800512e:	682b      	ldr	r3, [r5, #0]
 8005130:	b903      	cbnz	r3, 8005134 <__sflush_r+0x78>
 8005132:	6560      	str	r0, [r4, #84]	@ 0x54
 8005134:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005136:	602f      	str	r7, [r5, #0]
 8005138:	b1b9      	cbz	r1, 800516a <__sflush_r+0xae>
 800513a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800513e:	4299      	cmp	r1, r3
 8005140:	d002      	beq.n	8005148 <__sflush_r+0x8c>
 8005142:	4628      	mov	r0, r5
 8005144:	f7ff f9e0 	bl	8004508 <_free_r>
 8005148:	2300      	movs	r3, #0
 800514a:	6363      	str	r3, [r4, #52]	@ 0x34
 800514c:	e00d      	b.n	800516a <__sflush_r+0xae>
 800514e:	2301      	movs	r3, #1
 8005150:	4628      	mov	r0, r5
 8005152:	47b0      	blx	r6
 8005154:	4602      	mov	r2, r0
 8005156:	1c50      	adds	r0, r2, #1
 8005158:	d1c9      	bne.n	80050ee <__sflush_r+0x32>
 800515a:	682b      	ldr	r3, [r5, #0]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d0c6      	beq.n	80050ee <__sflush_r+0x32>
 8005160:	2b1d      	cmp	r3, #29
 8005162:	d001      	beq.n	8005168 <__sflush_r+0xac>
 8005164:	2b16      	cmp	r3, #22
 8005166:	d11e      	bne.n	80051a6 <__sflush_r+0xea>
 8005168:	602f      	str	r7, [r5, #0]
 800516a:	2000      	movs	r0, #0
 800516c:	e022      	b.n	80051b4 <__sflush_r+0xf8>
 800516e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005172:	b21b      	sxth	r3, r3
 8005174:	e01b      	b.n	80051ae <__sflush_r+0xf2>
 8005176:	690f      	ldr	r7, [r1, #16]
 8005178:	2f00      	cmp	r7, #0
 800517a:	d0f6      	beq.n	800516a <__sflush_r+0xae>
 800517c:	0793      	lsls	r3, r2, #30
 800517e:	680e      	ldr	r6, [r1, #0]
 8005180:	bf08      	it	eq
 8005182:	694b      	ldreq	r3, [r1, #20]
 8005184:	600f      	str	r7, [r1, #0]
 8005186:	bf18      	it	ne
 8005188:	2300      	movne	r3, #0
 800518a:	eba6 0807 	sub.w	r8, r6, r7
 800518e:	608b      	str	r3, [r1, #8]
 8005190:	f1b8 0f00 	cmp.w	r8, #0
 8005194:	dde9      	ble.n	800516a <__sflush_r+0xae>
 8005196:	6a21      	ldr	r1, [r4, #32]
 8005198:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800519a:	4643      	mov	r3, r8
 800519c:	463a      	mov	r2, r7
 800519e:	4628      	mov	r0, r5
 80051a0:	47b0      	blx	r6
 80051a2:	2800      	cmp	r0, #0
 80051a4:	dc08      	bgt.n	80051b8 <__sflush_r+0xfc>
 80051a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80051ae:	81a3      	strh	r3, [r4, #12]
 80051b0:	f04f 30ff 	mov.w	r0, #4294967295
 80051b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051b8:	4407      	add	r7, r0
 80051ba:	eba8 0800 	sub.w	r8, r8, r0
 80051be:	e7e7      	b.n	8005190 <__sflush_r+0xd4>
 80051c0:	dfbffffe 	.word	0xdfbffffe

080051c4 <_fflush_r>:
 80051c4:	b538      	push	{r3, r4, r5, lr}
 80051c6:	690b      	ldr	r3, [r1, #16]
 80051c8:	4605      	mov	r5, r0
 80051ca:	460c      	mov	r4, r1
 80051cc:	b913      	cbnz	r3, 80051d4 <_fflush_r+0x10>
 80051ce:	2500      	movs	r5, #0
 80051d0:	4628      	mov	r0, r5
 80051d2:	bd38      	pop	{r3, r4, r5, pc}
 80051d4:	b118      	cbz	r0, 80051de <_fflush_r+0x1a>
 80051d6:	6a03      	ldr	r3, [r0, #32]
 80051d8:	b90b      	cbnz	r3, 80051de <_fflush_r+0x1a>
 80051da:	f7fe fa2d 	bl	8003638 <__sinit>
 80051de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d0f3      	beq.n	80051ce <_fflush_r+0xa>
 80051e6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80051e8:	07d0      	lsls	r0, r2, #31
 80051ea:	d404      	bmi.n	80051f6 <_fflush_r+0x32>
 80051ec:	0599      	lsls	r1, r3, #22
 80051ee:	d402      	bmi.n	80051f6 <_fflush_r+0x32>
 80051f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80051f2:	f7fe fb38 	bl	8003866 <__retarget_lock_acquire_recursive>
 80051f6:	4628      	mov	r0, r5
 80051f8:	4621      	mov	r1, r4
 80051fa:	f7ff ff5f 	bl	80050bc <__sflush_r>
 80051fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005200:	07da      	lsls	r2, r3, #31
 8005202:	4605      	mov	r5, r0
 8005204:	d4e4      	bmi.n	80051d0 <_fflush_r+0xc>
 8005206:	89a3      	ldrh	r3, [r4, #12]
 8005208:	059b      	lsls	r3, r3, #22
 800520a:	d4e1      	bmi.n	80051d0 <_fflush_r+0xc>
 800520c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800520e:	f7fe fb2b 	bl	8003868 <__retarget_lock_release_recursive>
 8005212:	e7dd      	b.n	80051d0 <_fflush_r+0xc>

08005214 <memmove>:
 8005214:	4288      	cmp	r0, r1
 8005216:	b510      	push	{r4, lr}
 8005218:	eb01 0402 	add.w	r4, r1, r2
 800521c:	d902      	bls.n	8005224 <memmove+0x10>
 800521e:	4284      	cmp	r4, r0
 8005220:	4623      	mov	r3, r4
 8005222:	d807      	bhi.n	8005234 <memmove+0x20>
 8005224:	1e43      	subs	r3, r0, #1
 8005226:	42a1      	cmp	r1, r4
 8005228:	d008      	beq.n	800523c <memmove+0x28>
 800522a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800522e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005232:	e7f8      	b.n	8005226 <memmove+0x12>
 8005234:	4402      	add	r2, r0
 8005236:	4601      	mov	r1, r0
 8005238:	428a      	cmp	r2, r1
 800523a:	d100      	bne.n	800523e <memmove+0x2a>
 800523c:	bd10      	pop	{r4, pc}
 800523e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005242:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005246:	e7f7      	b.n	8005238 <memmove+0x24>

08005248 <_sbrk_r>:
 8005248:	b538      	push	{r3, r4, r5, lr}
 800524a:	4d06      	ldr	r5, [pc, #24]	@ (8005264 <_sbrk_r+0x1c>)
 800524c:	2300      	movs	r3, #0
 800524e:	4604      	mov	r4, r0
 8005250:	4608      	mov	r0, r1
 8005252:	602b      	str	r3, [r5, #0]
 8005254:	f7fc fe26 	bl	8001ea4 <_sbrk>
 8005258:	1c43      	adds	r3, r0, #1
 800525a:	d102      	bne.n	8005262 <_sbrk_r+0x1a>
 800525c:	682b      	ldr	r3, [r5, #0]
 800525e:	b103      	cbz	r3, 8005262 <_sbrk_r+0x1a>
 8005260:	6023      	str	r3, [r4, #0]
 8005262:	bd38      	pop	{r3, r4, r5, pc}
 8005264:	200003e0 	.word	0x200003e0

08005268 <memcpy>:
 8005268:	440a      	add	r2, r1
 800526a:	4291      	cmp	r1, r2
 800526c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005270:	d100      	bne.n	8005274 <memcpy+0xc>
 8005272:	4770      	bx	lr
 8005274:	b510      	push	{r4, lr}
 8005276:	f811 4b01 	ldrb.w	r4, [r1], #1
 800527a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800527e:	4291      	cmp	r1, r2
 8005280:	d1f9      	bne.n	8005276 <memcpy+0xe>
 8005282:	bd10      	pop	{r4, pc}

08005284 <__assert_func>:
 8005284:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005286:	4614      	mov	r4, r2
 8005288:	461a      	mov	r2, r3
 800528a:	4b09      	ldr	r3, [pc, #36]	@ (80052b0 <__assert_func+0x2c>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4605      	mov	r5, r0
 8005290:	68d8      	ldr	r0, [r3, #12]
 8005292:	b954      	cbnz	r4, 80052aa <__assert_func+0x26>
 8005294:	4b07      	ldr	r3, [pc, #28]	@ (80052b4 <__assert_func+0x30>)
 8005296:	461c      	mov	r4, r3
 8005298:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800529c:	9100      	str	r1, [sp, #0]
 800529e:	462b      	mov	r3, r5
 80052a0:	4905      	ldr	r1, [pc, #20]	@ (80052b8 <__assert_func+0x34>)
 80052a2:	f000 f86f 	bl	8005384 <fiprintf>
 80052a6:	f000 f87f 	bl	80053a8 <abort>
 80052aa:	4b04      	ldr	r3, [pc, #16]	@ (80052bc <__assert_func+0x38>)
 80052ac:	e7f4      	b.n	8005298 <__assert_func+0x14>
 80052ae:	bf00      	nop
 80052b0:	20000010 	.word	0x20000010
 80052b4:	08005c9e 	.word	0x08005c9e
 80052b8:	08005c70 	.word	0x08005c70
 80052bc:	08005c63 	.word	0x08005c63

080052c0 <_calloc_r>:
 80052c0:	b570      	push	{r4, r5, r6, lr}
 80052c2:	fba1 5402 	umull	r5, r4, r1, r2
 80052c6:	b93c      	cbnz	r4, 80052d8 <_calloc_r+0x18>
 80052c8:	4629      	mov	r1, r5
 80052ca:	f7ff f991 	bl	80045f0 <_malloc_r>
 80052ce:	4606      	mov	r6, r0
 80052d0:	b928      	cbnz	r0, 80052de <_calloc_r+0x1e>
 80052d2:	2600      	movs	r6, #0
 80052d4:	4630      	mov	r0, r6
 80052d6:	bd70      	pop	{r4, r5, r6, pc}
 80052d8:	220c      	movs	r2, #12
 80052da:	6002      	str	r2, [r0, #0]
 80052dc:	e7f9      	b.n	80052d2 <_calloc_r+0x12>
 80052de:	462a      	mov	r2, r5
 80052e0:	4621      	mov	r1, r4
 80052e2:	f7fe fa43 	bl	800376c <memset>
 80052e6:	e7f5      	b.n	80052d4 <_calloc_r+0x14>

080052e8 <__ascii_mbtowc>:
 80052e8:	b082      	sub	sp, #8
 80052ea:	b901      	cbnz	r1, 80052ee <__ascii_mbtowc+0x6>
 80052ec:	a901      	add	r1, sp, #4
 80052ee:	b142      	cbz	r2, 8005302 <__ascii_mbtowc+0x1a>
 80052f0:	b14b      	cbz	r3, 8005306 <__ascii_mbtowc+0x1e>
 80052f2:	7813      	ldrb	r3, [r2, #0]
 80052f4:	600b      	str	r3, [r1, #0]
 80052f6:	7812      	ldrb	r2, [r2, #0]
 80052f8:	1e10      	subs	r0, r2, #0
 80052fa:	bf18      	it	ne
 80052fc:	2001      	movne	r0, #1
 80052fe:	b002      	add	sp, #8
 8005300:	4770      	bx	lr
 8005302:	4610      	mov	r0, r2
 8005304:	e7fb      	b.n	80052fe <__ascii_mbtowc+0x16>
 8005306:	f06f 0001 	mvn.w	r0, #1
 800530a:	e7f8      	b.n	80052fe <__ascii_mbtowc+0x16>

0800530c <_realloc_r>:
 800530c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005310:	4680      	mov	r8, r0
 8005312:	4615      	mov	r5, r2
 8005314:	460c      	mov	r4, r1
 8005316:	b921      	cbnz	r1, 8005322 <_realloc_r+0x16>
 8005318:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800531c:	4611      	mov	r1, r2
 800531e:	f7ff b967 	b.w	80045f0 <_malloc_r>
 8005322:	b92a      	cbnz	r2, 8005330 <_realloc_r+0x24>
 8005324:	f7ff f8f0 	bl	8004508 <_free_r>
 8005328:	2400      	movs	r4, #0
 800532a:	4620      	mov	r0, r4
 800532c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005330:	f000 f841 	bl	80053b6 <_malloc_usable_size_r>
 8005334:	4285      	cmp	r5, r0
 8005336:	4606      	mov	r6, r0
 8005338:	d802      	bhi.n	8005340 <_realloc_r+0x34>
 800533a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800533e:	d8f4      	bhi.n	800532a <_realloc_r+0x1e>
 8005340:	4629      	mov	r1, r5
 8005342:	4640      	mov	r0, r8
 8005344:	f7ff f954 	bl	80045f0 <_malloc_r>
 8005348:	4607      	mov	r7, r0
 800534a:	2800      	cmp	r0, #0
 800534c:	d0ec      	beq.n	8005328 <_realloc_r+0x1c>
 800534e:	42b5      	cmp	r5, r6
 8005350:	462a      	mov	r2, r5
 8005352:	4621      	mov	r1, r4
 8005354:	bf28      	it	cs
 8005356:	4632      	movcs	r2, r6
 8005358:	f7ff ff86 	bl	8005268 <memcpy>
 800535c:	4621      	mov	r1, r4
 800535e:	4640      	mov	r0, r8
 8005360:	f7ff f8d2 	bl	8004508 <_free_r>
 8005364:	463c      	mov	r4, r7
 8005366:	e7e0      	b.n	800532a <_realloc_r+0x1e>

08005368 <__ascii_wctomb>:
 8005368:	4603      	mov	r3, r0
 800536a:	4608      	mov	r0, r1
 800536c:	b141      	cbz	r1, 8005380 <__ascii_wctomb+0x18>
 800536e:	2aff      	cmp	r2, #255	@ 0xff
 8005370:	d904      	bls.n	800537c <__ascii_wctomb+0x14>
 8005372:	228a      	movs	r2, #138	@ 0x8a
 8005374:	601a      	str	r2, [r3, #0]
 8005376:	f04f 30ff 	mov.w	r0, #4294967295
 800537a:	4770      	bx	lr
 800537c:	700a      	strb	r2, [r1, #0]
 800537e:	2001      	movs	r0, #1
 8005380:	4770      	bx	lr
	...

08005384 <fiprintf>:
 8005384:	b40e      	push	{r1, r2, r3}
 8005386:	b503      	push	{r0, r1, lr}
 8005388:	4601      	mov	r1, r0
 800538a:	ab03      	add	r3, sp, #12
 800538c:	4805      	ldr	r0, [pc, #20]	@ (80053a4 <fiprintf+0x20>)
 800538e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005392:	6800      	ldr	r0, [r0, #0]
 8005394:	9301      	str	r3, [sp, #4]
 8005396:	f000 f83f 	bl	8005418 <_vfiprintf_r>
 800539a:	b002      	add	sp, #8
 800539c:	f85d eb04 	ldr.w	lr, [sp], #4
 80053a0:	b003      	add	sp, #12
 80053a2:	4770      	bx	lr
 80053a4:	20000010 	.word	0x20000010

080053a8 <abort>:
 80053a8:	b508      	push	{r3, lr}
 80053aa:	2006      	movs	r0, #6
 80053ac:	f000 fa08 	bl	80057c0 <raise>
 80053b0:	2001      	movs	r0, #1
 80053b2:	f7fc fcff 	bl	8001db4 <_exit>

080053b6 <_malloc_usable_size_r>:
 80053b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053ba:	1f18      	subs	r0, r3, #4
 80053bc:	2b00      	cmp	r3, #0
 80053be:	bfbc      	itt	lt
 80053c0:	580b      	ldrlt	r3, [r1, r0]
 80053c2:	18c0      	addlt	r0, r0, r3
 80053c4:	4770      	bx	lr

080053c6 <__sfputc_r>:
 80053c6:	6893      	ldr	r3, [r2, #8]
 80053c8:	3b01      	subs	r3, #1
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	b410      	push	{r4}
 80053ce:	6093      	str	r3, [r2, #8]
 80053d0:	da08      	bge.n	80053e4 <__sfputc_r+0x1e>
 80053d2:	6994      	ldr	r4, [r2, #24]
 80053d4:	42a3      	cmp	r3, r4
 80053d6:	db01      	blt.n	80053dc <__sfputc_r+0x16>
 80053d8:	290a      	cmp	r1, #10
 80053da:	d103      	bne.n	80053e4 <__sfputc_r+0x1e>
 80053dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80053e0:	f000 b932 	b.w	8005648 <__swbuf_r>
 80053e4:	6813      	ldr	r3, [r2, #0]
 80053e6:	1c58      	adds	r0, r3, #1
 80053e8:	6010      	str	r0, [r2, #0]
 80053ea:	7019      	strb	r1, [r3, #0]
 80053ec:	4608      	mov	r0, r1
 80053ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80053f2:	4770      	bx	lr

080053f4 <__sfputs_r>:
 80053f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053f6:	4606      	mov	r6, r0
 80053f8:	460f      	mov	r7, r1
 80053fa:	4614      	mov	r4, r2
 80053fc:	18d5      	adds	r5, r2, r3
 80053fe:	42ac      	cmp	r4, r5
 8005400:	d101      	bne.n	8005406 <__sfputs_r+0x12>
 8005402:	2000      	movs	r0, #0
 8005404:	e007      	b.n	8005416 <__sfputs_r+0x22>
 8005406:	f814 1b01 	ldrb.w	r1, [r4], #1
 800540a:	463a      	mov	r2, r7
 800540c:	4630      	mov	r0, r6
 800540e:	f7ff ffda 	bl	80053c6 <__sfputc_r>
 8005412:	1c43      	adds	r3, r0, #1
 8005414:	d1f3      	bne.n	80053fe <__sfputs_r+0xa>
 8005416:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005418 <_vfiprintf_r>:
 8005418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800541c:	460d      	mov	r5, r1
 800541e:	b09d      	sub	sp, #116	@ 0x74
 8005420:	4614      	mov	r4, r2
 8005422:	4698      	mov	r8, r3
 8005424:	4606      	mov	r6, r0
 8005426:	b118      	cbz	r0, 8005430 <_vfiprintf_r+0x18>
 8005428:	6a03      	ldr	r3, [r0, #32]
 800542a:	b90b      	cbnz	r3, 8005430 <_vfiprintf_r+0x18>
 800542c:	f7fe f904 	bl	8003638 <__sinit>
 8005430:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005432:	07d9      	lsls	r1, r3, #31
 8005434:	d405      	bmi.n	8005442 <_vfiprintf_r+0x2a>
 8005436:	89ab      	ldrh	r3, [r5, #12]
 8005438:	059a      	lsls	r2, r3, #22
 800543a:	d402      	bmi.n	8005442 <_vfiprintf_r+0x2a>
 800543c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800543e:	f7fe fa12 	bl	8003866 <__retarget_lock_acquire_recursive>
 8005442:	89ab      	ldrh	r3, [r5, #12]
 8005444:	071b      	lsls	r3, r3, #28
 8005446:	d501      	bpl.n	800544c <_vfiprintf_r+0x34>
 8005448:	692b      	ldr	r3, [r5, #16]
 800544a:	b99b      	cbnz	r3, 8005474 <_vfiprintf_r+0x5c>
 800544c:	4629      	mov	r1, r5
 800544e:	4630      	mov	r0, r6
 8005450:	f000 f938 	bl	80056c4 <__swsetup_r>
 8005454:	b170      	cbz	r0, 8005474 <_vfiprintf_r+0x5c>
 8005456:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005458:	07dc      	lsls	r4, r3, #31
 800545a:	d504      	bpl.n	8005466 <_vfiprintf_r+0x4e>
 800545c:	f04f 30ff 	mov.w	r0, #4294967295
 8005460:	b01d      	add	sp, #116	@ 0x74
 8005462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005466:	89ab      	ldrh	r3, [r5, #12]
 8005468:	0598      	lsls	r0, r3, #22
 800546a:	d4f7      	bmi.n	800545c <_vfiprintf_r+0x44>
 800546c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800546e:	f7fe f9fb 	bl	8003868 <__retarget_lock_release_recursive>
 8005472:	e7f3      	b.n	800545c <_vfiprintf_r+0x44>
 8005474:	2300      	movs	r3, #0
 8005476:	9309      	str	r3, [sp, #36]	@ 0x24
 8005478:	2320      	movs	r3, #32
 800547a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800547e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005482:	2330      	movs	r3, #48	@ 0x30
 8005484:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005634 <_vfiprintf_r+0x21c>
 8005488:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800548c:	f04f 0901 	mov.w	r9, #1
 8005490:	4623      	mov	r3, r4
 8005492:	469a      	mov	sl, r3
 8005494:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005498:	b10a      	cbz	r2, 800549e <_vfiprintf_r+0x86>
 800549a:	2a25      	cmp	r2, #37	@ 0x25
 800549c:	d1f9      	bne.n	8005492 <_vfiprintf_r+0x7a>
 800549e:	ebba 0b04 	subs.w	fp, sl, r4
 80054a2:	d00b      	beq.n	80054bc <_vfiprintf_r+0xa4>
 80054a4:	465b      	mov	r3, fp
 80054a6:	4622      	mov	r2, r4
 80054a8:	4629      	mov	r1, r5
 80054aa:	4630      	mov	r0, r6
 80054ac:	f7ff ffa2 	bl	80053f4 <__sfputs_r>
 80054b0:	3001      	adds	r0, #1
 80054b2:	f000 80a7 	beq.w	8005604 <_vfiprintf_r+0x1ec>
 80054b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80054b8:	445a      	add	r2, fp
 80054ba:	9209      	str	r2, [sp, #36]	@ 0x24
 80054bc:	f89a 3000 	ldrb.w	r3, [sl]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	f000 809f 	beq.w	8005604 <_vfiprintf_r+0x1ec>
 80054c6:	2300      	movs	r3, #0
 80054c8:	f04f 32ff 	mov.w	r2, #4294967295
 80054cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80054d0:	f10a 0a01 	add.w	sl, sl, #1
 80054d4:	9304      	str	r3, [sp, #16]
 80054d6:	9307      	str	r3, [sp, #28]
 80054d8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80054dc:	931a      	str	r3, [sp, #104]	@ 0x68
 80054de:	4654      	mov	r4, sl
 80054e0:	2205      	movs	r2, #5
 80054e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054e6:	4853      	ldr	r0, [pc, #332]	@ (8005634 <_vfiprintf_r+0x21c>)
 80054e8:	f7fa fe82 	bl	80001f0 <memchr>
 80054ec:	9a04      	ldr	r2, [sp, #16]
 80054ee:	b9d8      	cbnz	r0, 8005528 <_vfiprintf_r+0x110>
 80054f0:	06d1      	lsls	r1, r2, #27
 80054f2:	bf44      	itt	mi
 80054f4:	2320      	movmi	r3, #32
 80054f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80054fa:	0713      	lsls	r3, r2, #28
 80054fc:	bf44      	itt	mi
 80054fe:	232b      	movmi	r3, #43	@ 0x2b
 8005500:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005504:	f89a 3000 	ldrb.w	r3, [sl]
 8005508:	2b2a      	cmp	r3, #42	@ 0x2a
 800550a:	d015      	beq.n	8005538 <_vfiprintf_r+0x120>
 800550c:	9a07      	ldr	r2, [sp, #28]
 800550e:	4654      	mov	r4, sl
 8005510:	2000      	movs	r0, #0
 8005512:	f04f 0c0a 	mov.w	ip, #10
 8005516:	4621      	mov	r1, r4
 8005518:	f811 3b01 	ldrb.w	r3, [r1], #1
 800551c:	3b30      	subs	r3, #48	@ 0x30
 800551e:	2b09      	cmp	r3, #9
 8005520:	d94b      	bls.n	80055ba <_vfiprintf_r+0x1a2>
 8005522:	b1b0      	cbz	r0, 8005552 <_vfiprintf_r+0x13a>
 8005524:	9207      	str	r2, [sp, #28]
 8005526:	e014      	b.n	8005552 <_vfiprintf_r+0x13a>
 8005528:	eba0 0308 	sub.w	r3, r0, r8
 800552c:	fa09 f303 	lsl.w	r3, r9, r3
 8005530:	4313      	orrs	r3, r2
 8005532:	9304      	str	r3, [sp, #16]
 8005534:	46a2      	mov	sl, r4
 8005536:	e7d2      	b.n	80054de <_vfiprintf_r+0xc6>
 8005538:	9b03      	ldr	r3, [sp, #12]
 800553a:	1d19      	adds	r1, r3, #4
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	9103      	str	r1, [sp, #12]
 8005540:	2b00      	cmp	r3, #0
 8005542:	bfbb      	ittet	lt
 8005544:	425b      	neglt	r3, r3
 8005546:	f042 0202 	orrlt.w	r2, r2, #2
 800554a:	9307      	strge	r3, [sp, #28]
 800554c:	9307      	strlt	r3, [sp, #28]
 800554e:	bfb8      	it	lt
 8005550:	9204      	strlt	r2, [sp, #16]
 8005552:	7823      	ldrb	r3, [r4, #0]
 8005554:	2b2e      	cmp	r3, #46	@ 0x2e
 8005556:	d10a      	bne.n	800556e <_vfiprintf_r+0x156>
 8005558:	7863      	ldrb	r3, [r4, #1]
 800555a:	2b2a      	cmp	r3, #42	@ 0x2a
 800555c:	d132      	bne.n	80055c4 <_vfiprintf_r+0x1ac>
 800555e:	9b03      	ldr	r3, [sp, #12]
 8005560:	1d1a      	adds	r2, r3, #4
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	9203      	str	r2, [sp, #12]
 8005566:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800556a:	3402      	adds	r4, #2
 800556c:	9305      	str	r3, [sp, #20]
 800556e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005644 <_vfiprintf_r+0x22c>
 8005572:	7821      	ldrb	r1, [r4, #0]
 8005574:	2203      	movs	r2, #3
 8005576:	4650      	mov	r0, sl
 8005578:	f7fa fe3a 	bl	80001f0 <memchr>
 800557c:	b138      	cbz	r0, 800558e <_vfiprintf_r+0x176>
 800557e:	9b04      	ldr	r3, [sp, #16]
 8005580:	eba0 000a 	sub.w	r0, r0, sl
 8005584:	2240      	movs	r2, #64	@ 0x40
 8005586:	4082      	lsls	r2, r0
 8005588:	4313      	orrs	r3, r2
 800558a:	3401      	adds	r4, #1
 800558c:	9304      	str	r3, [sp, #16]
 800558e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005592:	4829      	ldr	r0, [pc, #164]	@ (8005638 <_vfiprintf_r+0x220>)
 8005594:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005598:	2206      	movs	r2, #6
 800559a:	f7fa fe29 	bl	80001f0 <memchr>
 800559e:	2800      	cmp	r0, #0
 80055a0:	d03f      	beq.n	8005622 <_vfiprintf_r+0x20a>
 80055a2:	4b26      	ldr	r3, [pc, #152]	@ (800563c <_vfiprintf_r+0x224>)
 80055a4:	bb1b      	cbnz	r3, 80055ee <_vfiprintf_r+0x1d6>
 80055a6:	9b03      	ldr	r3, [sp, #12]
 80055a8:	3307      	adds	r3, #7
 80055aa:	f023 0307 	bic.w	r3, r3, #7
 80055ae:	3308      	adds	r3, #8
 80055b0:	9303      	str	r3, [sp, #12]
 80055b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80055b4:	443b      	add	r3, r7
 80055b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80055b8:	e76a      	b.n	8005490 <_vfiprintf_r+0x78>
 80055ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80055be:	460c      	mov	r4, r1
 80055c0:	2001      	movs	r0, #1
 80055c2:	e7a8      	b.n	8005516 <_vfiprintf_r+0xfe>
 80055c4:	2300      	movs	r3, #0
 80055c6:	3401      	adds	r4, #1
 80055c8:	9305      	str	r3, [sp, #20]
 80055ca:	4619      	mov	r1, r3
 80055cc:	f04f 0c0a 	mov.w	ip, #10
 80055d0:	4620      	mov	r0, r4
 80055d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80055d6:	3a30      	subs	r2, #48	@ 0x30
 80055d8:	2a09      	cmp	r2, #9
 80055da:	d903      	bls.n	80055e4 <_vfiprintf_r+0x1cc>
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d0c6      	beq.n	800556e <_vfiprintf_r+0x156>
 80055e0:	9105      	str	r1, [sp, #20]
 80055e2:	e7c4      	b.n	800556e <_vfiprintf_r+0x156>
 80055e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80055e8:	4604      	mov	r4, r0
 80055ea:	2301      	movs	r3, #1
 80055ec:	e7f0      	b.n	80055d0 <_vfiprintf_r+0x1b8>
 80055ee:	ab03      	add	r3, sp, #12
 80055f0:	9300      	str	r3, [sp, #0]
 80055f2:	462a      	mov	r2, r5
 80055f4:	4b12      	ldr	r3, [pc, #72]	@ (8005640 <_vfiprintf_r+0x228>)
 80055f6:	a904      	add	r1, sp, #16
 80055f8:	4630      	mov	r0, r6
 80055fa:	f7fd fbd9 	bl	8002db0 <_printf_float>
 80055fe:	4607      	mov	r7, r0
 8005600:	1c78      	adds	r0, r7, #1
 8005602:	d1d6      	bne.n	80055b2 <_vfiprintf_r+0x19a>
 8005604:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005606:	07d9      	lsls	r1, r3, #31
 8005608:	d405      	bmi.n	8005616 <_vfiprintf_r+0x1fe>
 800560a:	89ab      	ldrh	r3, [r5, #12]
 800560c:	059a      	lsls	r2, r3, #22
 800560e:	d402      	bmi.n	8005616 <_vfiprintf_r+0x1fe>
 8005610:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005612:	f7fe f929 	bl	8003868 <__retarget_lock_release_recursive>
 8005616:	89ab      	ldrh	r3, [r5, #12]
 8005618:	065b      	lsls	r3, r3, #25
 800561a:	f53f af1f 	bmi.w	800545c <_vfiprintf_r+0x44>
 800561e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005620:	e71e      	b.n	8005460 <_vfiprintf_r+0x48>
 8005622:	ab03      	add	r3, sp, #12
 8005624:	9300      	str	r3, [sp, #0]
 8005626:	462a      	mov	r2, r5
 8005628:	4b05      	ldr	r3, [pc, #20]	@ (8005640 <_vfiprintf_r+0x228>)
 800562a:	a904      	add	r1, sp, #16
 800562c:	4630      	mov	r0, r6
 800562e:	f7fd fe57 	bl	80032e0 <_printf_i>
 8005632:	e7e4      	b.n	80055fe <_vfiprintf_r+0x1e6>
 8005634:	08005c48 	.word	0x08005c48
 8005638:	08005c52 	.word	0x08005c52
 800563c:	08002db1 	.word	0x08002db1
 8005640:	080053f5 	.word	0x080053f5
 8005644:	08005c4e 	.word	0x08005c4e

08005648 <__swbuf_r>:
 8005648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800564a:	460e      	mov	r6, r1
 800564c:	4614      	mov	r4, r2
 800564e:	4605      	mov	r5, r0
 8005650:	b118      	cbz	r0, 800565a <__swbuf_r+0x12>
 8005652:	6a03      	ldr	r3, [r0, #32]
 8005654:	b90b      	cbnz	r3, 800565a <__swbuf_r+0x12>
 8005656:	f7fd ffef 	bl	8003638 <__sinit>
 800565a:	69a3      	ldr	r3, [r4, #24]
 800565c:	60a3      	str	r3, [r4, #8]
 800565e:	89a3      	ldrh	r3, [r4, #12]
 8005660:	071a      	lsls	r2, r3, #28
 8005662:	d501      	bpl.n	8005668 <__swbuf_r+0x20>
 8005664:	6923      	ldr	r3, [r4, #16]
 8005666:	b943      	cbnz	r3, 800567a <__swbuf_r+0x32>
 8005668:	4621      	mov	r1, r4
 800566a:	4628      	mov	r0, r5
 800566c:	f000 f82a 	bl	80056c4 <__swsetup_r>
 8005670:	b118      	cbz	r0, 800567a <__swbuf_r+0x32>
 8005672:	f04f 37ff 	mov.w	r7, #4294967295
 8005676:	4638      	mov	r0, r7
 8005678:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800567a:	6823      	ldr	r3, [r4, #0]
 800567c:	6922      	ldr	r2, [r4, #16]
 800567e:	1a98      	subs	r0, r3, r2
 8005680:	6963      	ldr	r3, [r4, #20]
 8005682:	b2f6      	uxtb	r6, r6
 8005684:	4283      	cmp	r3, r0
 8005686:	4637      	mov	r7, r6
 8005688:	dc05      	bgt.n	8005696 <__swbuf_r+0x4e>
 800568a:	4621      	mov	r1, r4
 800568c:	4628      	mov	r0, r5
 800568e:	f7ff fd99 	bl	80051c4 <_fflush_r>
 8005692:	2800      	cmp	r0, #0
 8005694:	d1ed      	bne.n	8005672 <__swbuf_r+0x2a>
 8005696:	68a3      	ldr	r3, [r4, #8]
 8005698:	3b01      	subs	r3, #1
 800569a:	60a3      	str	r3, [r4, #8]
 800569c:	6823      	ldr	r3, [r4, #0]
 800569e:	1c5a      	adds	r2, r3, #1
 80056a0:	6022      	str	r2, [r4, #0]
 80056a2:	701e      	strb	r6, [r3, #0]
 80056a4:	6962      	ldr	r2, [r4, #20]
 80056a6:	1c43      	adds	r3, r0, #1
 80056a8:	429a      	cmp	r2, r3
 80056aa:	d004      	beq.n	80056b6 <__swbuf_r+0x6e>
 80056ac:	89a3      	ldrh	r3, [r4, #12]
 80056ae:	07db      	lsls	r3, r3, #31
 80056b0:	d5e1      	bpl.n	8005676 <__swbuf_r+0x2e>
 80056b2:	2e0a      	cmp	r6, #10
 80056b4:	d1df      	bne.n	8005676 <__swbuf_r+0x2e>
 80056b6:	4621      	mov	r1, r4
 80056b8:	4628      	mov	r0, r5
 80056ba:	f7ff fd83 	bl	80051c4 <_fflush_r>
 80056be:	2800      	cmp	r0, #0
 80056c0:	d0d9      	beq.n	8005676 <__swbuf_r+0x2e>
 80056c2:	e7d6      	b.n	8005672 <__swbuf_r+0x2a>

080056c4 <__swsetup_r>:
 80056c4:	b538      	push	{r3, r4, r5, lr}
 80056c6:	4b29      	ldr	r3, [pc, #164]	@ (800576c <__swsetup_r+0xa8>)
 80056c8:	4605      	mov	r5, r0
 80056ca:	6818      	ldr	r0, [r3, #0]
 80056cc:	460c      	mov	r4, r1
 80056ce:	b118      	cbz	r0, 80056d8 <__swsetup_r+0x14>
 80056d0:	6a03      	ldr	r3, [r0, #32]
 80056d2:	b90b      	cbnz	r3, 80056d8 <__swsetup_r+0x14>
 80056d4:	f7fd ffb0 	bl	8003638 <__sinit>
 80056d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80056dc:	0719      	lsls	r1, r3, #28
 80056de:	d422      	bmi.n	8005726 <__swsetup_r+0x62>
 80056e0:	06da      	lsls	r2, r3, #27
 80056e2:	d407      	bmi.n	80056f4 <__swsetup_r+0x30>
 80056e4:	2209      	movs	r2, #9
 80056e6:	602a      	str	r2, [r5, #0]
 80056e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80056ec:	81a3      	strh	r3, [r4, #12]
 80056ee:	f04f 30ff 	mov.w	r0, #4294967295
 80056f2:	e033      	b.n	800575c <__swsetup_r+0x98>
 80056f4:	0758      	lsls	r0, r3, #29
 80056f6:	d512      	bpl.n	800571e <__swsetup_r+0x5a>
 80056f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80056fa:	b141      	cbz	r1, 800570e <__swsetup_r+0x4a>
 80056fc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005700:	4299      	cmp	r1, r3
 8005702:	d002      	beq.n	800570a <__swsetup_r+0x46>
 8005704:	4628      	mov	r0, r5
 8005706:	f7fe feff 	bl	8004508 <_free_r>
 800570a:	2300      	movs	r3, #0
 800570c:	6363      	str	r3, [r4, #52]	@ 0x34
 800570e:	89a3      	ldrh	r3, [r4, #12]
 8005710:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005714:	81a3      	strh	r3, [r4, #12]
 8005716:	2300      	movs	r3, #0
 8005718:	6063      	str	r3, [r4, #4]
 800571a:	6923      	ldr	r3, [r4, #16]
 800571c:	6023      	str	r3, [r4, #0]
 800571e:	89a3      	ldrh	r3, [r4, #12]
 8005720:	f043 0308 	orr.w	r3, r3, #8
 8005724:	81a3      	strh	r3, [r4, #12]
 8005726:	6923      	ldr	r3, [r4, #16]
 8005728:	b94b      	cbnz	r3, 800573e <__swsetup_r+0x7a>
 800572a:	89a3      	ldrh	r3, [r4, #12]
 800572c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005730:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005734:	d003      	beq.n	800573e <__swsetup_r+0x7a>
 8005736:	4621      	mov	r1, r4
 8005738:	4628      	mov	r0, r5
 800573a:	f000 f883 	bl	8005844 <__smakebuf_r>
 800573e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005742:	f013 0201 	ands.w	r2, r3, #1
 8005746:	d00a      	beq.n	800575e <__swsetup_r+0x9a>
 8005748:	2200      	movs	r2, #0
 800574a:	60a2      	str	r2, [r4, #8]
 800574c:	6962      	ldr	r2, [r4, #20]
 800574e:	4252      	negs	r2, r2
 8005750:	61a2      	str	r2, [r4, #24]
 8005752:	6922      	ldr	r2, [r4, #16]
 8005754:	b942      	cbnz	r2, 8005768 <__swsetup_r+0xa4>
 8005756:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800575a:	d1c5      	bne.n	80056e8 <__swsetup_r+0x24>
 800575c:	bd38      	pop	{r3, r4, r5, pc}
 800575e:	0799      	lsls	r1, r3, #30
 8005760:	bf58      	it	pl
 8005762:	6962      	ldrpl	r2, [r4, #20]
 8005764:	60a2      	str	r2, [r4, #8]
 8005766:	e7f4      	b.n	8005752 <__swsetup_r+0x8e>
 8005768:	2000      	movs	r0, #0
 800576a:	e7f7      	b.n	800575c <__swsetup_r+0x98>
 800576c:	20000010 	.word	0x20000010

08005770 <_raise_r>:
 8005770:	291f      	cmp	r1, #31
 8005772:	b538      	push	{r3, r4, r5, lr}
 8005774:	4605      	mov	r5, r0
 8005776:	460c      	mov	r4, r1
 8005778:	d904      	bls.n	8005784 <_raise_r+0x14>
 800577a:	2316      	movs	r3, #22
 800577c:	6003      	str	r3, [r0, #0]
 800577e:	f04f 30ff 	mov.w	r0, #4294967295
 8005782:	bd38      	pop	{r3, r4, r5, pc}
 8005784:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8005786:	b112      	cbz	r2, 800578e <_raise_r+0x1e>
 8005788:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800578c:	b94b      	cbnz	r3, 80057a2 <_raise_r+0x32>
 800578e:	4628      	mov	r0, r5
 8005790:	f000 f830 	bl	80057f4 <_getpid_r>
 8005794:	4622      	mov	r2, r4
 8005796:	4601      	mov	r1, r0
 8005798:	4628      	mov	r0, r5
 800579a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800579e:	f000 b817 	b.w	80057d0 <_kill_r>
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	d00a      	beq.n	80057bc <_raise_r+0x4c>
 80057a6:	1c59      	adds	r1, r3, #1
 80057a8:	d103      	bne.n	80057b2 <_raise_r+0x42>
 80057aa:	2316      	movs	r3, #22
 80057ac:	6003      	str	r3, [r0, #0]
 80057ae:	2001      	movs	r0, #1
 80057b0:	e7e7      	b.n	8005782 <_raise_r+0x12>
 80057b2:	2100      	movs	r1, #0
 80057b4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80057b8:	4620      	mov	r0, r4
 80057ba:	4798      	blx	r3
 80057bc:	2000      	movs	r0, #0
 80057be:	e7e0      	b.n	8005782 <_raise_r+0x12>

080057c0 <raise>:
 80057c0:	4b02      	ldr	r3, [pc, #8]	@ (80057cc <raise+0xc>)
 80057c2:	4601      	mov	r1, r0
 80057c4:	6818      	ldr	r0, [r3, #0]
 80057c6:	f7ff bfd3 	b.w	8005770 <_raise_r>
 80057ca:	bf00      	nop
 80057cc:	20000010 	.word	0x20000010

080057d0 <_kill_r>:
 80057d0:	b538      	push	{r3, r4, r5, lr}
 80057d2:	4d07      	ldr	r5, [pc, #28]	@ (80057f0 <_kill_r+0x20>)
 80057d4:	2300      	movs	r3, #0
 80057d6:	4604      	mov	r4, r0
 80057d8:	4608      	mov	r0, r1
 80057da:	4611      	mov	r1, r2
 80057dc:	602b      	str	r3, [r5, #0]
 80057de:	f7fc fad9 	bl	8001d94 <_kill>
 80057e2:	1c43      	adds	r3, r0, #1
 80057e4:	d102      	bne.n	80057ec <_kill_r+0x1c>
 80057e6:	682b      	ldr	r3, [r5, #0]
 80057e8:	b103      	cbz	r3, 80057ec <_kill_r+0x1c>
 80057ea:	6023      	str	r3, [r4, #0]
 80057ec:	bd38      	pop	{r3, r4, r5, pc}
 80057ee:	bf00      	nop
 80057f0:	200003e0 	.word	0x200003e0

080057f4 <_getpid_r>:
 80057f4:	f7fc bac6 	b.w	8001d84 <_getpid>

080057f8 <__swhatbuf_r>:
 80057f8:	b570      	push	{r4, r5, r6, lr}
 80057fa:	460c      	mov	r4, r1
 80057fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005800:	2900      	cmp	r1, #0
 8005802:	b096      	sub	sp, #88	@ 0x58
 8005804:	4615      	mov	r5, r2
 8005806:	461e      	mov	r6, r3
 8005808:	da0d      	bge.n	8005826 <__swhatbuf_r+0x2e>
 800580a:	89a3      	ldrh	r3, [r4, #12]
 800580c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005810:	f04f 0100 	mov.w	r1, #0
 8005814:	bf14      	ite	ne
 8005816:	2340      	movne	r3, #64	@ 0x40
 8005818:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800581c:	2000      	movs	r0, #0
 800581e:	6031      	str	r1, [r6, #0]
 8005820:	602b      	str	r3, [r5, #0]
 8005822:	b016      	add	sp, #88	@ 0x58
 8005824:	bd70      	pop	{r4, r5, r6, pc}
 8005826:	466a      	mov	r2, sp
 8005828:	f000 f848 	bl	80058bc <_fstat_r>
 800582c:	2800      	cmp	r0, #0
 800582e:	dbec      	blt.n	800580a <__swhatbuf_r+0x12>
 8005830:	9901      	ldr	r1, [sp, #4]
 8005832:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005836:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800583a:	4259      	negs	r1, r3
 800583c:	4159      	adcs	r1, r3
 800583e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005842:	e7eb      	b.n	800581c <__swhatbuf_r+0x24>

08005844 <__smakebuf_r>:
 8005844:	898b      	ldrh	r3, [r1, #12]
 8005846:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005848:	079d      	lsls	r5, r3, #30
 800584a:	4606      	mov	r6, r0
 800584c:	460c      	mov	r4, r1
 800584e:	d507      	bpl.n	8005860 <__smakebuf_r+0x1c>
 8005850:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005854:	6023      	str	r3, [r4, #0]
 8005856:	6123      	str	r3, [r4, #16]
 8005858:	2301      	movs	r3, #1
 800585a:	6163      	str	r3, [r4, #20]
 800585c:	b003      	add	sp, #12
 800585e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005860:	ab01      	add	r3, sp, #4
 8005862:	466a      	mov	r2, sp
 8005864:	f7ff ffc8 	bl	80057f8 <__swhatbuf_r>
 8005868:	9f00      	ldr	r7, [sp, #0]
 800586a:	4605      	mov	r5, r0
 800586c:	4639      	mov	r1, r7
 800586e:	4630      	mov	r0, r6
 8005870:	f7fe febe 	bl	80045f0 <_malloc_r>
 8005874:	b948      	cbnz	r0, 800588a <__smakebuf_r+0x46>
 8005876:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800587a:	059a      	lsls	r2, r3, #22
 800587c:	d4ee      	bmi.n	800585c <__smakebuf_r+0x18>
 800587e:	f023 0303 	bic.w	r3, r3, #3
 8005882:	f043 0302 	orr.w	r3, r3, #2
 8005886:	81a3      	strh	r3, [r4, #12]
 8005888:	e7e2      	b.n	8005850 <__smakebuf_r+0xc>
 800588a:	89a3      	ldrh	r3, [r4, #12]
 800588c:	6020      	str	r0, [r4, #0]
 800588e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005892:	81a3      	strh	r3, [r4, #12]
 8005894:	9b01      	ldr	r3, [sp, #4]
 8005896:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800589a:	b15b      	cbz	r3, 80058b4 <__smakebuf_r+0x70>
 800589c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80058a0:	4630      	mov	r0, r6
 80058a2:	f000 f81d 	bl	80058e0 <_isatty_r>
 80058a6:	b128      	cbz	r0, 80058b4 <__smakebuf_r+0x70>
 80058a8:	89a3      	ldrh	r3, [r4, #12]
 80058aa:	f023 0303 	bic.w	r3, r3, #3
 80058ae:	f043 0301 	orr.w	r3, r3, #1
 80058b2:	81a3      	strh	r3, [r4, #12]
 80058b4:	89a3      	ldrh	r3, [r4, #12]
 80058b6:	431d      	orrs	r5, r3
 80058b8:	81a5      	strh	r5, [r4, #12]
 80058ba:	e7cf      	b.n	800585c <__smakebuf_r+0x18>

080058bc <_fstat_r>:
 80058bc:	b538      	push	{r3, r4, r5, lr}
 80058be:	4d07      	ldr	r5, [pc, #28]	@ (80058dc <_fstat_r+0x20>)
 80058c0:	2300      	movs	r3, #0
 80058c2:	4604      	mov	r4, r0
 80058c4:	4608      	mov	r0, r1
 80058c6:	4611      	mov	r1, r2
 80058c8:	602b      	str	r3, [r5, #0]
 80058ca:	f7fc fac3 	bl	8001e54 <_fstat>
 80058ce:	1c43      	adds	r3, r0, #1
 80058d0:	d102      	bne.n	80058d8 <_fstat_r+0x1c>
 80058d2:	682b      	ldr	r3, [r5, #0]
 80058d4:	b103      	cbz	r3, 80058d8 <_fstat_r+0x1c>
 80058d6:	6023      	str	r3, [r4, #0]
 80058d8:	bd38      	pop	{r3, r4, r5, pc}
 80058da:	bf00      	nop
 80058dc:	200003e0 	.word	0x200003e0

080058e0 <_isatty_r>:
 80058e0:	b538      	push	{r3, r4, r5, lr}
 80058e2:	4d06      	ldr	r5, [pc, #24]	@ (80058fc <_isatty_r+0x1c>)
 80058e4:	2300      	movs	r3, #0
 80058e6:	4604      	mov	r4, r0
 80058e8:	4608      	mov	r0, r1
 80058ea:	602b      	str	r3, [r5, #0]
 80058ec:	f7fc fac2 	bl	8001e74 <_isatty>
 80058f0:	1c43      	adds	r3, r0, #1
 80058f2:	d102      	bne.n	80058fa <_isatty_r+0x1a>
 80058f4:	682b      	ldr	r3, [r5, #0]
 80058f6:	b103      	cbz	r3, 80058fa <_isatty_r+0x1a>
 80058f8:	6023      	str	r3, [r4, #0]
 80058fa:	bd38      	pop	{r3, r4, r5, pc}
 80058fc:	200003e0 	.word	0x200003e0

08005900 <ceil>:
 8005900:	ec51 0b10 	vmov	r0, r1, d0
 8005904:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800590c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8005910:	2e13      	cmp	r6, #19
 8005912:	460c      	mov	r4, r1
 8005914:	4605      	mov	r5, r0
 8005916:	4680      	mov	r8, r0
 8005918:	dc2e      	bgt.n	8005978 <ceil+0x78>
 800591a:	2e00      	cmp	r6, #0
 800591c:	da11      	bge.n	8005942 <ceil+0x42>
 800591e:	a332      	add	r3, pc, #200	@ (adr r3, 80059e8 <ceil+0xe8>)
 8005920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005924:	f7fa fcc2 	bl	80002ac <__adddf3>
 8005928:	2200      	movs	r2, #0
 800592a:	2300      	movs	r3, #0
 800592c:	f7fb f904 	bl	8000b38 <__aeabi_dcmpgt>
 8005930:	b120      	cbz	r0, 800593c <ceil+0x3c>
 8005932:	2c00      	cmp	r4, #0
 8005934:	db4f      	blt.n	80059d6 <ceil+0xd6>
 8005936:	4325      	orrs	r5, r4
 8005938:	d151      	bne.n	80059de <ceil+0xde>
 800593a:	462c      	mov	r4, r5
 800593c:	4621      	mov	r1, r4
 800593e:	4628      	mov	r0, r5
 8005940:	e023      	b.n	800598a <ceil+0x8a>
 8005942:	4f2b      	ldr	r7, [pc, #172]	@ (80059f0 <ceil+0xf0>)
 8005944:	4137      	asrs	r7, r6
 8005946:	ea01 0307 	and.w	r3, r1, r7
 800594a:	4303      	orrs	r3, r0
 800594c:	d01d      	beq.n	800598a <ceil+0x8a>
 800594e:	a326      	add	r3, pc, #152	@ (adr r3, 80059e8 <ceil+0xe8>)
 8005950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005954:	f7fa fcaa 	bl	80002ac <__adddf3>
 8005958:	2200      	movs	r2, #0
 800595a:	2300      	movs	r3, #0
 800595c:	f7fb f8ec 	bl	8000b38 <__aeabi_dcmpgt>
 8005960:	2800      	cmp	r0, #0
 8005962:	d0eb      	beq.n	800593c <ceil+0x3c>
 8005964:	2c00      	cmp	r4, #0
 8005966:	bfc2      	ittt	gt
 8005968:	f44f 1380 	movgt.w	r3, #1048576	@ 0x100000
 800596c:	4133      	asrgt	r3, r6
 800596e:	18e4      	addgt	r4, r4, r3
 8005970:	ea24 0407 	bic.w	r4, r4, r7
 8005974:	2500      	movs	r5, #0
 8005976:	e7e1      	b.n	800593c <ceil+0x3c>
 8005978:	2e33      	cmp	r6, #51	@ 0x33
 800597a:	dd0a      	ble.n	8005992 <ceil+0x92>
 800597c:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8005980:	d103      	bne.n	800598a <ceil+0x8a>
 8005982:	4602      	mov	r2, r0
 8005984:	460b      	mov	r3, r1
 8005986:	f7fa fc91 	bl	80002ac <__adddf3>
 800598a:	ec41 0b10 	vmov	d0, r0, r1
 800598e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005992:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8005996:	f04f 37ff 	mov.w	r7, #4294967295
 800599a:	40df      	lsrs	r7, r3
 800599c:	4238      	tst	r0, r7
 800599e:	d0f4      	beq.n	800598a <ceil+0x8a>
 80059a0:	a311      	add	r3, pc, #68	@ (adr r3, 80059e8 <ceil+0xe8>)
 80059a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059a6:	f7fa fc81 	bl	80002ac <__adddf3>
 80059aa:	2200      	movs	r2, #0
 80059ac:	2300      	movs	r3, #0
 80059ae:	f7fb f8c3 	bl	8000b38 <__aeabi_dcmpgt>
 80059b2:	2800      	cmp	r0, #0
 80059b4:	d0c2      	beq.n	800593c <ceil+0x3c>
 80059b6:	2c00      	cmp	r4, #0
 80059b8:	dd0a      	ble.n	80059d0 <ceil+0xd0>
 80059ba:	2e14      	cmp	r6, #20
 80059bc:	d101      	bne.n	80059c2 <ceil+0xc2>
 80059be:	3401      	adds	r4, #1
 80059c0:	e006      	b.n	80059d0 <ceil+0xd0>
 80059c2:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 80059c6:	2301      	movs	r3, #1
 80059c8:	40b3      	lsls	r3, r6
 80059ca:	441d      	add	r5, r3
 80059cc:	45a8      	cmp	r8, r5
 80059ce:	d8f6      	bhi.n	80059be <ceil+0xbe>
 80059d0:	ea25 0507 	bic.w	r5, r5, r7
 80059d4:	e7b2      	b.n	800593c <ceil+0x3c>
 80059d6:	2500      	movs	r5, #0
 80059d8:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 80059dc:	e7ae      	b.n	800593c <ceil+0x3c>
 80059de:	4c05      	ldr	r4, [pc, #20]	@ (80059f4 <ceil+0xf4>)
 80059e0:	2500      	movs	r5, #0
 80059e2:	e7ab      	b.n	800593c <ceil+0x3c>
 80059e4:	f3af 8000 	nop.w
 80059e8:	8800759c 	.word	0x8800759c
 80059ec:	7e37e43c 	.word	0x7e37e43c
 80059f0:	000fffff 	.word	0x000fffff
 80059f4:	3ff00000 	.word	0x3ff00000

080059f8 <_init>:
 80059f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059fa:	bf00      	nop
 80059fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059fe:	bc08      	pop	{r3}
 8005a00:	469e      	mov	lr, r3
 8005a02:	4770      	bx	lr

08005a04 <_fini>:
 8005a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a06:	bf00      	nop
 8005a08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a0a:	bc08      	pop	{r3}
 8005a0c:	469e      	mov	lr, r3
 8005a0e:	4770      	bx	lr
